'use strict';
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) =>
  key in obj
    ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value })
    : (obj[key] = value);
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (cb, mod) =>
  function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, 'default', { value: mod, enumerable: true }) : target,
    mod
  )
);

// node_modules/@smithy/types/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  'node_modules/@smithy/types/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      AlgorithmId: () => AlgorithmId,
      EndpointURLScheme: () => EndpointURLScheme,
      FieldPosition: () => FieldPosition,
      HttpApiKeyAuthLocation: () => HttpApiKeyAuthLocation,
      HttpAuthLocation: () => HttpAuthLocation,
      IniSectionType: () => IniSectionType,
      RequestHandlerProtocol: () => RequestHandlerProtocol,
      SMITHY_CONTEXT_KEY: () => SMITHY_CONTEXT_KEY,
      getDefaultClientConfiguration: () => getDefaultClientConfiguration,
      resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig,
    });
    module2.exports = __toCommonJS(index_exports);
    var HttpAuthLocation = /* @__PURE__ */ ((HttpAuthLocation2) => {
      HttpAuthLocation2['HEADER'] = 'header';
      HttpAuthLocation2['QUERY'] = 'query';
      return HttpAuthLocation2;
    })(HttpAuthLocation || {});
    var HttpApiKeyAuthLocation = /* @__PURE__ */ ((HttpApiKeyAuthLocation2) => {
      HttpApiKeyAuthLocation2['HEADER'] = 'header';
      HttpApiKeyAuthLocation2['QUERY'] = 'query';
      return HttpApiKeyAuthLocation2;
    })(HttpApiKeyAuthLocation || {});
    var EndpointURLScheme = /* @__PURE__ */ ((EndpointURLScheme2) => {
      EndpointURLScheme2['HTTP'] = 'http';
      EndpointURLScheme2['HTTPS'] = 'https';
      return EndpointURLScheme2;
    })(EndpointURLScheme || {});
    var AlgorithmId = /* @__PURE__ */ ((AlgorithmId2) => {
      AlgorithmId2['MD5'] = 'md5';
      AlgorithmId2['CRC32'] = 'crc32';
      AlgorithmId2['CRC32C'] = 'crc32c';
      AlgorithmId2['SHA1'] = 'sha1';
      AlgorithmId2['SHA256'] = 'sha256';
      return AlgorithmId2;
    })(AlgorithmId || {});
    var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const checksumAlgorithms = [];
      if (runtimeConfig.sha256 !== void 0) {
        checksumAlgorithms.push({
          algorithmId: /* @__PURE__ */ __name(() => 'sha256', 'algorithmId'),
          checksumConstructor: /* @__PURE__ */ __name(() => runtimeConfig.sha256, 'checksumConstructor'),
        });
      }
      if (runtimeConfig.md5 != void 0) {
        checksumAlgorithms.push({
          algorithmId: /* @__PURE__ */ __name(() => 'md5', 'algorithmId'),
          checksumConstructor: /* @__PURE__ */ __name(() => runtimeConfig.md5, 'checksumConstructor'),
        });
      }
      return {
        addChecksumAlgorithm(algo) {
          checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return checksumAlgorithms;
        },
      };
    }, 'getChecksumConfiguration');
    var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    }, 'resolveChecksumRuntimeConfig');
    var getDefaultClientConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return getChecksumConfiguration(runtimeConfig);
    }, 'getDefaultClientConfiguration');
    var resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return resolveChecksumRuntimeConfig(config);
    }, 'resolveDefaultRuntimeConfig');
    var FieldPosition = /* @__PURE__ */ ((FieldPosition2) => {
      FieldPosition2[(FieldPosition2['HEADER'] = 0)] = 'HEADER';
      FieldPosition2[(FieldPosition2['TRAILER'] = 1)] = 'TRAILER';
      return FieldPosition2;
    })(FieldPosition || {});
    var SMITHY_CONTEXT_KEY = '__smithy_context';
    var IniSectionType = /* @__PURE__ */ ((IniSectionType2) => {
      IniSectionType2['PROFILE'] = 'profile';
      IniSectionType2['SSO_SESSION'] = 'sso-session';
      IniSectionType2['SERVICES'] = 'services';
      return IniSectionType2;
    })(IniSectionType || {});
    var RequestHandlerProtocol = /* @__PURE__ */ ((RequestHandlerProtocol2) => {
      RequestHandlerProtocol2['HTTP_0_9'] = 'http/0.9';
      RequestHandlerProtocol2['HTTP_1_0'] = 'http/1.0';
      RequestHandlerProtocol2['TDS_8_0'] = 'tds/8.0';
      return RequestHandlerProtocol2;
    })(RequestHandlerProtocol || {});
  },
});

// node_modules/@smithy/protocol-http/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  'node_modules/@smithy/protocol-http/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      Field: () => Field,
      Fields: () => Fields,
      HttpRequest: () => HttpRequest,
      HttpResponse: () => HttpResponse,
      IHttpRequest: () => import_types.HttpRequest,
      getHttpHandlerExtensionConfiguration: () => getHttpHandlerExtensionConfiguration,
      isValidHostname: () => isValidHostname,
      resolveHttpHandlerRuntimeConfig: () => resolveHttpHandlerRuntimeConfig,
    });
    module2.exports = __toCommonJS(index_exports);
    var getHttpHandlerExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return {
        setHttpHandler(handler) {
          runtimeConfig.httpHandler = handler;
        },
        httpHandler() {
          return runtimeConfig.httpHandler;
        },
        updateHttpClientConfig(key, value) {
          var _a5;
          (_a5 = runtimeConfig.httpHandler) == null ? void 0 : _a5.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
          return runtimeConfig.httpHandler.httpHandlerConfigs();
        },
      };
    }, 'getHttpHandlerExtensionConfiguration');
    var resolveHttpHandlerRuntimeConfig = /* @__PURE__ */ __name((httpHandlerExtensionConfiguration) => {
      return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler(),
      };
    }, 'resolveHttpHandlerRuntimeConfig');
    var import_types = require_dist_cjs();
    var _a;
    var Field =
      ((_a = class {
        constructor({ name, kind = import_types.FieldPosition.HEADER, values = [] }) {
          this.name = name;
          this.kind = kind;
          this.values = values;
        }
        add(value) {
          this.values.push(value);
        }
        set(values) {
          this.values = values;
        }
        remove(value) {
          this.values = this.values.filter((v) => v !== value);
        }
        toString() {
          return this.values.map((v) => (v.includes(',') || v.includes(' ') ? `"${v}"` : v)).join(', ');
        }
        get() {
          return this.values;
        }
      }),
      (() => {
        __name(_a, 'Field');
      })(),
      _a);
    var _a2;
    var Fields =
      ((_a2 = class {
        constructor({ fields = [], encoding = 'utf-8' }) {
          this.entries = {};
          fields.forEach(this.setField.bind(this));
          this.encoding = encoding;
        }
        setField(field) {
          this.entries[field.name.toLowerCase()] = field;
        }
        getField(name) {
          return this.entries[name.toLowerCase()];
        }
        removeField(name) {
          delete this.entries[name.toLowerCase()];
        }
        getByType(kind) {
          return Object.values(this.entries).filter((field) => field.kind === kind);
        }
      }),
      (() => {
        __name(_a2, 'Fields');
      })(),
      _a2);
    var _a3;
    var HttpRequest =
      ((_a3 = class {
        constructor(options) {
          this.method = options.method || 'GET';
          this.hostname = options.hostname || 'localhost';
          this.port = options.port;
          this.query = options.query || {};
          this.headers = options.headers || {};
          this.body = options.body;
          this.protocol = options.protocol
            ? options.protocol.slice(-1) !== ':'
              ? `${options.protocol}:`
              : options.protocol
            : 'https:';
          this.path = options.path ? (options.path.charAt(0) !== '/' ? `/${options.path}` : options.path) : '/';
          this.username = options.username;
          this.password = options.password;
          this.fragment = options.fragment;
        }
        static clone(request) {
          const cloned = new _a3(
            __spreadProps(__spreadValues({}, request), {
              headers: __spreadValues({}, request.headers),
            })
          );
          if (cloned.query) {
            cloned.query = cloneQuery(cloned.query);
          }
          return cloned;
        }
        static isInstance(request) {
          if (!request) {
            return false;
          }
          const req = request;
          return (
            'method' in req &&
            'protocol' in req &&
            'hostname' in req &&
            'path' in req &&
            typeof req['query'] === 'object' &&
            typeof req['headers'] === 'object'
          );
        }
        clone() {
          return _a3.clone(this);
        }
      }),
      (() => {
        __name(_a3, 'HttpRequest');
      })(),
      _a3);
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return __spreadProps(__spreadValues({}, carry), {
          [paramName]: Array.isArray(param) ? [...param] : param,
        });
      }, {});
    }
    __name(cloneQuery, 'cloneQuery');
    var _a4;
    var HttpResponse =
      ((_a4 = class {
        constructor(options) {
          this.statusCode = options.statusCode;
          this.reason = options.reason;
          this.headers = options.headers || {};
          this.body = options.body;
        }
        static isInstance(response) {
          if (!response) return false;
          const resp = response;
          return typeof resp.statusCode === 'number' && typeof resp.headers === 'object';
        }
      }),
      (() => {
        __name(_a4, 'HttpResponse');
      })(),
      _a4);
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    __name(isValidHostname, 'isValidHostname');
  },
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  'node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      getHostHeaderPlugin: () => getHostHeaderPlugin,
      hostHeaderMiddleware: () => hostHeaderMiddleware,
      hostHeaderMiddlewareOptions: () => hostHeaderMiddlewareOptions,
      resolveHostHeaderConfig: () => resolveHostHeaderConfig,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_protocol_http = require_dist_cjs2();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    __name(resolveHostHeaderConfig, 'resolveHostHeaderConfig');
    var hostHeaderMiddleware = /* @__PURE__ */ __name(
      (options) => (next) => async (args) => {
        if (!import_protocol_http.HttpRequest.isInstance(args.request)) return next(args);
        const { request } = args;
        const { handlerProtocol = '' } = options.requestHandler.metadata || {};
        if (handlerProtocol.indexOf('h2') >= 0 && !request.headers[':authority']) {
          delete request.headers['host'];
          request.headers[':authority'] = request.hostname + (request.port ? ':' + request.port : '');
        } else if (!request.headers['host']) {
          let host = request.hostname;
          if (request.port != null) host += `:${request.port}`;
          request.headers['host'] = host;
        }
        return next(args);
      },
      'hostHeaderMiddleware'
    );
    var hostHeaderMiddlewareOptions = {
      name: 'hostHeaderMiddleware',
      step: 'build',
      priority: 'low',
      tags: ['HOST'],
      override: true,
    };
    var getHostHeaderPlugin = /* @__PURE__ */ __name(
      (options) => ({
        applyToStack: /* @__PURE__ */ __name((clientStack) => {
          clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
        }, 'applyToStack'),
      }),
      'getHostHeaderPlugin'
    );
  },
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  'node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      getLoggerPlugin: () => getLoggerPlugin,
      loggerMiddleware: () => loggerMiddleware,
      loggerMiddlewareOptions: () => loggerMiddlewareOptions,
    });
    module2.exports = __toCommonJS(index_exports);
    var loggerMiddleware = /* @__PURE__ */ __name(
      () => (next, context) => async (args) => {
        var _b, _c;
        try {
          const response = await next(args);
          const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
          const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
          const inputFilterSensitiveLog =
            overrideInputFilterSensitiveLog != null ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
          const outputFilterSensitiveLog =
            overrideOutputFilterSensitiveLog != null
              ? overrideOutputFilterSensitiveLog
              : context.outputFilterSensitiveLog;
          const _a = response.output,
            { $metadata } = _a,
            outputWithoutMetadata = __objRest(_a, ['$metadata']);
          (_b = logger2 == null ? void 0 : logger2.info) == null
            ? void 0
            : _b.call(logger2, {
                clientName,
                commandName,
                input: inputFilterSensitiveLog(args.input),
                output: outputFilterSensitiveLog(outputWithoutMetadata),
                metadata: $metadata,
              });
          return response;
        } catch (error) {
          const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
          const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
          const inputFilterSensitiveLog =
            overrideInputFilterSensitiveLog != null ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
          (_c = logger2 == null ? void 0 : logger2.error) == null
            ? void 0
            : _c.call(logger2, {
                clientName,
                commandName,
                input: inputFilterSensitiveLog(args.input),
                error,
                metadata: error.$metadata,
              });
          throw error;
        }
      },
      'loggerMiddleware'
    );
    var loggerMiddlewareOptions = {
      name: 'loggerMiddleware',
      tags: ['LOGGER'],
      step: 'initialize',
      override: true,
    };
    var getLoggerPlugin = /* @__PURE__ */ __name(
      (options) => ({
        applyToStack: /* @__PURE__ */ __name((clientStack) => {
          clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
        }, 'applyToStack'),
      }),
      'getLoggerPlugin'
    );
  },
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  'node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      addRecursionDetectionMiddlewareOptions: () => addRecursionDetectionMiddlewareOptions,
      getRecursionDetectionPlugin: () => getRecursionDetectionPlugin,
      recursionDetectionMiddleware: () => recursionDetectionMiddleware,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_protocol_http = require_dist_cjs2();
    var TRACE_ID_HEADER_NAME = 'X-Amzn-Trace-Id';
    var ENV_LAMBDA_FUNCTION_NAME = 'AWS_LAMBDA_FUNCTION_NAME';
    var ENV_TRACE_ID = '_X_AMZN_TRACE_ID';
    var recursionDetectionMiddleware = /* @__PURE__ */ __name(
      (options) => (next) => async (args) => {
        var _a, _b;
        const { request } = args;
        if (!import_protocol_http.HttpRequest.isInstance(request) || options.runtime !== 'node') {
          return next(args);
        }
        const traceIdHeader =
          (_b = Object.keys((_a = request.headers) != null ? _a : {}).find(
            (h) => h.toLowerCase() === TRACE_ID_HEADER_NAME.toLowerCase()
          )) != null
            ? _b
            : TRACE_ID_HEADER_NAME;
        if (request.headers.hasOwnProperty(traceIdHeader)) {
          return next(args);
        }
        const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
        const traceId = process.env[ENV_TRACE_ID];
        const nonEmptyString = /* @__PURE__ */ __name(
          (str) => typeof str === 'string' && str.length > 0,
          'nonEmptyString'
        );
        if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
          request.headers[TRACE_ID_HEADER_NAME] = traceId;
        }
        return next(
          __spreadProps(__spreadValues({}, args), {
            request,
          })
        );
      },
      'recursionDetectionMiddleware'
    );
    var addRecursionDetectionMiddlewareOptions = {
      step: 'build',
      tags: ['RECURSION_DETECTION'],
      name: 'recursionDetectionMiddleware',
      override: true,
      priority: 'low',
    };
    var getRecursionDetectionPlugin = /* @__PURE__ */ __name(
      (options) => ({
        applyToStack: /* @__PURE__ */ __name((clientStack) => {
          clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
        }, 'applyToStack'),
      }),
      'getRecursionDetectionPlugin'
    );
  },
});

// node_modules/@smithy/util-middleware/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  'node_modules/@smithy/util-middleware/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      getSmithyContext: () => getSmithyContext,
      normalizeProvider: () => normalizeProvider,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_types = require_dist_cjs();
    var getSmithyContext = /* @__PURE__ */ __name(
      (context) => context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {}),
      'getSmithyContext'
    );
    var normalizeProvider = /* @__PURE__ */ __name((input) => {
      if (typeof input === 'function') return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    }, 'normalizeProvider');
  },
});

// node_modules/@smithy/middleware-serde/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  'node_modules/@smithy/middleware-serde/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      deserializerMiddleware: () => deserializerMiddleware,
      deserializerMiddlewareOption: () => deserializerMiddlewareOption,
      getSerdePlugin: () => getSerdePlugin,
      serializerMiddleware: () => serializerMiddleware,
      serializerMiddlewareOption: () => serializerMiddlewareOption,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_protocol_http = require_dist_cjs2();
    var deserializerMiddleware = /* @__PURE__ */ __name(
      (options, deserializer) => (next, context) => async (args) => {
        var _a, _b, _c, _d;
        const { response } = await next(args);
        try {
          const parsed = await deserializer(response, options);
          return {
            response,
            output: parsed,
          };
        } catch (error) {
          Object.defineProperty(error, '$response', {
            value: response,
          });
          if (!('$metadata' in error)) {
            const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
            try {
              error.message += '\n  ' + hint;
            } catch (e) {
              if (
                !context.logger ||
                ((_b = (_a = context.logger) == null ? void 0 : _a.constructor) == null ? void 0 : _b.name) ===
                  'NoOpLogger'
              ) {
                console.warn(hint);
              } else {
                (_d = (_c = context.logger) == null ? void 0 : _c.warn) == null ? void 0 : _d.call(_c, hint);
              }
            }
            if (typeof error.$responseBodyText !== 'undefined') {
              if (error.$response) {
                error.$response.body = error.$responseBodyText;
              }
            }
            try {
              if (import_protocol_http.HttpResponse.isInstance(response)) {
                const { headers = {} } = response;
                const headerEntries = Object.entries(headers);
                error.$metadata = {
                  httpStatusCode: response.statusCode,
                  requestId: findHeader(/^x-[\w-]+-request-?id$/, headerEntries),
                  extendedRequestId: findHeader(/^x-[\w-]+-id-2$/, headerEntries),
                  cfId: findHeader(/^x-[\w-]+-cf-id$/, headerEntries),
                };
              }
            } catch (e) {}
          }
          throw error;
        }
      },
      'deserializerMiddleware'
    );
    var findHeader = /* @__PURE__ */ __name((pattern, headers) => {
      return (headers.find(([k]) => {
        return k.match(pattern);
      }) || [void 0, void 0])[1];
    }, 'findHeader');
    var serializerMiddleware = /* @__PURE__ */ __name(
      (options, serializer) => (next, context) => async (args) => {
        var _a;
        const endpointConfig = options;
        const endpoint =
          ((_a = context.endpointV2) == null ? void 0 : _a.url) && endpointConfig.urlParser
            ? async () => endpointConfig.urlParser(context.endpointV2.url)
            : endpointConfig.endpoint;
        if (!endpoint) {
          throw new Error('No valid endpoint provider available.');
        }
        const request = await serializer(args.input, __spreadProps(__spreadValues({}, options), { endpoint }));
        return next(
          __spreadProps(__spreadValues({}, args), {
            request,
          })
        );
      },
      'serializerMiddleware'
    );
    var deserializerMiddlewareOption = {
      name: 'deserializerMiddleware',
      step: 'deserialize',
      tags: ['DESERIALIZER'],
      override: true,
    };
    var serializerMiddlewareOption = {
      name: 'serializerMiddleware',
      step: 'serialize',
      tags: ['SERIALIZER'],
      override: true,
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: /* @__PURE__ */ __name((commandStack) => {
          commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
          commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
        }, 'applyToStack'),
      };
    }
    __name(getSerdePlugin, 'getSerdePlugin');
  },
});

// node_modules/@smithy/is-array-buffer/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  'node_modules/@smithy/is-array-buffer/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      isArrayBuffer: () => isArrayBuffer,
    });
    module2.exports = __toCommonJS(index_exports);
    var isArrayBuffer = /* @__PURE__ */ __name(
      (arg) =>
        (typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer) ||
        Object.prototype.toString.call(arg) === '[object ArrayBuffer]',
      'isArrayBuffer'
    );
  },
});

// node_modules/@smithy/util-buffer-from/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  'node_modules/@smithy/util-buffer-from/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      fromArrayBuffer: () => fromArrayBuffer,
      fromString: () => fromString,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_is_array_buffer = require_dist_cjs8();
    var import_buffer = require('buffer');
    var fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return import_buffer.Buffer.from(input, offset, length);
    }, 'fromArrayBuffer');
    var fromString = /* @__PURE__ */ __name((input, encoding) => {
      if (typeof input !== 'string') {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
    }, 'fromString');
  },
});

// node_modules/@smithy/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  'node_modules/@smithy/util-base64/dist-cjs/fromBase64.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs9();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase642 = (input) => {
      if ((input.length * 3) % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, 'base64');
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports.fromBase64 = fromBase642;
  },
});

// node_modules/@smithy/util-utf8/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  'node_modules/@smithy/util-utf8/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      fromUtf8: () => fromUtf8,
      toUint8Array: () => toUint8Array,
      toUtf8: () => toUtf8,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_util_buffer_from = require_dist_cjs9();
    var fromUtf8 = /* @__PURE__ */ __name((input) => {
      const buf = (0, import_util_buffer_from.fromString)(input, 'utf8');
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }, 'fromUtf8');
    var toUint8Array = /* @__PURE__ */ __name((data) => {
      if (typeof data === 'string') {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }, 'toUint8Array');
    var toUtf8 = /* @__PURE__ */ __name((input) => {
      if (typeof input === 'string') {
        return input;
      }
      if (typeof input !== 'object' || typeof input.byteOffset !== 'number' || typeof input.byteLength !== 'number') {
        throw new Error('@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.');
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString(
        'utf8'
      );
    }, 'toUtf8');
  },
});

// node_modules/@smithy/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  'node_modules/@smithy/util-base64/dist-cjs/toBase64.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs9();
    var util_utf8_1 = require_dist_cjs10();
    var toBase642 = (_input) => {
      let input;
      if (typeof _input === 'string') {
        input = (0, util_utf8_1.fromUtf8)(_input);
      } else {
        input = _input;
      }
      if (typeof input !== 'object' || typeof input.byteOffset !== 'number' || typeof input.byteLength !== 'number') {
        throw new Error('@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.');
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString(
        'base64'
      );
    };
    exports.toBase64 = toBase642;
  },
});

// node_modules/@smithy/util-base64/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  'node_modules/@smithy/util-base64/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (
      __copyProps2(target, mod, 'default'), secondTarget && __copyProps2(secondTarget, mod, 'default')
    );
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    module2.exports = __toCommonJS(index_exports);
    __reExport(index_exports, require_fromBase64(), module2.exports);
    __reExport(index_exports, require_toBase64(), module2.exports);
  },
});

// node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js
var require_ChecksumStream = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ChecksumStream = void 0;
    var util_base64_1 = require_dist_cjs11();
    var stream_1 = require('stream');
    var ChecksumStream2 = class extends stream_1.Duplex {
      constructor({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) {
        var _a, _b;
        super();
        if (typeof source.pipe === 'function') {
          this.source = source;
        } else {
          throw new Error(
            `@smithy/util-stream: unsupported source type ${
              (_b =
                (_a = source === null || source === void 0 ? void 0 : source.constructor) === null || _a === void 0
                  ? void 0
                  : _a.name) !== null && _b !== void 0
                ? _b
                : source
            } in ChecksumStream.`
          );
        }
        this.base64Encoder =
          base64Encoder !== null && base64Encoder !== void 0 ? base64Encoder : util_base64_1.toBase64;
        this.expectedChecksum = expectedChecksum;
        this.checksum = checksum;
        this.checksumSourceLocation = checksumSourceLocation;
        this.source.pipe(this);
      }
      _read(size) {}
      _write(chunk, encoding, callback) {
        try {
          this.checksum.update(chunk);
          this.push(chunk);
        } catch (e) {
          return callback(e);
        }
        return callback();
      }
      async _final(callback) {
        try {
          const digest = await this.checksum.digest();
          const received = this.base64Encoder(digest);
          if (this.expectedChecksum !== received) {
            return callback(
              new Error(
                `Checksum mismatch: expected "${this.expectedChecksum}" but received "${received}" in response header "${this.checksumSourceLocation}".`
              )
            );
          }
        } catch (e) {
          return callback(e);
        }
        this.push(null);
        return callback();
      }
    };
    exports.ChecksumStream = ChecksumStream2;
  },
});

// node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js
var require_stream_type_check = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isBlob = exports.isReadableStream = void 0;
    var isReadableStream2 = (stream) => {
      var _a;
      return (
        typeof ReadableStream === 'function' &&
        (((_a = stream === null || stream === void 0 ? void 0 : stream.constructor) === null || _a === void 0
          ? void 0
          : _a.name) === ReadableStream.name ||
          stream instanceof ReadableStream)
      );
    };
    exports.isReadableStream = isReadableStream2;
    var isBlob2 = (blob) => {
      var _a;
      return (
        typeof Blob === 'function' &&
        (((_a = blob === null || blob === void 0 ? void 0 : blob.constructor) === null || _a === void 0
          ? void 0
          : _a.name) === Blob.name ||
          blob instanceof Blob)
      );
    };
    exports.isBlob = isBlob2;
  },
});

// node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js
var require_ChecksumStream_browser = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ChecksumStream = void 0;
    var ReadableStreamRef = typeof ReadableStream === 'function' ? ReadableStream : function () {};
    var ChecksumStream2 = class extends ReadableStreamRef {};
    exports.ChecksumStream = ChecksumStream2;
  },
});

// node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js
var require_createChecksumStream_browser = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createChecksumStream = void 0;
    var util_base64_1 = require_dist_cjs11();
    var stream_type_check_1 = require_stream_type_check();
    var ChecksumStream_browser_1 = require_ChecksumStream_browser();
    var createChecksumStream2 = ({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) => {
      var _a, _b;
      if (!(0, stream_type_check_1.isReadableStream)(source)) {
        throw new Error(
          `@smithy/util-stream: unsupported source type ${
            (_b =
              (_a = source === null || source === void 0 ? void 0 : source.constructor) === null || _a === void 0
                ? void 0
                : _a.name) !== null && _b !== void 0
              ? _b
              : source
          } in ChecksumStream.`
        );
      }
      const encoder = base64Encoder !== null && base64Encoder !== void 0 ? base64Encoder : util_base64_1.toBase64;
      if (typeof TransformStream !== 'function') {
        throw new Error(
          '@smithy/util-stream: unable to instantiate ChecksumStream because API unavailable: ReadableStream/TransformStream.'
        );
      }
      const transform = new TransformStream({
        start() {},
        async transform(chunk, controller) {
          checksum.update(chunk);
          controller.enqueue(chunk);
        },
        async flush(controller) {
          const digest = await checksum.digest();
          const received = encoder(digest);
          if (expectedChecksum !== received) {
            const error = new Error(
              `Checksum mismatch: expected "${expectedChecksum}" but received "${received}" in response header "${checksumSourceLocation}".`
            );
            controller.error(error);
          } else {
            controller.terminate();
          }
        },
      });
      source.pipeThrough(transform);
      const readable = transform.readable;
      Object.setPrototypeOf(readable, ChecksumStream_browser_1.ChecksumStream.prototype);
      return readable;
    };
    exports.createChecksumStream = createChecksumStream2;
  },
});

// node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js
var require_createChecksumStream = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createChecksumStream = createChecksumStream2;
    var stream_type_check_1 = require_stream_type_check();
    var ChecksumStream_1 = require_ChecksumStream();
    var createChecksumStream_browser_1 = require_createChecksumStream_browser();
    function createChecksumStream2(init) {
      if (typeof ReadableStream === 'function' && (0, stream_type_check_1.isReadableStream)(init.source)) {
        return (0, createChecksumStream_browser_1.createChecksumStream)(init);
      }
      return new ChecksumStream_1.ChecksumStream(init);
    }
  },
});

// node_modules/@smithy/util-stream/dist-cjs/ByteArrayCollector.js
var require_ByteArrayCollector = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/ByteArrayCollector.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ByteArrayCollector = void 0;
    var ByteArrayCollector = class {
      constructor(allocByteArray) {
        this.allocByteArray = allocByteArray;
        this.byteLength = 0;
        this.byteArrays = [];
      }
      push(byteArray) {
        this.byteArrays.push(byteArray);
        this.byteLength += byteArray.byteLength;
      }
      flush() {
        if (this.byteArrays.length === 1) {
          const bytes = this.byteArrays[0];
          this.reset();
          return bytes;
        }
        const aggregation = this.allocByteArray(this.byteLength);
        let cursor = 0;
        for (let i = 0; i < this.byteArrays.length; ++i) {
          const bytes = this.byteArrays[i];
          aggregation.set(bytes, cursor);
          cursor += bytes.byteLength;
        }
        this.reset();
        return aggregation;
      }
      reset() {
        this.byteArrays = [];
        this.byteLength = 0;
      }
    };
    exports.ByteArrayCollector = ByteArrayCollector;
  },
});

// node_modules/@smithy/util-stream/dist-cjs/createBufferedReadableStream.js
var require_createBufferedReadableStream = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/createBufferedReadableStream.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createBufferedReadable = void 0;
    exports.createBufferedReadableStream = createBufferedReadableStream;
    exports.merge = merge;
    exports.flush = flush;
    exports.sizeOf = sizeOf;
    exports.modeOf = modeOf;
    var ByteArrayCollector_1 = require_ByteArrayCollector();
    function createBufferedReadableStream(upstream, size, logger2) {
      const reader = upstream.getReader();
      let streamBufferingLoggedWarning = false;
      let bytesSeen = 0;
      const buffers = ['', new ByteArrayCollector_1.ByteArrayCollector((size2) => new Uint8Array(size2))];
      let mode = -1;
      const pull = async (controller) => {
        const { value, done } = await reader.read();
        const chunk = value;
        if (done) {
          if (mode !== -1) {
            const remainder = flush(buffers, mode);
            if (sizeOf(remainder) > 0) {
              controller.enqueue(remainder);
            }
          }
          controller.close();
        } else {
          const chunkMode = modeOf(chunk, false);
          if (mode !== chunkMode) {
            if (mode >= 0) {
              controller.enqueue(flush(buffers, mode));
            }
            mode = chunkMode;
          }
          if (mode === -1) {
            controller.enqueue(chunk);
            return;
          }
          const chunkSize = sizeOf(chunk);
          bytesSeen += chunkSize;
          const bufferSize = sizeOf(buffers[mode]);
          if (chunkSize >= size && bufferSize === 0) {
            controller.enqueue(chunk);
          } else {
            const newSize = merge(buffers, mode, chunk);
            if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {
              streamBufferingLoggedWarning = true;
              logger2 === null || logger2 === void 0
                ? void 0
                : logger2.warn(
                    `@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`
                  );
            }
            if (newSize >= size) {
              controller.enqueue(flush(buffers, mode));
            } else {
              await pull(controller);
            }
          }
        }
      };
      return new ReadableStream({
        pull,
      });
    }
    exports.createBufferedReadable = createBufferedReadableStream;
    function merge(buffers, mode, chunk) {
      switch (mode) {
        case 0:
          buffers[0] += chunk;
          return sizeOf(buffers[0]);
        case 1:
        case 2:
          buffers[mode].push(chunk);
          return sizeOf(buffers[mode]);
      }
    }
    function flush(buffers, mode) {
      switch (mode) {
        case 0:
          const s = buffers[0];
          buffers[0] = '';
          return s;
        case 1:
        case 2:
          return buffers[mode].flush();
      }
      throw new Error(`@smithy/util-stream - invalid index ${mode} given to flush()`);
    }
    function sizeOf(chunk) {
      var _a, _b;
      return (_b =
        (_a = chunk === null || chunk === void 0 ? void 0 : chunk.byteLength) !== null && _a !== void 0
          ? _a
          : chunk === null || chunk === void 0
          ? void 0
          : chunk.length) !== null && _b !== void 0
        ? _b
        : 0;
    }
    function modeOf(chunk, allowBuffer = true) {
      if (allowBuffer && typeof Buffer !== 'undefined' && chunk instanceof Buffer) {
        return 2;
      }
      if (chunk instanceof Uint8Array) {
        return 1;
      }
      if (typeof chunk === 'string') {
        return 0;
      }
      return -1;
    }
  },
});

// node_modules/@smithy/util-stream/dist-cjs/createBufferedReadable.js
var require_createBufferedReadable = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/createBufferedReadable.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createBufferedReadable = createBufferedReadable2;
    var node_stream_1 = require('stream');
    var ByteArrayCollector_1 = require_ByteArrayCollector();
    var createBufferedReadableStream_1 = require_createBufferedReadableStream();
    var stream_type_check_1 = require_stream_type_check();
    function createBufferedReadable2(upstream, size, logger2) {
      if ((0, stream_type_check_1.isReadableStream)(upstream)) {
        return (0, createBufferedReadableStream_1.createBufferedReadableStream)(upstream, size, logger2);
      }
      const downstream = new node_stream_1.Readable({ read() {} });
      let streamBufferingLoggedWarning = false;
      let bytesSeen = 0;
      const buffers = [
        '',
        new ByteArrayCollector_1.ByteArrayCollector((size2) => new Uint8Array(size2)),
        new ByteArrayCollector_1.ByteArrayCollector((size2) => Buffer.from(new Uint8Array(size2))),
      ];
      let mode = -1;
      upstream.on('data', (chunk) => {
        const chunkMode = (0, createBufferedReadableStream_1.modeOf)(chunk, true);
        if (mode !== chunkMode) {
          if (mode >= 0) {
            downstream.push((0, createBufferedReadableStream_1.flush)(buffers, mode));
          }
          mode = chunkMode;
        }
        if (mode === -1) {
          downstream.push(chunk);
          return;
        }
        const chunkSize = (0, createBufferedReadableStream_1.sizeOf)(chunk);
        bytesSeen += chunkSize;
        const bufferSize = (0, createBufferedReadableStream_1.sizeOf)(buffers[mode]);
        if (chunkSize >= size && bufferSize === 0) {
          downstream.push(chunk);
        } else {
          const newSize = (0, createBufferedReadableStream_1.merge)(buffers, mode, chunk);
          if (!streamBufferingLoggedWarning && bytesSeen > size * 2) {
            streamBufferingLoggedWarning = true;
            logger2 === null || logger2 === void 0
              ? void 0
              : logger2.warn(
                  `@smithy/util-stream - stream chunk size ${chunkSize} is below threshold of ${size}, automatically buffering.`
                );
          }
          if (newSize >= size) {
            downstream.push((0, createBufferedReadableStream_1.flush)(buffers, mode));
          }
        }
      });
      upstream.on('end', () => {
        if (mode !== -1) {
          const remainder = (0, createBufferedReadableStream_1.flush)(buffers, mode);
          if ((0, createBufferedReadableStream_1.sizeOf)(remainder) > 0) {
            downstream.push(remainder);
          }
        }
        downstream.push(null);
      });
      return downstream;
    }
  },
});

// node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js
var require_getAwsChunkedEncodingStream = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getAwsChunkedEncodingStream = void 0;
    var stream_1 = require('stream');
    var getAwsChunkedEncodingStream2 = (readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired =
        base64Encoder !== void 0 &&
        checksumAlgorithmFn !== void 0 &&
        checksumLocationName !== void 0 &&
        streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {} });
      readableStream.on('data', (data) => {
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r
`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push('\r\n');
      });
      readableStream.on('end', async () => {
        awsChunkedEncodingStream.push(`0\r
`);
        if (checksumRequired) {
          const checksum = base64Encoder(await digest);
          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
          awsChunkedEncodingStream.push(`\r
`);
        }
        awsChunkedEncodingStream.push(null);
      });
      return awsChunkedEncodingStream;
    };
    exports.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream2;
  },
});

// node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js
var require_headStream_browser = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.headStream = headStream2;
    async function headStream2(stream, bytes) {
      var _a;
      let byteLengthCounter = 0;
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          byteLengthCounter +=
            (_a = value === null || value === void 0 ? void 0 : value.byteLength) !== null && _a !== void 0 ? _a : 0;
        }
        if (byteLengthCounter >= bytes) {
          break;
        }
        isDone = done;
      }
      reader.releaseLock();
      const collected = new Uint8Array(Math.min(bytes, byteLengthCounter));
      let offset = 0;
      for (const chunk of chunks) {
        if (chunk.byteLength > collected.byteLength - offset) {
          collected.set(chunk.subarray(0, collected.byteLength - offset), offset);
          break;
        } else {
          collected.set(chunk, offset);
        }
        offset += chunk.length;
      }
      return collected;
    }
  },
});

// node_modules/@smithy/util-stream/dist-cjs/headStream.js
var require_headStream = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/headStream.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.headStream = void 0;
    var stream_1 = require('stream');
    var headStream_browser_1 = require_headStream_browser();
    var stream_type_check_1 = require_stream_type_check();
    var headStream2 = (stream, bytes) => {
      if ((0, stream_type_check_1.isReadableStream)(stream)) {
        return (0, headStream_browser_1.headStream)(stream, bytes);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector();
        collector.limit = bytes;
        stream.pipe(collector);
        stream.on('error', (err) => {
          collector.end();
          reject(err);
        });
        collector.on('error', reject);
        collector.on('finish', function () {
          const bytes2 = new Uint8Array(Buffer.concat(this.buffers));
          resolve(bytes2);
        });
      });
    };
    exports.headStream = headStream2;
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.buffers = [];
        this.limit = Infinity;
        this.bytesBuffered = 0;
      }
      _write(chunk, encoding, callback) {
        var _a;
        this.buffers.push(chunk);
        this.bytesBuffered += (_a = chunk.byteLength) !== null && _a !== void 0 ? _a : 0;
        if (this.bytesBuffered >= this.limit) {
          const excess = this.bytesBuffered - this.limit;
          const tailBuffer = this.buffers[this.buffers.length - 1];
          this.buffers[this.buffers.length - 1] = tailBuffer.subarray(0, tailBuffer.byteLength - excess);
          this.emit('finish');
        }
        callback();
      }
    };
  },
});

// node_modules/@smithy/util-uri-escape/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  'node_modules/@smithy/util-uri-escape/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      escapeUri: () => escapeUri,
      escapeUriPath: () => escapeUriPath,
    });
    module2.exports = __toCommonJS(index_exports);
    var escapeUri = /* @__PURE__ */ __name(
      (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode),
      'escapeUri'
    );
    var hexEncode = /* @__PURE__ */ __name((c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`, 'hexEncode');
    var escapeUriPath = /* @__PURE__ */ __name((uri) => uri.split('/').map(escapeUri).join('/'), 'escapeUriPath');
  },
});

// node_modules/@smithy/querystring-builder/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  'node_modules/@smithy/querystring-builder/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      buildQueryString: () => buildQueryString,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_util_uri_escape = require_dist_cjs12();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, import_util_uri_escape.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, import_util_uri_escape.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === 'string') {
            qsEntry += `=${(0, import_util_uri_escape.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join('&');
    }
    __name(buildQueryString, 'buildQueryString');
  },
});

// node_modules/@smithy/node-http-handler/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  'node_modules/@smithy/node-http-handler/dist-cjs/index.js'(exports, module2) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (
      (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),
      __copyProps2(
        isNodeMode || !mod || !mod.__esModule
          ? __defProp2(target, 'default', { value: mod, enumerable: true })
          : target,
        mod
      )
    );
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      DEFAULT_REQUEST_TIMEOUT: () => DEFAULT_REQUEST_TIMEOUT,
      NodeHttp2Handler: () => NodeHttp2Handler,
      NodeHttpHandler: () => NodeHttpHandler,
      streamCollector: () => streamCollector,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_protocol_http = require_dist_cjs2();
    var import_querystring_builder = require_dist_cjs13();
    var import_http = require('http');
    var import_https = require('https');
    var NODEJS_TIMEOUT_ERROR_CODES = ['ECONNRESET', 'EPIPE', 'ETIMEDOUT'];
    var getTransformedHeaders = /* @__PURE__ */ __name((headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(',') : headerValues;
      }
      return transformedHeaders;
    }, 'getTransformedHeaders');
    var timing = {
      setTimeout: /* @__PURE__ */ __name((cb, ms) => setTimeout(cb, ms), 'setTimeout'),
      clearTimeout: /* @__PURE__ */ __name((timeoutId) => clearTimeout(timeoutId), 'clearTimeout'),
    };
    var DEFER_EVENT_LISTENER_TIME = 1e3;
    var setConnectionTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return -1;
      }
      const registerTimeout = /* @__PURE__ */ __name((offset) => {
        const timeoutId = timing.setTimeout(() => {
          request.destroy();
          reject(
            Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: 'TimeoutError',
            })
          );
        }, timeoutInMs - offset);
        const doWithSocket = /* @__PURE__ */ __name((socket) => {
          if (socket == null ? void 0 : socket.connecting) {
            socket.on('connect', () => {
              timing.clearTimeout(timeoutId);
            });
          } else {
            timing.clearTimeout(timeoutId);
          }
        }, 'doWithSocket');
        if (request.socket) {
          doWithSocket(request.socket);
        } else {
          request.on('socket', doWithSocket);
        }
      }, 'registerTimeout');
      if (timeoutInMs < 2e3) {
        registerTimeout(0);
        return 0;
      }
      return timing.setTimeout(registerTimeout.bind(null, DEFER_EVENT_LISTENER_TIME), DEFER_EVENT_LISTENER_TIME);
    }, 'setConnectionTimeout');
    var DEFER_EVENT_LISTENER_TIME2 = 3e3;
    var setSocketKeepAlive = /* @__PURE__ */ __name(
      (request, { keepAlive, keepAliveMsecs }, deferTimeMs = DEFER_EVENT_LISTENER_TIME2) => {
        if (keepAlive !== true) {
          return -1;
        }
        const registerListener = /* @__PURE__ */ __name(() => {
          if (request.socket) {
            request.socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
          } else {
            request.on('socket', (socket) => {
              socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
            });
          }
        }, 'registerListener');
        if (deferTimeMs === 0) {
          registerListener();
          return 0;
        }
        return timing.setTimeout(registerListener, deferTimeMs);
      },
      'setSocketKeepAlive'
    );
    var DEFER_EVENT_LISTENER_TIME3 = 3e3;
    var setSocketTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = DEFAULT_REQUEST_TIMEOUT) => {
      const registerTimeout = /* @__PURE__ */ __name((offset) => {
        const timeout = timeoutInMs - offset;
        const onTimeout = /* @__PURE__ */ __name(() => {
          request.destroy();
          reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: 'TimeoutError' }));
        }, 'onTimeout');
        if (request.socket) {
          request.socket.setTimeout(timeout, onTimeout);
          request.on('close', () => {
            var _a6;
            return (_a6 = request.socket) == null ? void 0 : _a6.removeListener('timeout', onTimeout);
          });
        } else {
          request.setTimeout(timeout, onTimeout);
        }
      }, 'registerTimeout');
      if (0 < timeoutInMs && timeoutInMs < 6e3) {
        registerTimeout(0);
        return 0;
      }
      return timing.setTimeout(
        registerTimeout.bind(null, timeoutInMs === 0 ? 0 : DEFER_EVENT_LISTENER_TIME3),
        DEFER_EVENT_LISTENER_TIME3
      );
    }, 'setSocketTimeout');
    var import_stream = require('stream');
    var MIN_WAIT_TIME = 6e3;
    async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
      var _a6;
      const headers = (_a6 = request.headers) != null ? _a6 : {};
      const expect = headers['Expect'] || headers['expect'];
      let timeoutId = -1;
      let sendBody = true;
      if (expect === '100-continue') {
        sendBody = await Promise.race([
          new Promise((resolve) => {
            timeoutId = Number(timing.setTimeout(() => resolve(true), Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
          }),
          new Promise((resolve) => {
            httpRequest.on('continue', () => {
              timing.clearTimeout(timeoutId);
              resolve(true);
            });
            httpRequest.on('response', () => {
              timing.clearTimeout(timeoutId);
              resolve(false);
            });
            httpRequest.on('error', () => {
              timing.clearTimeout(timeoutId);
              resolve(false);
            });
          }),
        ]);
      }
      if (sendBody) {
        writeBody(httpRequest, request.body);
      }
    }
    __name(writeRequestBody, 'writeRequestBody');
    function writeBody(httpRequest, body) {
      if (body instanceof import_stream.Readable) {
        body.pipe(httpRequest);
        return;
      }
      if (body) {
        if (Buffer.isBuffer(body) || typeof body === 'string') {
          httpRequest.end(body);
          return;
        }
        const uint8 = body;
        if (
          typeof uint8 === 'object' &&
          uint8.buffer &&
          typeof uint8.byteOffset === 'number' &&
          typeof uint8.byteLength === 'number'
        ) {
          httpRequest.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));
          return;
        }
        httpRequest.end(Buffer.from(body));
        return;
      }
      httpRequest.end();
    }
    __name(writeBody, 'writeBody');
    var DEFAULT_REQUEST_TIMEOUT = 0;
    var _a;
    var NodeHttpHandler =
      ((_a = class {
        constructor(options) {
          this.socketWarningTimestamp = 0;
          this.metadata = { handlerProtocol: 'http/1.1' };
          this.configProvider = new Promise((resolve, reject) => {
            if (typeof options === 'function') {
              options()
                .then((_options) => {
                  resolve(this.resolveDefaultConfig(_options));
                })
                .catch(reject);
            } else {
              resolve(this.resolveDefaultConfig(options));
            }
          });
        }
        static create(instanceOrOptions) {
          if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === 'function') {
            return instanceOrOptions;
          }
          return new _a(instanceOrOptions);
        }
        static checkSocketUsage(agent, socketWarningTimestamp, logger2 = console) {
          var _a6, _b, _c, _d, _e;
          const { sockets, requests, maxSockets } = agent;
          if (typeof maxSockets !== 'number' || maxSockets === Infinity) {
            return socketWarningTimestamp;
          }
          const interval = 15e3;
          if (Date.now() - interval < socketWarningTimestamp) {
            return socketWarningTimestamp;
          }
          if (sockets && requests) {
            for (const origin in sockets) {
              const socketsInUse = (_b = (_a6 = sockets[origin]) == null ? void 0 : _a6.length) != null ? _b : 0;
              const requestsEnqueued = (_d = (_c = requests[origin]) == null ? void 0 : _c.length) != null ? _d : 0;
              if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {
                (_e = logger2 == null ? void 0 : logger2.warn) == null
                  ? void 0
                  : _e.call(
                      logger2,
                      `@smithy/node-http-handler:WARN - socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.
See https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html
or increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`
                    );
                return Date.now();
              }
            }
          }
          return socketWarningTimestamp;
        }
        resolveDefaultConfig(options) {
          const {
            requestTimeout,
            connectionTimeout,
            socketTimeout,
            socketAcquisitionWarningTimeout,
            httpAgent,
            httpsAgent,
          } = options || {};
          const keepAlive = true;
          const maxSockets = 50;
          return {
            connectionTimeout,
            requestTimeout: requestTimeout != null ? requestTimeout : socketTimeout,
            socketAcquisitionWarningTimeout,
            httpAgent: (() => {
              if (
                httpAgent instanceof import_http.Agent ||
                typeof (httpAgent == null ? void 0 : httpAgent.destroy) === 'function'
              ) {
                return httpAgent;
              }
              return new import_http.Agent(__spreadValues({ keepAlive, maxSockets }, httpAgent));
            })(),
            httpsAgent: (() => {
              if (
                httpsAgent instanceof import_https.Agent ||
                typeof (httpsAgent == null ? void 0 : httpsAgent.destroy) === 'function'
              ) {
                return httpsAgent;
              }
              return new import_https.Agent(__spreadValues({ keepAlive, maxSockets }, httpsAgent));
            })(),
            logger: console,
          };
        }
        destroy() {
          var _a6, _b, _c, _d;
          (_b = (_a6 = this.config) == null ? void 0 : _a6.httpAgent) == null ? void 0 : _b.destroy();
          (_d = (_c = this.config) == null ? void 0 : _c.httpsAgent) == null ? void 0 : _d.destroy();
        }
        async handle(request, { abortSignal, requestTimeout } = {}) {
          if (!this.config) {
            this.config = await this.configProvider;
          }
          return new Promise((_resolve, _reject) => {
            var _a6, _b, _c, _d, _e, _f;
            let writeRequestBodyPromise = void 0;
            const timeouts = [];
            const resolve = /* @__PURE__ */ __name(async (arg) => {
              await writeRequestBodyPromise;
              timeouts.forEach(timing.clearTimeout);
              _resolve(arg);
            }, 'resolve');
            const reject = /* @__PURE__ */ __name(async (arg) => {
              await writeRequestBodyPromise;
              timeouts.forEach(timing.clearTimeout);
              _reject(arg);
            }, 'reject');
            if (!this.config) {
              throw new Error('Node HTTP request handler config is not resolved');
            }
            if (abortSignal == null ? void 0 : abortSignal.aborted) {
              const abortError = new Error('Request aborted');
              abortError.name = 'AbortError';
              reject(abortError);
              return;
            }
            const isSSL = request.protocol === 'https:';
            const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;
            timeouts.push(
              timing.setTimeout(
                () => {
                  this.socketWarningTimestamp = _a.checkSocketUsage(
                    agent,
                    this.socketWarningTimestamp,
                    this.config.logger
                  );
                },
                (_c = this.config.socketAcquisitionWarningTimeout) != null
                  ? _c
                  : ((_a6 = this.config.requestTimeout) != null ? _a6 : 2e3) +
                      ((_b = this.config.connectionTimeout) != null ? _b : 1e3)
              )
            );
            const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
            let auth = void 0;
            if (request.username != null || request.password != null) {
              const username = (_d = request.username) != null ? _d : '';
              const password = (_e = request.password) != null ? _e : '';
              auth = `${username}:${password}`;
            }
            let path = request.path;
            if (queryString) {
              path += `?${queryString}`;
            }
            if (request.fragment) {
              path += `#${request.fragment}`;
            }
            let hostname = (_f = request.hostname) != null ? _f : '';
            if (hostname[0] === '[' && hostname.endsWith(']')) {
              hostname = request.hostname.slice(1, -1);
            } else {
              hostname = request.hostname;
            }
            const nodeHttpsOptions = {
              headers: request.headers,
              host: hostname,
              method: request.method,
              path,
              port: request.port,
              agent,
              auth,
            };
            const requestFunc = isSSL ? import_https.request : import_http.request;
            const req = requestFunc(nodeHttpsOptions, (res) => {
              const httpResponse = new import_protocol_http.HttpResponse({
                statusCode: res.statusCode || -1,
                reason: res.statusMessage,
                headers: getTransformedHeaders(res.headers),
                body: res,
              });
              resolve({ response: httpResponse });
            });
            req.on('error', (err) => {
              if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
                reject(Object.assign(err, { name: 'TimeoutError' }));
              } else {
                reject(err);
              }
            });
            if (abortSignal) {
              const onAbort = /* @__PURE__ */ __name(() => {
                req.destroy();
                const abortError = new Error('Request aborted');
                abortError.name = 'AbortError';
                reject(abortError);
              }, 'onAbort');
              if (typeof abortSignal.addEventListener === 'function') {
                const signal = abortSignal;
                signal.addEventListener('abort', onAbort, { once: true });
                req.once('close', () => signal.removeEventListener('abort', onAbort));
              } else {
                abortSignal.onabort = onAbort;
              }
            }
            const effectiveRequestTimeout = requestTimeout != null ? requestTimeout : this.config.requestTimeout;
            timeouts.push(setConnectionTimeout(req, reject, this.config.connectionTimeout));
            timeouts.push(setSocketTimeout(req, reject, effectiveRequestTimeout));
            const httpAgent = nodeHttpsOptions.agent;
            if (typeof httpAgent === 'object' && 'keepAlive' in httpAgent) {
              timeouts.push(
                setSocketKeepAlive(req, {
                  keepAlive: httpAgent.keepAlive,
                  keepAliveMsecs: httpAgent.keepAliveMsecs,
                })
              );
            }
            writeRequestBodyPromise = writeRequestBody(req, request, effectiveRequestTimeout).catch((e) => {
              timeouts.forEach(timing.clearTimeout);
              return _reject(e);
            });
          });
        }
        updateHttpClientConfig(key, value) {
          this.config = void 0;
          this.configProvider = this.configProvider.then((config) => {
            return __spreadProps(__spreadValues({}, config), {
              [key]: value,
            });
          });
        }
        httpHandlerConfigs() {
          var _a6;
          return (_a6 = this.config) != null ? _a6 : {};
        }
      }),
      (() => {
        __name(_a, 'NodeHttpHandler');
      })(),
      _a);
    var import_http22 = require('http2');
    var import_http2 = __toESM2(require('http2'));
    var _a2;
    var NodeHttp2ConnectionPool =
      ((_a2 = class {
        constructor(sessions) {
          this.sessions = [];
          this.sessions = sessions != null ? sessions : [];
        }
        poll() {
          if (this.sessions.length > 0) {
            return this.sessions.shift();
          }
        }
        offerLast(session) {
          this.sessions.push(session);
        }
        contains(session) {
          return this.sessions.includes(session);
        }
        remove(session) {
          this.sessions = this.sessions.filter((s) => s !== session);
        }
        [Symbol.iterator]() {
          return this.sessions[Symbol.iterator]();
        }
        destroy(connection) {
          for (const session of this.sessions) {
            if (session === connection) {
              if (!session.destroyed) {
                session.destroy();
              }
            }
          }
        }
      }),
      (() => {
        __name(_a2, 'NodeHttp2ConnectionPool');
      })(),
      _a2);
    var _a3;
    var NodeHttp2ConnectionManager =
      ((_a3 = class {
        constructor(config) {
          this.sessionCache = /* @__PURE__ */ new Map();
          this.config = config;
          if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
            throw new RangeError('maxConcurrency must be greater than zero.');
          }
        }
        lease(requestContext, connectionConfiguration) {
          const url = this.getUrlString(requestContext);
          const existingPool = this.sessionCache.get(url);
          if (existingPool) {
            const existingSession = existingPool.poll();
            if (existingSession && !this.config.disableConcurrency) {
              return existingSession;
            }
          }
          const session = import_http2.default.connect(url);
          if (this.config.maxConcurrency) {
            session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err) => {
              if (err) {
                throw new Error(
                  'Fail to set maxConcurrentStreams to ' +
                    this.config.maxConcurrency +
                    'when creating new session for ' +
                    requestContext.destination.toString()
                );
              }
            });
          }
          session.unref();
          const destroySessionCb = /* @__PURE__ */ __name(() => {
            session.destroy();
            this.deleteSession(url, session);
          }, 'destroySessionCb');
          session.on('goaway', destroySessionCb);
          session.on('error', destroySessionCb);
          session.on('frameError', destroySessionCb);
          session.on('close', () => this.deleteSession(url, session));
          if (connectionConfiguration.requestTimeout) {
            session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
          }
          const connectionPool = this.sessionCache.get(url) || new NodeHttp2ConnectionPool();
          connectionPool.offerLast(session);
          this.sessionCache.set(url, connectionPool);
          return session;
        }
        deleteSession(authority, session) {
          const existingConnectionPool = this.sessionCache.get(authority);
          if (!existingConnectionPool) {
            return;
          }
          if (!existingConnectionPool.contains(session)) {
            return;
          }
          existingConnectionPool.remove(session);
          this.sessionCache.set(authority, existingConnectionPool);
        }
        release(requestContext, session) {
          var _a6;
          const cacheKey = this.getUrlString(requestContext);
          (_a6 = this.sessionCache.get(cacheKey)) == null ? void 0 : _a6.offerLast(session);
        }
        destroy() {
          for (const [key, connectionPool] of this.sessionCache) {
            for (const session of connectionPool) {
              if (!session.destroyed) {
                session.destroy();
              }
              connectionPool.remove(session);
            }
            this.sessionCache.delete(key);
          }
        }
        setMaxConcurrentStreams(maxConcurrentStreams) {
          if (maxConcurrentStreams && maxConcurrentStreams <= 0) {
            throw new RangeError('maxConcurrentStreams must be greater than zero.');
          }
          this.config.maxConcurrency = maxConcurrentStreams;
        }
        setDisableConcurrentStreams(disableConcurrentStreams) {
          this.config.disableConcurrency = disableConcurrentStreams;
        }
        getUrlString(request) {
          return request.destination.toString();
        }
      }),
      (() => {
        __name(_a3, 'NodeHttp2ConnectionManager');
      })(),
      _a3);
    var _a4;
    var NodeHttp2Handler =
      ((_a4 = class {
        constructor(options) {
          this.metadata = { handlerProtocol: 'h2' };
          this.connectionManager = new NodeHttp2ConnectionManager({});
          this.configProvider = new Promise((resolve, reject) => {
            if (typeof options === 'function') {
              options()
                .then((opts) => {
                  resolve(opts || {});
                })
                .catch(reject);
            } else {
              resolve(options || {});
            }
          });
        }
        static create(instanceOrOptions) {
          if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === 'function') {
            return instanceOrOptions;
          }
          return new _a4(instanceOrOptions);
        }
        destroy() {
          this.connectionManager.destroy();
        }
        async handle(request, { abortSignal, requestTimeout } = {}) {
          if (!this.config) {
            this.config = await this.configProvider;
            this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
            if (this.config.maxConcurrentStreams) {
              this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
            }
          }
          const { requestTimeout: configRequestTimeout, disableConcurrentStreams } = this.config;
          const effectiveRequestTimeout = requestTimeout != null ? requestTimeout : configRequestTimeout;
          return new Promise((_resolve, _reject) => {
            var _a6, _b, _c;
            let fulfilled = false;
            let writeRequestBodyPromise = void 0;
            const resolve = /* @__PURE__ */ __name(async (arg) => {
              await writeRequestBodyPromise;
              _resolve(arg);
            }, 'resolve');
            const reject = /* @__PURE__ */ __name(async (arg) => {
              await writeRequestBodyPromise;
              _reject(arg);
            }, 'reject');
            if (abortSignal == null ? void 0 : abortSignal.aborted) {
              fulfilled = true;
              const abortError = new Error('Request aborted');
              abortError.name = 'AbortError';
              reject(abortError);
              return;
            }
            const { hostname, method, port, protocol, query } = request;
            let auth = '';
            if (request.username != null || request.password != null) {
              const username = (_a6 = request.username) != null ? _a6 : '';
              const password = (_b = request.password) != null ? _b : '';
              auth = `${username}:${password}@`;
            }
            const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ''}`;
            const requestContext = { destination: new URL(authority) };
            const session = this.connectionManager.lease(requestContext, {
              requestTimeout: (_c = this.config) == null ? void 0 : _c.sessionTimeout,
              disableConcurrentStreams: disableConcurrentStreams || false,
            });
            const rejectWithDestroy = /* @__PURE__ */ __name((err) => {
              if (disableConcurrentStreams) {
                this.destroySession(session);
              }
              fulfilled = true;
              reject(err);
            }, 'rejectWithDestroy');
            const queryString = (0, import_querystring_builder.buildQueryString)(query || {});
            let path = request.path;
            if (queryString) {
              path += `?${queryString}`;
            }
            if (request.fragment) {
              path += `#${request.fragment}`;
            }
            const req = session.request(
              __spreadProps(__spreadValues({}, request.headers), {
                [import_http22.constants.HTTP2_HEADER_PATH]: path,
                [import_http22.constants.HTTP2_HEADER_METHOD]: method,
              })
            );
            session.ref();
            req.on('response', (headers) => {
              const httpResponse = new import_protocol_http.HttpResponse({
                statusCode: headers[':status'] || -1,
                headers: getTransformedHeaders(headers),
                body: req,
              });
              fulfilled = true;
              resolve({ response: httpResponse });
              if (disableConcurrentStreams) {
                session.close();
                this.connectionManager.deleteSession(authority, session);
              }
            });
            if (effectiveRequestTimeout) {
              req.setTimeout(effectiveRequestTimeout, () => {
                req.close();
                const timeoutError = new Error(
                  `Stream timed out because of no activity for ${effectiveRequestTimeout} ms`
                );
                timeoutError.name = 'TimeoutError';
                rejectWithDestroy(timeoutError);
              });
            }
            if (abortSignal) {
              const onAbort = /* @__PURE__ */ __name(() => {
                req.close();
                const abortError = new Error('Request aborted');
                abortError.name = 'AbortError';
                rejectWithDestroy(abortError);
              }, 'onAbort');
              if (typeof abortSignal.addEventListener === 'function') {
                const signal = abortSignal;
                signal.addEventListener('abort', onAbort, { once: true });
                req.once('close', () => signal.removeEventListener('abort', onAbort));
              } else {
                abortSignal.onabort = onAbort;
              }
            }
            req.on('frameError', (type, code, id) => {
              rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
            });
            req.on('error', rejectWithDestroy);
            req.on('aborted', () => {
              rejectWithDestroy(
                new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`)
              );
            });
            req.on('close', () => {
              session.unref();
              if (disableConcurrentStreams) {
                session.destroy();
              }
              if (!fulfilled) {
                rejectWithDestroy(new Error('Unexpected error: http2 request did not get a response'));
              }
            });
            writeRequestBodyPromise = writeRequestBody(req, request, effectiveRequestTimeout);
          });
        }
        updateHttpClientConfig(key, value) {
          this.config = void 0;
          this.configProvider = this.configProvider.then((config) => {
            return __spreadProps(__spreadValues({}, config), {
              [key]: value,
            });
          });
        }
        httpHandlerConfigs() {
          var _a6;
          return (_a6 = this.config) != null ? _a6 : {};
        }
        destroySession(session) {
          if (!session.destroyed) {
            session.destroy();
          }
        }
      }),
      (() => {
        __name(_a4, 'NodeHttp2Handler');
      })(),
      _a4);
    var _a5;
    var Collector =
      ((_a5 = class extends import_stream.Writable {
        constructor() {
          super(...arguments);
          this.bufferedBytes = [];
        }
        _write(chunk, encoding, callback) {
          this.bufferedBytes.push(chunk);
          callback();
        }
      }),
      (() => {
        __name(_a5, 'Collector');
      })(),
      _a5);
    var streamCollector = /* @__PURE__ */ __name((stream) => {
      if (isReadableStreamInstance(stream)) {
        return collectReadableStream(stream);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector();
        stream.pipe(collector);
        stream.on('error', (err) => {
          collector.end();
          reject(err);
        });
        collector.on('error', reject);
        collector.on('finish', function () {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    }, 'streamCollector');
    var isReadableStreamInstance = /* @__PURE__ */ __name(
      (stream) => typeof ReadableStream === 'function' && stream instanceof ReadableStream,
      'isReadableStreamInstance'
    );
    async function collectReadableStream(stream) {
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      let length = 0;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          length += value.length;
        }
        isDone = done;
      }
      const collected = new Uint8Array(length);
      let offset = 0;
      for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
      }
      return collected;
    }
    __name(collectReadableStream, 'collectReadableStream');
  },
});

// node_modules/@smithy/fetch-http-handler/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  'node_modules/@smithy/fetch-http-handler/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      FetchHttpHandler: () => FetchHttpHandler,
      keepAliveSupport: () => keepAliveSupport,
      streamCollector: () => streamCollector,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_protocol_http = require_dist_cjs2();
    var import_querystring_builder = require_dist_cjs13();
    function createRequest(url, requestOptions) {
      return new Request(url, requestOptions);
    }
    __name(createRequest, 'createRequest');
    function requestTimeout(timeoutInMs = 0) {
      return new Promise((resolve, reject) => {
        if (timeoutInMs) {
          setTimeout(() => {
            const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
            timeoutError.name = 'TimeoutError';
            reject(timeoutError);
          }, timeoutInMs);
        }
      });
    }
    __name(requestTimeout, 'requestTimeout');
    var keepAliveSupport = {
      supported: void 0,
    };
    var _a;
    var FetchHttpHandler =
      ((_a = class {
        static create(instanceOrOptions) {
          if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === 'function') {
            return instanceOrOptions;
          }
          return new _a(instanceOrOptions);
        }
        constructor(options) {
          if (typeof options === 'function') {
            this.configProvider = options().then((opts) => opts || {});
          } else {
            this.config = options != null ? options : {};
            this.configProvider = Promise.resolve(this.config);
          }
          if (keepAliveSupport.supported === void 0) {
            keepAliveSupport.supported = Boolean(
              typeof Request !== 'undefined' && 'keepalive' in createRequest('https://[::1]')
            );
          }
        }
        destroy() {}
        async handle(request, { abortSignal, requestTimeout: requestTimeout2 } = {}) {
          var _a2, _b, _c;
          if (!this.config) {
            this.config = await this.configProvider;
          }
          const requestTimeoutInMs = requestTimeout2 != null ? requestTimeout2 : this.config.requestTimeout;
          const keepAlive = this.config.keepAlive === true;
          const credentials = this.config.credentials;
          if (abortSignal == null ? void 0 : abortSignal.aborted) {
            const abortError = new Error('Request aborted');
            abortError.name = 'AbortError';
            return Promise.reject(abortError);
          }
          let path = request.path;
          const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          let auth = '';
          if (request.username != null || request.password != null) {
            const username = (_a2 = request.username) != null ? _a2 : '';
            const password = (_b = request.password) != null ? _b : '';
            auth = `${username}:${password}@`;
          }
          const { port, method } = request;
          const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : ''}${path}`;
          const body = method === 'GET' || method === 'HEAD' ? void 0 : request.body;
          const requestOptions = {
            body,
            headers: new Headers(request.headers),
            method,
            credentials,
          };
          if ((_c = this.config) == null ? void 0 : _c.cache) {
            requestOptions.cache = this.config.cache;
          }
          if (body) {
            requestOptions.duplex = 'half';
          }
          if (typeof AbortController !== 'undefined') {
            requestOptions.signal = abortSignal;
          }
          if (keepAliveSupport.supported) {
            requestOptions.keepalive = keepAlive;
          }
          if (typeof this.config.requestInit === 'function') {
            Object.assign(requestOptions, this.config.requestInit(request));
          }
          let removeSignalEventListener = /* @__PURE__ */ __name(() => {}, 'removeSignalEventListener');
          const fetchRequest = createRequest(url, requestOptions);
          const raceOfPromises = [
            fetch(fetchRequest).then((response) => {
              const fetchHeaders = response.headers;
              const transformedHeaders = {};
              for (const pair of fetchHeaders.entries()) {
                transformedHeaders[pair[0]] = pair[1];
              }
              const hasReadableStream = response.body != void 0;
              if (!hasReadableStream) {
                return response.blob().then((body2) => ({
                  response: new import_protocol_http.HttpResponse({
                    headers: transformedHeaders,
                    reason: response.statusText,
                    statusCode: response.status,
                    body: body2,
                  }),
                }));
              }
              return {
                response: new import_protocol_http.HttpResponse({
                  headers: transformedHeaders,
                  reason: response.statusText,
                  statusCode: response.status,
                  body: response.body,
                }),
              };
            }),
            requestTimeout(requestTimeoutInMs),
          ];
          if (abortSignal) {
            raceOfPromises.push(
              new Promise((resolve, reject) => {
                const onAbort = /* @__PURE__ */ __name(() => {
                  const abortError = new Error('Request aborted');
                  abortError.name = 'AbortError';
                  reject(abortError);
                }, 'onAbort');
                if (typeof abortSignal.addEventListener === 'function') {
                  const signal = abortSignal;
                  signal.addEventListener('abort', onAbort, { once: true });
                  removeSignalEventListener = /* @__PURE__ */ __name(
                    () => signal.removeEventListener('abort', onAbort),
                    'removeSignalEventListener'
                  );
                } else {
                  abortSignal.onabort = onAbort;
                }
              })
            );
          }
          return Promise.race(raceOfPromises).finally(removeSignalEventListener);
        }
        updateHttpClientConfig(key, value) {
          this.config = void 0;
          this.configProvider = this.configProvider.then((config) => {
            config[key] = value;
            return config;
          });
        }
        httpHandlerConfigs() {
          var _a2;
          return (_a2 = this.config) != null ? _a2 : {};
        }
      }),
      (() => {
        __name(_a, 'FetchHttpHandler');
      })(),
      _a);
    var import_util_base64 = require_dist_cjs11();
    var streamCollector = /* @__PURE__ */ __name(async (stream) => {
      var _a2;
      if (
        (typeof Blob === 'function' && stream instanceof Blob) ||
        ((_a2 = stream.constructor) == null ? void 0 : _a2.name) === 'Blob'
      ) {
        if (Blob.prototype.arrayBuffer !== void 0) {
          return new Uint8Array(await stream.arrayBuffer());
        }
        return collectBlob(stream);
      }
      return collectStream(stream);
    }, 'streamCollector');
    async function collectBlob(blob) {
      const base64 = await readToBase64(blob);
      const arrayBuffer = (0, import_util_base64.fromBase64)(base64);
      return new Uint8Array(arrayBuffer);
    }
    __name(collectBlob, 'collectBlob');
    async function collectStream(stream) {
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      let length = 0;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          length += value.length;
        }
        isDone = done;
      }
      const collected = new Uint8Array(length);
      let offset = 0;
      for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
      }
      return collected;
    }
    __name(collectStream, 'collectStream');
    function readToBase64(blob) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
          var _a2;
          if (reader.readyState !== 2) {
            return reject(new Error('Reader aborted too early'));
          }
          const result = (_a2 = reader.result) != null ? _a2 : '';
          const commaIndex = result.indexOf(',');
          const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
          resolve(result.substring(dataOffset));
        };
        reader.onabort = () => reject(new Error('Read aborted'));
        reader.onerror = () => reject(reader.error);
        reader.readAsDataURL(blob);
      });
    }
    __name(readToBase64, 'readToBase64');
  },
});

// node_modules/@smithy/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  'node_modules/@smithy/util-hex-encoding/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      fromHex: () => fromHex,
      toHex: () => toHex,
    });
    module2.exports = __toCommonJS(index_exports);
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error('Hex encoded strings must have an even number length');
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    __name(fromHex, 'fromHex');
    function toHex(bytes) {
      let out = '';
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    __name(toHex, 'toHex');
  },
});

// node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js
var require_sdk_stream_mixin_browser = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.sdkStreamMixin = void 0;
    var fetch_http_handler_1 = require_dist_cjs15();
    var util_base64_1 = require_dist_cjs11();
    var util_hex_encoding_1 = require_dist_cjs16();
    var util_utf8_1 = require_dist_cjs10();
    var stream_type_check_1 = require_stream_type_check();
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = 'The stream has already been transformed.';
    var sdkStreamMixin2 = (stream) => {
      var _a, _b;
      if (!isBlobInstance(stream) && !(0, stream_type_check_1.isReadableStream)(stream)) {
        const name =
          ((_b =
            (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0
              ? void 0
              : _a.constructor) === null || _b === void 0
            ? void 0
            : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, fetch_http_handler_1.streamCollector)(stream);
      };
      const blobToWebStream = (blob) => {
        if (typeof blob.stream !== 'function') {
          throw new Error(
            'Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body'
          );
        }
        return blob.stream();
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === 'base64') {
            return (0, util_base64_1.toBase64)(buf);
          } else if (encoding === 'hex') {
            return (0, util_hex_encoding_1.toHex)(buf);
          } else if (encoding === void 0 || encoding === 'utf8' || encoding === 'utf-8') {
            return (0, util_utf8_1.toUtf8)(buf);
          } else if (typeof TextDecoder === 'function') {
            return new TextDecoder(encoding).decode(buf);
          } else {
            throw new Error('TextDecoder is not available, please make sure polyfill is provided.');
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          transformed = true;
          if (isBlobInstance(stream)) {
            return blobToWebStream(stream);
          } else if ((0, stream_type_check_1.isReadableStream)(stream)) {
            return stream;
          } else {
            throw new Error(`Cannot transform payload to web stream, got ${stream}`);
          }
        },
      });
    };
    exports.sdkStreamMixin = sdkStreamMixin2;
    var isBlobInstance = (stream) => typeof Blob === 'function' && stream instanceof Blob;
  },
});

// node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js
var require_sdk_stream_mixin = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.sdkStreamMixin = void 0;
    var node_http_handler_1 = require_dist_cjs14();
    var util_buffer_from_1 = require_dist_cjs9();
    var stream_1 = require('stream');
    var sdk_stream_mixin_browser_1 = require_sdk_stream_mixin_browser();
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = 'The stream has already been transformed.';
    var sdkStreamMixin2 = (stream) => {
      var _a, _b;
      if (!(stream instanceof stream_1.Readable)) {
        try {
          return (0, sdk_stream_mixin_browser_1.sdkStreamMixin)(stream);
        } catch (e) {
          const name =
            ((_b =
              (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0
                ? void 0
                : _a.constructor) === null || _b === void 0
              ? void 0
              : _b.name) || stream;
          throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
        }
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, node_http_handler_1.streamCollector)(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(
              encoding
            );
          } else {
            const decoder = new TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          if (stream.readableFlowing !== null) {
            throw new Error('The stream has been consumed by other callbacks.');
          }
          if (typeof stream_1.Readable.toWeb !== 'function') {
            throw new Error('Readable.toWeb() is not supported. Please ensure a polyfill is available.');
          }
          transformed = true;
          return stream_1.Readable.toWeb(stream);
        },
      });
    };
    exports.sdkStreamMixin = sdkStreamMixin2;
  },
});

// node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js
var require_splitStream_browser = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.splitStream = splitStream2;
    async function splitStream2(stream) {
      if (typeof stream.stream === 'function') {
        stream = stream.stream();
      }
      const readableStream = stream;
      return readableStream.tee();
    }
  },
});

// node_modules/@smithy/util-stream/dist-cjs/splitStream.js
var require_splitStream = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/splitStream.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.splitStream = splitStream2;
    var stream_1 = require('stream');
    var splitStream_browser_1 = require_splitStream_browser();
    var stream_type_check_1 = require_stream_type_check();
    async function splitStream2(stream) {
      if ((0, stream_type_check_1.isReadableStream)(stream) || (0, stream_type_check_1.isBlob)(stream)) {
        return (0, splitStream_browser_1.splitStream)(stream);
      }
      const stream1 = new stream_1.PassThrough();
      const stream2 = new stream_1.PassThrough();
      stream.pipe(stream1);
      stream.pipe(stream2);
      return [stream1, stream2];
    }
  },
});

// node_modules/@smithy/util-stream/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  'node_modules/@smithy/util-stream/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (
      __copyProps2(target, mod, 'default'), secondTarget && __copyProps2(secondTarget, mod, 'default')
    );
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      Uint8ArrayBlobAdapter: () => Uint8ArrayBlobAdapter,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_util_base64 = require_dist_cjs11();
    var import_util_utf8 = require_dist_cjs10();
    function transformToString(payload, encoding = 'utf-8') {
      if (encoding === 'base64') {
        return (0, import_util_base64.toBase64)(payload);
      }
      return (0, import_util_utf8.toUtf8)(payload);
    }
    __name(transformToString, 'transformToString');
    function transformFromString(str, encoding) {
      if (encoding === 'base64') {
        return Uint8ArrayBlobAdapter.mutate((0, import_util_base64.fromBase64)(str));
      }
      return Uint8ArrayBlobAdapter.mutate((0, import_util_utf8.fromUtf8)(str));
    }
    __name(transformFromString, 'transformFromString');
    var _a;
    var Uint8ArrayBlobAdapter =
      ((_a = class extends Uint8Array {
        static fromString(source, encoding = 'utf-8') {
          switch (typeof source) {
            case 'string':
              return transformFromString(source, encoding);
            default:
              throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
          }
        }
        static mutate(source) {
          Object.setPrototypeOf(source, _a.prototype);
          return source;
        }
        transformToString(encoding = 'utf-8') {
          return transformToString(this, encoding);
        }
      }),
      (() => {
        __name(_a, 'Uint8ArrayBlobAdapter');
      })(),
      _a);
    __reExport(index_exports, require_ChecksumStream(), module2.exports);
    __reExport(index_exports, require_createChecksumStream(), module2.exports);
    __reExport(index_exports, require_createBufferedReadable(), module2.exports);
    __reExport(index_exports, require_getAwsChunkedEncodingStream(), module2.exports);
    __reExport(index_exports, require_headStream(), module2.exports);
    __reExport(index_exports, require_sdk_stream_mixin(), module2.exports);
    __reExport(index_exports, require_splitStream(), module2.exports);
    __reExport(index_exports, require_stream_type_check(), module2.exports);
  },
});

// node_modules/@smithy/core/dist-cjs/submodules/schema/index.js
var require_schema = __commonJS({
  'node_modules/@smithy/core/dist-cjs/submodules/schema/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      ErrorSchema: () => ErrorSchema,
      ListSchema: () => ListSchema,
      MapSchema: () => MapSchema,
      NormalizedSchema: () => NormalizedSchema,
      OperationSchema: () => OperationSchema,
      SCHEMA: () => SCHEMA,
      Schema: () => Schema,
      SimpleSchema: () => SimpleSchema,
      StructureSchema: () => StructureSchema,
      TypeRegistry: () => TypeRegistry,
      deref: () => deref,
      deserializerMiddlewareOption: () => deserializerMiddlewareOption,
      error: () => error,
      getSchemaSerdePlugin: () => getSchemaSerdePlugin,
      list: () => list,
      map: () => map,
      op: () => op,
      serializerMiddlewareOption: () => serializerMiddlewareOption,
      sim: () => sim,
      struct: () => struct,
    });
    module2.exports = __toCommonJS(index_exports);
    var deref = (schemaRef) => {
      if (typeof schemaRef === 'function') {
        return schemaRef();
      }
      return schemaRef;
    };
    var import_protocol_http = require_dist_cjs2();
    var import_util_middleware = require_dist_cjs6();
    var schemaDeserializationMiddleware = (config) => (next, context) => async (args) => {
      var _a8, _b, _c, _d;
      const { response } = await next(args);
      const { operationSchema } = (0, import_util_middleware.getSmithyContext)(context);
      try {
        const parsed = await config.protocol.deserializeResponse(
          operationSchema,
          __spreadValues(__spreadValues({}, config), context),
          response
        );
        return {
          response,
          output: parsed,
        };
      } catch (error2) {
        Object.defineProperty(error2, '$response', {
          value: response,
        });
        if (!('$metadata' in error2)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          try {
            error2.message += '\n  ' + hint;
          } catch (e) {
            if (
              !context.logger ||
              ((_b = (_a8 = context.logger) == null ? void 0 : _a8.constructor) == null ? void 0 : _b.name) ===
                'NoOpLogger'
            ) {
              console.warn(hint);
            } else {
              (_d = (_c = context.logger) == null ? void 0 : _c.warn) == null ? void 0 : _d.call(_c, hint);
            }
          }
          if (typeof error2.$responseBodyText !== 'undefined') {
            if (error2.$response) {
              error2.$response.body = error2.$responseBodyText;
            }
          }
          try {
            if (import_protocol_http.HttpResponse.isInstance(response)) {
              const { headers = {} } = response;
              const headerEntries = Object.entries(headers);
              error2.$metadata = {
                httpStatusCode: response.statusCode,
                requestId: findHeader(/^x-[\w-]+-request-?id$/, headerEntries),
                extendedRequestId: findHeader(/^x-[\w-]+-id-2$/, headerEntries),
                cfId: findHeader(/^x-[\w-]+-cf-id$/, headerEntries),
              };
            }
          } catch (e) {}
        }
        throw error2;
      }
    };
    var findHeader = (pattern, headers) => {
      return (headers.find(([k]) => {
        return k.match(pattern);
      }) || [void 0, void 0])[1];
    };
    var import_util_middleware2 = require_dist_cjs6();
    var schemaSerializationMiddleware = (config) => (next, context) => async (args) => {
      var _a8;
      const { operationSchema } = (0, import_util_middleware2.getSmithyContext)(context);
      const endpoint =
        ((_a8 = context.endpointV2) == null ? void 0 : _a8.url) && config.urlParser
          ? async () => config.urlParser(context.endpointV2.url)
          : config.endpoint;
      const request = await config.protocol.serializeRequest(
        operationSchema,
        args.input,
        __spreadProps(__spreadValues(__spreadValues({}, config), context), {
          endpoint,
        })
      );
      return next(
        __spreadProps(__spreadValues({}, args), {
          request,
        })
      );
    };
    var deserializerMiddlewareOption = {
      name: 'deserializerMiddleware',
      step: 'deserialize',
      tags: ['DESERIALIZER'],
      override: true,
    };
    var serializerMiddlewareOption = {
      name: 'serializerMiddleware',
      step: 'serialize',
      tags: ['SERIALIZER'],
      override: true,
    };
    function getSchemaSerdePlugin(config) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add(schemaSerializationMiddleware(config), serializerMiddlewareOption);
          commandStack.add(schemaDeserializationMiddleware(config), deserializerMiddlewareOption);
          config.protocol.setSerdeContext(config);
        },
      };
    }
    var _a;
    var TypeRegistry =
      ((_a = class {
        constructor(namespace, schemas = /* @__PURE__ */ new Map()) {
          this.namespace = namespace;
          this.schemas = schemas;
        }
        static for(namespace) {
          if (!_a.registries.has(namespace)) {
            _a.registries.set(namespace, new _a(namespace));
          }
          return _a.registries.get(namespace);
        }
        register(shapeId, schema) {
          const qualifiedName = this.normalizeShapeId(shapeId);
          const registry = _a.for(this.getNamespace(shapeId));
          registry.schemas.set(qualifiedName, schema);
        }
        getSchema(shapeId) {
          const id = this.normalizeShapeId(shapeId);
          if (!this.schemas.has(id)) {
            throw new Error(`@smithy/core/schema - schema not found for ${id}`);
          }
          return this.schemas.get(id);
        }
        getBaseException() {
          for (const [id, schema] of this.schemas.entries()) {
            if (id.startsWith('smithy.ts.sdk.synthetic.') && id.endsWith('ServiceException')) {
              return schema;
            }
          }
          return void 0;
        }
        find(predicate) {
          return [...this.schemas.values()].find(predicate);
        }
        destroy() {
          _a.registries.delete(this.namespace);
          this.schemas.clear();
        }
        normalizeShapeId(shapeId) {
          if (shapeId.includes('#')) {
            return shapeId;
          }
          return this.namespace + '#' + shapeId;
        }
        getNamespace(shapeId) {
          return this.normalizeShapeId(shapeId).split('#')[0];
        }
      }),
      (() => {
        _a.registries = /* @__PURE__ */ new Map();
      })(),
      _a);
    var Schema = class {
      constructor(name, traits) {
        this.name = name;
        this.traits = traits;
      }
    };
    var _a2;
    var ListSchema =
      ((_a2 = class extends Schema {
        constructor(name, traits, valueSchema) {
          super(name, traits);
          this.name = name;
          this.traits = traits;
          this.valueSchema = valueSchema;
          this.symbol = _a2.symbol;
        }
        static [Symbol.hasInstance](lhs) {
          const isPrototype = _a2.prototype.isPrototypeOf(lhs);
          if (!isPrototype && typeof lhs === 'object' && lhs !== null) {
            const list2 = lhs;
            return list2.symbol === _a2.symbol;
          }
          return isPrototype;
        }
      }),
      (() => {
        _a2.symbol = Symbol.for('@smithy/core/schema::ListSchema');
      })(),
      _a2);
    function list(namespace, name, traits = {}, valueSchema) {
      const schema = new ListSchema(
        namespace + '#' + name,
        traits,
        typeof valueSchema === 'function' ? valueSchema() : valueSchema
      );
      TypeRegistry.for(namespace).register(name, schema);
      return schema;
    }
    var _a3;
    var MapSchema =
      ((_a3 = class extends Schema {
        constructor(name, traits, keySchema, valueSchema) {
          super(name, traits);
          this.name = name;
          this.traits = traits;
          this.keySchema = keySchema;
          this.valueSchema = valueSchema;
          this.symbol = _a3.symbol;
        }
        static [Symbol.hasInstance](lhs) {
          const isPrototype = _a3.prototype.isPrototypeOf(lhs);
          if (!isPrototype && typeof lhs === 'object' && lhs !== null) {
            const map2 = lhs;
            return map2.symbol === _a3.symbol;
          }
          return isPrototype;
        }
      }),
      (() => {
        _a3.symbol = Symbol.for('@smithy/core/schema::MapSchema');
      })(),
      _a3);
    function map(namespace, name, traits = {}, keySchema, valueSchema) {
      const schema = new MapSchema(
        namespace + '#' + name,
        traits,
        keySchema,
        typeof valueSchema === 'function' ? valueSchema() : valueSchema
      );
      TypeRegistry.for(namespace).register(name, schema);
      return schema;
    }
    var OperationSchema = class extends Schema {
      constructor(name, traits, input, output) {
        super(name, traits);
        this.name = name;
        this.traits = traits;
        this.input = input;
        this.output = output;
      }
    };
    function op(namespace, name, traits = {}, input, output) {
      const schema = new OperationSchema(namespace + '#' + name, traits, input, output);
      TypeRegistry.for(namespace).register(name, schema);
      return schema;
    }
    var _a4;
    var StructureSchema =
      ((_a4 = class extends Schema {
        constructor(name, traits, memberNames, memberList) {
          super(name, traits);
          this.name = name;
          this.traits = traits;
          this.memberNames = memberNames;
          this.memberList = memberList;
          this.symbol = _a4.symbol;
          this.members = {};
          for (let i = 0; i < memberNames.length; ++i) {
            this.members[memberNames[i]] = Array.isArray(memberList[i]) ? memberList[i] : [memberList[i], 0];
          }
        }
        static [Symbol.hasInstance](lhs) {
          const isPrototype = _a4.prototype.isPrototypeOf(lhs);
          if (!isPrototype && typeof lhs === 'object' && lhs !== null) {
            const struct2 = lhs;
            return struct2.symbol === _a4.symbol;
          }
          return isPrototype;
        }
      }),
      (() => {
        _a4.symbol = Symbol.for('@smithy/core/schema::StructureSchema');
      })(),
      _a4);
    function struct(namespace, name, traits, memberNames, memberList) {
      const schema = new StructureSchema(namespace + '#' + name, traits, memberNames, memberList);
      TypeRegistry.for(namespace).register(name, schema);
      return schema;
    }
    var _a5;
    var ErrorSchema =
      ((_a5 = class extends StructureSchema {
        constructor(name, traits, memberNames, memberList, ctor) {
          super(name, traits, memberNames, memberList);
          this.name = name;
          this.traits = traits;
          this.memberNames = memberNames;
          this.memberList = memberList;
          this.ctor = ctor;
          this.symbol = _a5.symbol;
        }
        static [Symbol.hasInstance](lhs) {
          const isPrototype = _a5.prototype.isPrototypeOf(lhs);
          if (!isPrototype && typeof lhs === 'object' && lhs !== null) {
            const err = lhs;
            return err.symbol === _a5.symbol;
          }
          return isPrototype;
        }
      }),
      (() => {
        _a5.symbol = Symbol.for('@smithy/core/schema::ErrorSchema');
      })(),
      _a5);
    function error(namespace, name, traits = {}, memberNames, memberList, ctor) {
      const schema = new ErrorSchema(namespace + '#' + name, traits, memberNames, memberList, ctor);
      TypeRegistry.for(namespace).register(name, schema);
      return schema;
    }
    var SCHEMA = {
      BLOB: 21,
      STREAMING_BLOB: 42,
      BOOLEAN: 2,
      STRING: 0,
      NUMERIC: 1,
      BIG_INTEGER: 17,
      BIG_DECIMAL: 19,
      DOCUMENT: 15,
      TIMESTAMP_DEFAULT: 4,
      TIMESTAMP_DATE_TIME: 5,
      TIMESTAMP_HTTP_DATE: 6,
      TIMESTAMP_EPOCH_SECONDS: 7,
      LIST_MODIFIER: 64,
      MAP_MODIFIER: 128,
    };
    var _a6;
    var SimpleSchema =
      ((_a6 = class extends Schema {
        constructor(name, schemaRef, traits) {
          super(name, traits);
          this.name = name;
          this.schemaRef = schemaRef;
          this.traits = traits;
          this.symbol = _a6.symbol;
        }
        static [Symbol.hasInstance](lhs) {
          const isPrototype = _a6.prototype.isPrototypeOf(lhs);
          if (!isPrototype && typeof lhs === 'object' && lhs !== null) {
            const sim2 = lhs;
            return sim2.symbol === _a6.symbol;
          }
          return isPrototype;
        }
      }),
      (() => {
        _a6.symbol = Symbol.for('@smithy/core/schema::SimpleSchema');
      })(),
      _a6);
    function sim(namespace, name, schemaRef, traits) {
      const schema = new SimpleSchema(namespace + '#' + name, schemaRef, traits);
      TypeRegistry.for(namespace).register(name, schema);
      return schema;
    }
    var _a7;
    var NormalizedSchema =
      ((_a7 = class {
        constructor(ref, memberName) {
          var _a8, _b, _c, _d, _e;
          this.ref = ref;
          this.memberName = memberName;
          this.symbol = _a7.symbol;
          const traitStack = [];
          let _ref = ref;
          let schema = ref;
          this._isMemberSchema = false;
          while (Array.isArray(_ref)) {
            traitStack.push(_ref[1]);
            _ref = _ref[0];
            schema = deref(_ref);
            this._isMemberSchema = true;
          }
          if (traitStack.length > 0) {
            this.memberTraits = {};
            for (let i = traitStack.length - 1; i >= 0; --i) {
              const traitSet = traitStack[i];
              Object.assign(this.memberTraits, _a7.translateTraits(traitSet));
            }
          } else {
            this.memberTraits = 0;
          }
          if (schema instanceof _a7) {
            this.name = schema.name;
            this.traits = schema.traits;
            this._isMemberSchema = schema._isMemberSchema;
            this.schema = schema.schema;
            this.memberTraits = Object.assign({}, schema.getMemberTraits(), this.getMemberTraits());
            this.normalizedTraits = void 0;
            this.ref = schema.ref;
            this.memberName = memberName != null ? memberName : schema.memberName;
            return;
          }
          this.schema = deref(schema);
          if (this.schema && typeof this.schema === 'object') {
            this.traits = (_b = (_a8 = this.schema) == null ? void 0 : _a8.traits) != null ? _b : {};
          } else {
            this.traits = 0;
          }
          this.name =
            (_e =
              (_d = typeof this.schema === 'object' ? ((_c = this.schema) == null ? void 0 : _c.name) : void 0) != null
                ? _d
                : this.memberName) != null
              ? _e
              : this.getSchemaName();
          if (this._isMemberSchema && !memberName) {
            throw new Error(
              `@smithy/core/schema - NormalizedSchema member schema ${this.getName(
                true
              )} must initialize with memberName argument.`
            );
          }
        }
        static [Symbol.hasInstance](lhs) {
          const isPrototype = _a7.prototype.isPrototypeOf(lhs);
          if (!isPrototype && typeof lhs === 'object' && lhs !== null) {
            const ns = lhs;
            return ns.symbol === _a7.symbol;
          }
          return isPrototype;
        }
        static of(ref, memberName) {
          if (ref instanceof _a7) {
            return ref;
          }
          return new _a7(ref, memberName);
        }
        static translateTraits(indicator) {
          if (typeof indicator === 'object') {
            return indicator;
          }
          indicator = indicator | 0;
          const traits = {};
          if ((indicator & 1) === 1) {
            traits.httpLabel = 1;
          }
          if (((indicator >> 1) & 1) === 1) {
            traits.idempotent = 1;
          }
          if (((indicator >> 2) & 1) === 1) {
            traits.idempotencyToken = 1;
          }
          if (((indicator >> 3) & 1) === 1) {
            traits.sensitive = 1;
          }
          if (((indicator >> 4) & 1) === 1) {
            traits.httpPayload = 1;
          }
          if (((indicator >> 5) & 1) === 1) {
            traits.httpResponseCode = 1;
          }
          if (((indicator >> 6) & 1) === 1) {
            traits.httpQueryParams = 1;
          }
          return traits;
        }
        static memberFrom(memberSchema, memberName) {
          if (memberSchema instanceof _a7) {
            memberSchema.memberName = memberName;
            memberSchema._isMemberSchema = true;
            return memberSchema;
          }
          return new _a7(memberSchema, memberName);
        }
        getSchema() {
          if (this.schema instanceof _a7) {
            return (this.schema = this.schema.getSchema());
          }
          if (this.schema instanceof SimpleSchema) {
            return deref(this.schema.schemaRef);
          }
          return deref(this.schema);
        }
        getName(withNamespace = false) {
          if (!withNamespace) {
            if (this.name && this.name.includes('#')) {
              return this.name.split('#')[1];
            }
          }
          return this.name || void 0;
        }
        getMemberName() {
          if (!this.isMemberSchema()) {
            throw new Error(`@smithy/core/schema - cannot get member name on non-member schema: ${this.getName(true)}`);
          }
          return this.memberName;
        }
        isMemberSchema() {
          return this._isMemberSchema;
        }
        isUnitSchema() {
          return this.getSchema() === 'unit';
        }
        isListSchema() {
          const inner = this.getSchema();
          if (typeof inner === 'number') {
            return inner >= SCHEMA.LIST_MODIFIER && inner < SCHEMA.MAP_MODIFIER;
          }
          return inner instanceof ListSchema;
        }
        isMapSchema() {
          const inner = this.getSchema();
          if (typeof inner === 'number') {
            return inner >= SCHEMA.MAP_MODIFIER && inner <= 255;
          }
          return inner instanceof MapSchema;
        }
        isDocumentSchema() {
          return this.getSchema() === SCHEMA.DOCUMENT;
        }
        isStructSchema() {
          const inner = this.getSchema();
          return (
            (inner !== null && typeof inner === 'object' && 'members' in inner) || inner instanceof StructureSchema
          );
        }
        isBlobSchema() {
          return this.getSchema() === SCHEMA.BLOB || this.getSchema() === SCHEMA.STREAMING_BLOB;
        }
        isTimestampSchema() {
          const schema = this.getSchema();
          return (
            typeof schema === 'number' && schema >= SCHEMA.TIMESTAMP_DEFAULT && schema <= SCHEMA.TIMESTAMP_EPOCH_SECONDS
          );
        }
        isStringSchema() {
          return this.getSchema() === SCHEMA.STRING;
        }
        isBooleanSchema() {
          return this.getSchema() === SCHEMA.BOOLEAN;
        }
        isNumericSchema() {
          return this.getSchema() === SCHEMA.NUMERIC;
        }
        isBigIntegerSchema() {
          return this.getSchema() === SCHEMA.BIG_INTEGER;
        }
        isBigDecimalSchema() {
          return this.getSchema() === SCHEMA.BIG_DECIMAL;
        }
        isStreaming() {
          const streaming = !!this.getMergedTraits().streaming;
          if (streaming) {
            return true;
          }
          return this.getSchema() === SCHEMA.STREAMING_BLOB;
        }
        isIdempotencyToken() {
          if (typeof this.traits === 'number') {
            return (this.traits & 4) === 4;
          } else if (typeof this.traits === 'object') {
            return !!this.traits.idempotencyToken;
          }
          return false;
        }
        getMergedTraits() {
          if (this.normalizedTraits) {
            return this.normalizedTraits;
          }
          this.normalizedTraits = __spreadValues(__spreadValues({}, this.getOwnTraits()), this.getMemberTraits());
          return this.normalizedTraits;
        }
        getMemberTraits() {
          return _a7.translateTraits(this.memberTraits);
        }
        getOwnTraits() {
          return _a7.translateTraits(this.traits);
        }
        getKeySchema() {
          if (this.isDocumentSchema()) {
            return _a7.memberFrom([SCHEMA.DOCUMENT, 0], 'key');
          }
          if (!this.isMapSchema()) {
            throw new Error(`@smithy/core/schema - cannot get key schema for non-map schema: ${this.getName(true)}`);
          }
          const schema = this.getSchema();
          if (typeof schema === 'number') {
            return _a7.memberFrom([63 & schema, 0], 'key');
          }
          return _a7.memberFrom([schema.keySchema, 0], 'key');
        }
        getValueSchema() {
          const schema = this.getSchema();
          if (typeof schema === 'number') {
            if (this.isMapSchema()) {
              return _a7.memberFrom([63 & schema, 0], 'value');
            } else if (this.isListSchema()) {
              return _a7.memberFrom([63 & schema, 0], 'member');
            }
          }
          if (schema && typeof schema === 'object') {
            if (this.isStructSchema()) {
              throw new Error(`cannot call getValueSchema() with StructureSchema ${this.getName(true)}`);
            }
            const collection = schema;
            if ('valueSchema' in collection) {
              if (this.isMapSchema()) {
                return _a7.memberFrom([collection.valueSchema, 0], 'value');
              } else if (this.isListSchema()) {
                return _a7.memberFrom([collection.valueSchema, 0], 'member');
              }
            }
          }
          if (this.isDocumentSchema()) {
            return _a7.memberFrom([SCHEMA.DOCUMENT, 0], 'value');
          }
          throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have a value member.`);
        }
        hasMemberSchema(member) {
          if (this.isStructSchema()) {
            const struct2 = this.getSchema();
            return member in struct2.members;
          }
          return false;
        }
        getMemberSchema(member) {
          if (this.isStructSchema()) {
            const struct2 = this.getSchema();
            if (!(member in struct2.members)) {
              throw new Error(
                `@smithy/core/schema - the schema ${this.getName(true)} does not have a member with name=${member}.`
              );
            }
            return _a7.memberFrom(struct2.members[member], member);
          }
          if (this.isDocumentSchema()) {
            return _a7.memberFrom([SCHEMA.DOCUMENT, 0], member);
          }
          throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have members.`);
        }
        getMemberSchemas() {
          const { schema } = this;
          const struct2 = schema;
          if (!struct2 || typeof struct2 !== 'object') {
            return {};
          }
          if ('members' in struct2) {
            const buffer = {};
            for (const member of struct2.memberNames) {
              buffer[member] = this.getMemberSchema(member);
            }
            return buffer;
          }
          return {};
        }
        getEventStreamMember() {
          if (this.isStructSchema()) {
            for (const [memberName, memberSchema] of this.structIterator()) {
              if (memberSchema.isStreaming() && memberSchema.isStructSchema()) {
                return memberName;
              }
            }
          }
          return '';
        }
        *structIterator() {
          if (this.isUnitSchema()) {
            return;
          }
          if (!this.isStructSchema()) {
            throw new Error('@smithy/core/schema - cannot acquire structIterator on non-struct schema.');
          }
          const struct2 = this.getSchema();
          for (let i = 0; i < struct2.memberNames.length; ++i) {
            yield [struct2.memberNames[i], _a7.memberFrom([struct2.memberList[i], 0], struct2.memberNames[i])];
          }
        }
        getSchemaName() {
          var _a8, _b;
          const schema = this.getSchema();
          if (typeof schema === 'number') {
            const _schema = 63 & schema;
            const container = 192 & schema;
            const type =
              (_b =
                (_a8 = Object.entries(SCHEMA).find(([, value]) => {
                  return value === _schema;
                })) == null
                  ? void 0
                  : _a8[0]) != null
                ? _b
                : 'Unknown';
            switch (container) {
              case SCHEMA.MAP_MODIFIER:
                return `${type}Map`;
              case SCHEMA.LIST_MODIFIER:
                return `${type}List`;
              case 0:
                return type;
            }
          }
          return 'Unknown';
        }
      }),
      (() => {
        _a7.symbol = Symbol.for('@smithy/core/schema::NormalizedSchema');
      })(),
      _a7);
  },
});

// node_modules/@smithy/core/schema.js
var require_schema2 = __commonJS({
  'node_modules/@smithy/core/schema.js'(exports, module2) {
    module2.exports = require_schema();
  },
});

// node_modules/uuid/dist/rng.js
var require_rng = __commonJS({
  'node_modules/uuid/dist/rng.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = rng;
    var _crypto = _interopRequireDefault(require('crypto'));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var rnds8Pool = new Uint8Array(256);
    var poolPtr = rnds8Pool.length;
    function rng() {
      if (poolPtr > rnds8Pool.length - 16) {
        _crypto.default.randomFillSync(rnds8Pool);
        poolPtr = 0;
      }
      return rnds8Pool.slice(poolPtr, (poolPtr += 16));
    }
  },
});

// node_modules/uuid/dist/regex.js
var require_regex = __commonJS({
  'node_modules/uuid/dist/regex.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _default =
      /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/validate.js
var require_validate = __commonJS({
  'node_modules/uuid/dist/validate.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === 'string' && _regex.default.test(uuid);
    }
    var _default = validate;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS({
  'node_modules/uuid/dist/stringify.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    exports.unsafeStringify = unsafeStringify;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).slice(1));
    }
    function unsafeStringify(arr, offset = 0) {
      return (
        byteToHex[arr[offset + 0]] +
        byteToHex[arr[offset + 1]] +
        byteToHex[arr[offset + 2]] +
        byteToHex[arr[offset + 3]] +
        '-' +
        byteToHex[arr[offset + 4]] +
        byteToHex[arr[offset + 5]] +
        '-' +
        byteToHex[arr[offset + 6]] +
        byteToHex[arr[offset + 7]] +
        '-' +
        byteToHex[arr[offset + 8]] +
        byteToHex[arr[offset + 9]] +
        '-' +
        byteToHex[arr[offset + 10]] +
        byteToHex[arr[offset + 11]] +
        byteToHex[arr[offset + 12]] +
        byteToHex[arr[offset + 13]] +
        byteToHex[arr[offset + 14]] +
        byteToHex[arr[offset + 15]]
      );
    }
    function stringify(arr, offset = 0) {
      const uuid = unsafeStringify(arr, offset);
      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Stringified UUID is invalid');
      }
      return uuid;
    }
    var _default = stringify;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/v1.js
var require_v1 = __commonJS({
  'node_modules/uuid/dist/v1.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = require_stringify();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = (buf && offset) || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = (clockseq + 1) & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = (tl >>> 24) & 255;
      b[i++] = (tl >>> 16) & 255;
      b[i++] = (tl >>> 8) & 255;
      b[i++] = tl & 255;
      const tmh = ((msecs / 4294967296) * 1e4) & 268435455;
      b[i++] = (tmh >>> 8) & 255;
      b[i++] = tmh & 255;
      b[i++] = ((tmh >>> 24) & 15) | 16;
      b[i++] = (tmh >>> 16) & 255;
      b[i++] = (clockseq >>> 8) | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.unsafeStringify)(b);
    }
    var _default = v1;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/parse.js
var require_parse = __commonJS({
  'node_modules/uuid/dist/parse.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Invalid UUID');
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = (v >>> 16) & 255;
      arr[2] = (v >>> 8) & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = ((v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776) & 255;
      arr[11] = (v / 4294967296) & 255;
      arr[12] = (v >>> 24) & 255;
      arr[13] = (v >>> 16) & 255;
      arr[14] = (v >>> 8) & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/v35.js
var require_v35 = __commonJS({
  'node_modules/uuid/dist/v35.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.URL = exports.DNS = void 0;
    exports.default = v35;
    var _stringify = require_stringify();
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
    exports.DNS = DNS;
    var URL2 = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
    exports.URL = URL2;
    function v35(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        var _namespace;
        if (typeof value === 'string') {
          value = stringToBytes(value);
        }
        if (typeof namespace === 'string') {
          namespace = (0, _parse.default)(namespace);
        }
        if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
          throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = (bytes[6] & 15) | version;
        bytes[8] = (bytes[8] & 63) | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.unsafeStringify)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {}
      generateUUID.DNS = DNS;
      generateUUID.URL = URL2;
      return generateUUID;
    }
  },
});

// node_modules/uuid/dist/md5.js
var require_md5 = __commonJS({
  'node_modules/uuid/dist/md5.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require('crypto'));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function md5(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === 'string') {
        bytes = Buffer.from(bytes, 'utf8');
      }
      return _crypto.default.createHash('md5').update(bytes).digest();
    }
    var _default = md5;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/v3.js
var require_v3 = __commonJS({
  'node_modules/uuid/dist/v3.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)('v3', 48, _md.default);
    var _default = v3;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/native.js
var require_native = __commonJS({
  'node_modules/uuid/dist/native.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require('crypto'));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = {
      randomUUID: _crypto.default.randomUUID,
    };
    exports.default = _default;
  },
});

// node_modules/uuid/dist/v4.js
var require_v4 = __commonJS({
  'node_modules/uuid/dist/v4.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _native = _interopRequireDefault(require_native());
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = require_stringify();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      if (_native.default.randomUUID && !buf && !options) {
        return _native.default.randomUUID();
      }
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = (rnds[6] & 15) | 64;
      rnds[8] = (rnds[8] & 63) | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.unsafeStringify)(rnds);
    }
    var _default = v4;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS({
  'node_modules/uuid/dist/sha1.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require('crypto'));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function sha1(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === 'string') {
        bytes = Buffer.from(bytes, 'utf8');
      }
      return _crypto.default.createHash('sha1').update(bytes).digest();
    }
    var _default = sha1;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/v5.js
var require_v5 = __commonJS({
  'node_modules/uuid/dist/v5.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)('v5', 80, _sha.default);
    var _default = v5;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/nil.js
var require_nil = __commonJS({
  'node_modules/uuid/dist/nil.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _default = '00000000-0000-0000-0000-000000000000';
    exports.default = _default;
  },
});

// node_modules/uuid/dist/version.js
var require_version = __commonJS({
  'node_modules/uuid/dist/version.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError('Invalid UUID');
      }
      return parseInt(uuid.slice(14, 15), 16);
    }
    var _default = version;
    exports.default = _default;
  },
});

// node_modules/uuid/dist/index.js
var require_dist = __commonJS({
  'node_modules/uuid/dist/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(exports, 'NIL', {
      enumerable: true,
      get: function () {
        return _nil.default;
      },
    });
    Object.defineProperty(exports, 'parse', {
      enumerable: true,
      get: function () {
        return _parse.default;
      },
    });
    Object.defineProperty(exports, 'stringify', {
      enumerable: true,
      get: function () {
        return _stringify.default;
      },
    });
    Object.defineProperty(exports, 'v1', {
      enumerable: true,
      get: function () {
        return _v.default;
      },
    });
    Object.defineProperty(exports, 'v3', {
      enumerable: true,
      get: function () {
        return _v2.default;
      },
    });
    Object.defineProperty(exports, 'v4', {
      enumerable: true,
      get: function () {
        return _v3.default;
      },
    });
    Object.defineProperty(exports, 'v5', {
      enumerable: true,
      get: function () {
        return _v4.default;
      },
    });
    Object.defineProperty(exports, 'validate', {
      enumerable: true,
      get: function () {
        return _validate.default;
      },
    });
    Object.defineProperty(exports, 'version', {
      enumerable: true,
      get: function () {
        return _version.default;
      },
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  },
});

// node_modules/@smithy/core/dist-cjs/submodules/serde/index.js
var require_serde = __commonJS({
  'node_modules/@smithy/core/dist-cjs/submodules/serde/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      LazyJsonString: () => LazyJsonString2,
      NumericValue: () => NumericValue2,
      copyDocumentWithTransform: () => copyDocumentWithTransform2,
      dateToUtcString: () => dateToUtcString2,
      expectBoolean: () => expectBoolean2,
      expectByte: () => expectByte2,
      expectFloat32: () => expectFloat322,
      expectInt: () => expectInt2,
      expectInt32: () => expectInt322,
      expectLong: () => expectLong2,
      expectNonNull: () => expectNonNull2,
      expectNumber: () => expectNumber2,
      expectObject: () => expectObject2,
      expectShort: () => expectShort2,
      expectString: () => expectString2,
      expectUnion: () => expectUnion2,
      generateIdempotencyToken: () => import_uuid.v4,
      handleFloat: () => handleFloat2,
      limitedParseDouble: () => limitedParseDouble2,
      limitedParseFloat: () => limitedParseFloat2,
      limitedParseFloat32: () => limitedParseFloat322,
      logger: () => logger2,
      nv: () => nv2,
      parseBoolean: () => parseBoolean2,
      parseEpochTimestamp: () => parseEpochTimestamp2,
      parseRfc3339DateTime: () => parseRfc3339DateTime2,
      parseRfc3339DateTimeWithOffset: () => parseRfc3339DateTimeWithOffset2,
      parseRfc7231DateTime: () => parseRfc7231DateTime2,
      quoteHeader: () => quoteHeader2,
      splitEvery: () => splitEvery2,
      splitHeader: () => splitHeader2,
      strictParseByte: () => strictParseByte2,
      strictParseDouble: () => strictParseDouble2,
      strictParseFloat: () => strictParseFloat2,
      strictParseFloat32: () => strictParseFloat322,
      strictParseInt: () => strictParseInt2,
      strictParseInt32: () => strictParseInt322,
      strictParseLong: () => strictParseLong2,
      strictParseShort: () => strictParseShort2,
    });
    module2.exports = __toCommonJS(index_exports);
    var copyDocumentWithTransform2 = (source, schemaRef, transform = (_) => _) => source;
    var parseBoolean2 = (value) => {
      switch (value) {
        case 'true':
          return true;
        case 'false':
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    var expectBoolean2 = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'number') {
        if (value === 0 || value === 1) {
          logger2.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === 'string') {
        const lower = value.toLowerCase();
        if (lower === 'false' || lower === 'true') {
          logger2.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === 'false') {
          return false;
        }
        if (lower === 'true') {
          return true;
        }
      }
      if (typeof value === 'boolean') {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    };
    var expectNumber2 = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'string') {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            logger2.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === 'number') {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat322 = (value) => {
      const expected = expectNumber2(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    var expectLong2 = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    var expectInt2 = expectLong2;
    var expectInt322 = (value) => expectSizedInt(value, 32);
    var expectShort2 = (value) => expectSizedInt(value, 16);
    var expectByte2 = (value) => expectSizedInt(value, 8);
    var expectSizedInt = (value, size) => {
      const expected = expectLong2(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull2 = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError('Expected a non-null value');
      }
      return value;
    };
    var expectObject2 = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'object' && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? 'array' : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    var expectString2 = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'string') {
        return value;
      }
      if (['boolean', 'number', 'bigint'].includes(typeof value)) {
        logger2.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    var expectUnion2 = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = expectObject2(value);
      const setKeys = Object.entries(asObject)
        .filter(([, v]) => v != null)
        .map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    var strictParseDouble2 = (value) => {
      if (typeof value == 'string') {
        return expectNumber2(parseNumber(value));
      }
      return expectNumber2(value);
    };
    var strictParseFloat2 = strictParseDouble2;
    var strictParseFloat322 = (value) => {
      if (typeof value == 'string') {
        return expectFloat322(parseNumber(value));
      }
      return expectFloat322(value);
    };
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble2 = (value) => {
      if (typeof value == 'string') {
        return parseFloatString(value);
      }
      return expectNumber2(value);
    };
    var handleFloat2 = limitedParseDouble2;
    var limitedParseFloat2 = limitedParseDouble2;
    var limitedParseFloat322 = (value) => {
      if (typeof value == 'string') {
        return parseFloatString(value);
      }
      return expectFloat322(value);
    };
    var parseFloatString = (value) => {
      switch (value) {
        case 'NaN':
          return NaN;
        case 'Infinity':
          return Infinity;
        case '-Infinity':
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong2 = (value) => {
      if (typeof value === 'string') {
        return expectLong2(parseNumber(value));
      }
      return expectLong2(value);
    };
    var strictParseInt2 = strictParseLong2;
    var strictParseInt322 = (value) => {
      if (typeof value === 'string') {
        return expectInt322(parseNumber(value));
      }
      return expectInt322(value);
    };
    var strictParseShort2 = (value) => {
      if (typeof value === 'string') {
        return expectShort2(parseNumber(value));
      }
      return expectShort2(value);
    };
    var strictParseByte2 = (value) => {
      if (typeof value === 'string') {
        return expectByte2(parseNumber(value));
      }
      return expectByte2(value);
    };
    var stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message)
        .split('\n')
        .slice(0, 5)
        .filter((s) => !s.includes('stackTraceWarning'))
        .join('\n');
    };
    var logger2 = {
      warn: console.warn,
    };
    var DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    var MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    function dateToUtcString2(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime2 = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== 'string') {
        throw new TypeError('RFC-3339 date-times must be expressed as strings');
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError('Invalid RFC-3339 date-time value');
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = strictParseShort2(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, 'month', 1, 12);
      const day = parseDateValue(dayStr, 'day', 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    var RFC3339_WITH_OFFSET = new RegExp(
      /^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/
    );
    var parseRfc3339DateTimeWithOffset2 = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== 'string') {
        throw new TypeError('RFC-3339 date-times must be expressed as strings');
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError('Invalid RFC-3339 date-time value');
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = strictParseShort2(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, 'month', 1, 12);
      const day = parseDateValue(dayStr, 'day', 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != 'Z') {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    var IMF_FIXDATE = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var RFC_850_DATE = new RegExp(
      /^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var ASC_TIME = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/
    );
    var parseRfc7231DateTime2 = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== 'string') {
        throw new TypeError('RFC-7231 date-times must be expressed as strings');
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate(
          strictParseShort2(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr, 'day', 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(
          buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, 'day', 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds,
          })
        );
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate(
          strictParseShort2(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr.trimLeft(), 'day', 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      throw new TypeError('Invalid RFC-7231 date-time value');
    };
    var parseEpochTimestamp2 = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === 'number') {
        valueAsDouble = value;
      } else if (typeof value === 'string') {
        valueAsDouble = strictParseDouble2(value);
      } else if (typeof value === 'object' && value.tag === 1) {
        valueAsDouble = value.value;
      } else {
        throw new TypeError(
          'Epoch timestamps must be expressed as floating point numbers or their string representation'
        );
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError('Epoch timestamps must be valid, non-Infinite, non-NaN numerics');
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(
        Date.UTC(
          year,
          adjustedMonth,
          day,
          parseDateValue(time.hours, 'hour', 0, 23),
          parseDateValue(time.minutes, 'minute', 0, 59),
          parseDateValue(time.seconds, 'seconds', 0, 60),
          parseMilliseconds(time.fractionalMilliseconds)
        )
      );
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = /* @__PURE__ */ new Date().getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort2(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - /* @__PURE__ */ new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(
          Date.UTC(
            input.getUTCFullYear() - 100,
            input.getUTCMonth(),
            input.getUTCDate(),
            input.getUTCHours(),
            input.getUTCMinutes(),
            input.getUTCSeconds(),
            input.getUTCMilliseconds()
          )
        );
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = strictParseByte2(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return strictParseFloat322('0.' + value) * 1e3;
    };
    var parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == '+') {
        direction = 1;
      } else if (directionStr == '-') {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === '0') {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
    var import_uuid = require_dist();
    var LazyJsonString2 = function LazyJsonString22(val) {
      const str = Object.assign(new String(val), {
        deserializeJSON() {
          return JSON.parse(String(val));
        },
        toString() {
          return String(val);
        },
        toJSON() {
          return String(val);
        },
      });
      return str;
    };
    LazyJsonString2.from = (object) => {
      if (object && typeof object === 'object' && (object instanceof LazyJsonString2 || 'deserializeJSON' in object)) {
        return object;
      } else if (typeof object === 'string' || Object.getPrototypeOf(object) === String.prototype) {
        return LazyJsonString2(String(object));
      }
      return LazyJsonString2(JSON.stringify(object));
    };
    LazyJsonString2.fromObject = LazyJsonString2.from;
    function quoteHeader2(part) {
      if (part.includes(',') || part.includes('"')) {
        part = `"${part.replace(/"/g, '\\"')}"`;
      }
      return part;
    }
    function splitEvery2(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error('Invalid number of delimiters (' + numDelimiters + ') for splitEvery.');
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = '';
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === '') {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = '';
        }
      }
      if (currentSegment !== '') {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    var splitHeader2 = (value) => {
      const z = value.length;
      const values = [];
      let withinQuotes = false;
      let prevChar = void 0;
      let anchor = 0;
      for (let i = 0; i < z; ++i) {
        const char = value[i];
        switch (char) {
          case `"`:
            if (prevChar !== '\\') {
              withinQuotes = !withinQuotes;
            }
            break;
          case ',':
            if (!withinQuotes) {
              values.push(value.slice(anchor, i));
              anchor = i + 1;
            }
            break;
          default:
        }
        prevChar = char;
      }
      values.push(value.slice(anchor));
      return values.map((v) => {
        v = v.trim();
        const z2 = v.length;
        if (z2 < 2) {
          return v;
        }
        if (v[0] === `"` && v[z2 - 1] === `"`) {
          v = v.slice(1, z2 - 1);
        }
        return v.replace(/\\"/g, '"');
      });
    };
    var NumericValue2 = class _NumericValue {
      constructor(string, type) {
        this.string = string;
        this.type = type;
        let dot = 0;
        for (let i = 0; i < string.length; ++i) {
          const char = string.charCodeAt(i);
          if (i === 0 && char === 45) {
            continue;
          }
          if (char === 46) {
            if (dot) {
              throw new Error('@smithy/core/serde - NumericValue must contain at most one decimal point.');
            }
            dot = 1;
            continue;
          }
          if (char < 48 || char > 57) {
            throw new Error(
              `@smithy/core/serde - NumericValue must only contain [0-9], at most one decimal point ".", and an optional negation prefix "-".`
            );
          }
        }
      }
      toString() {
        return this.string;
      }
      static [Symbol.hasInstance](object) {
        var _a, _b;
        if (!object || typeof object !== 'object') {
          return false;
        }
        const _nv = object;
        const prototypeMatch = _NumericValue.prototype.isPrototypeOf(object);
        if (prototypeMatch) {
          return prototypeMatch;
        }
        if (
          typeof _nv.string === 'string' &&
          typeof _nv.type === 'string' &&
          ((_b = (_a = _nv.constructor) == null ? void 0 : _a.name) == null ? void 0 : _b.endsWith('NumericValue'))
        ) {
          return true;
        }
        return prototypeMatch;
      }
    };
    function nv2(input) {
      return new NumericValue2(String(input), 'bigDecimal');
    }
  },
});

// node_modules/@smithy/core/serde.js
var require_serde2 = __commonJS({
  'node_modules/@smithy/core/serde.js'(exports, module2) {
    module2.exports = require_serde();
  },
});

// node_modules/@smithy/core/dist-cjs/submodules/event-streams/index.js
var require_event_streams = __commonJS({
  'node_modules/@smithy/core/dist-cjs/submodules/event-streams/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      EventStreamSerde: () => EventStreamSerde,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_schema = require_schema2();
    var import_util_utf8 = require_dist_cjs10();
    var EventStreamSerde = class {
      constructor({ marshaller, serializer, deserializer, serdeContext, defaultContentType }) {
        this.marshaller = marshaller;
        this.serializer = serializer;
        this.deserializer = deserializer;
        this.serdeContext = serdeContext;
        this.defaultContentType = defaultContentType;
      }
      async serializeEventStream({ eventStream, requestSchema, initialRequest }) {
        const marshaller = this.marshaller;
        const eventStreamMember = requestSchema.getEventStreamMember();
        const unionSchema = requestSchema.getMemberSchema(eventStreamMember);
        const memberSchemas = unionSchema.getMemberSchemas();
        const serializer = this.serializer;
        const defaultContentType = this.defaultContentType;
        const initialRequestMarker = Symbol('initialRequestMarker');
        const eventStreamIterable = {
          async *[Symbol.asyncIterator]() {
            if (initialRequest) {
              const headers = {
                ':event-type': { type: 'string', value: 'initial-request' },
                ':message-type': { type: 'string', value: 'event' },
                ':content-type': { type: 'string', value: defaultContentType },
              };
              serializer.write(requestSchema, initialRequest);
              const body = serializer.flush();
              yield {
                [initialRequestMarker]: true,
                headers,
                body,
              };
            }
            for await (const page of eventStream) {
              yield page;
            }
          },
        };
        return marshaller.serialize(eventStreamIterable, (event) => {
          var _a;
          if (event[initialRequestMarker]) {
            return {
              headers: event.headers,
              body: event.body,
            };
          }
          const unionMember =
            (_a = Object.keys(event).find((key) => {
              return key !== '__type';
            })) != null
              ? _a
              : '';
          const { additionalHeaders, body, eventType, explicitPayloadContentType } = this.writeEventBody(
            unionMember,
            unionSchema,
            event
          );
          const headers = __spreadValues(
            {
              ':event-type': { type: 'string', value: eventType },
              ':message-type': { type: 'string', value: 'event' },
              ':content-type': {
                type: 'string',
                value: explicitPayloadContentType != null ? explicitPayloadContentType : defaultContentType,
              },
            },
            additionalHeaders
          );
          return {
            headers,
            body,
          };
        });
      }
      async deserializeEventStream({ response, responseSchema, initialResponseContainer }) {
        var _a;
        const marshaller = this.marshaller;
        const eventStreamMember = responseSchema.getEventStreamMember();
        const unionSchema = responseSchema.getMemberSchema(eventStreamMember);
        const memberSchemas = unionSchema.getMemberSchemas();
        const initialResponseMarker = Symbol('initialResponseMarker');
        const asyncIterable = marshaller.deserialize(response.body, async (event) => {
          var _a2;
          const unionMember =
            (_a2 = Object.keys(event).find((key) => {
              return key !== '__type';
            })) != null
              ? _a2
              : '';
          if (unionMember === 'initial-response') {
            const dataObject = await this.deserializer.read(responseSchema, event[unionMember].body);
            delete dataObject[eventStreamMember];
            return __spreadValues(
              {
                [initialResponseMarker]: true,
              },
              dataObject
            );
          } else if (unionMember in memberSchemas) {
            const eventStreamSchema = memberSchemas[unionMember];
            return {
              [unionMember]: await this.deserializer.read(eventStreamSchema, event[unionMember].body),
            };
          } else {
            return {
              $unknown: event,
            };
          }
        });
        const asyncIterator = asyncIterable[Symbol.asyncIterator]();
        const firstEvent = await asyncIterator.next();
        if (firstEvent.done) {
          return asyncIterable;
        }
        if ((_a = firstEvent.value) == null ? void 0 : _a[initialResponseMarker]) {
          if (!responseSchema) {
            throw new Error(
              '@smithy::core/protocols - initial-response event encountered in event stream but no response schema given.'
            );
          }
          for (const [key, value] of Object.entries(firstEvent.value)) {
            initialResponseContainer[key] = value;
          }
        }
        return {
          async *[Symbol.asyncIterator]() {
            var _a2;
            if (
              !((_a2 = firstEvent == null ? void 0 : firstEvent.value) == null ? void 0 : _a2[initialResponseMarker])
            ) {
              yield firstEvent.value;
            }
            while (true) {
              const { done, value } = await asyncIterator.next();
              if (done) {
                break;
              }
              yield value;
            }
          },
        };
      }
      writeEventBody(unionMember, unionSchema, event) {
        var _a, _b;
        const serializer = this.serializer;
        let eventType = unionMember;
        let explicitPayloadMember = null;
        let explicitPayloadContentType;
        const isKnownSchema = unionSchema.hasMemberSchema(unionMember);
        const additionalHeaders = {};
        if (!isKnownSchema) {
          const [type, value] = event[unionMember];
          eventType = type;
          serializer.write(import_schema.SCHEMA.DOCUMENT, value);
        } else {
          const eventSchema = unionSchema.getMemberSchema(unionMember);
          if (eventSchema.isStructSchema()) {
            for (const [memberName, memberSchema] of eventSchema.structIterator()) {
              const { eventHeader, eventPayload } = memberSchema.getMergedTraits();
              if (eventPayload) {
                explicitPayloadMember = memberName;
                break;
              } else if (eventHeader) {
                const value = event[unionMember][memberName];
                let type = 'binary';
                if (memberSchema.isNumericSchema()) {
                  if ((-2) ** 31 <= value && value <= 2 ** 31 - 1) {
                    type = 'integer';
                  } else {
                    type = 'long';
                  }
                } else if (memberSchema.isTimestampSchema()) {
                  type = 'timestamp';
                } else if (memberSchema.isStringSchema()) {
                  type = 'string';
                } else if (memberSchema.isBooleanSchema()) {
                  type = 'boolean';
                }
                if (value != null) {
                  additionalHeaders[memberName] = {
                    type,
                    value,
                  };
                  delete event[unionMember][memberName];
                }
              }
            }
            if (explicitPayloadMember !== null) {
              const payloadSchema = eventSchema.getMemberSchema(explicitPayloadMember);
              if (payloadSchema.isBlobSchema()) {
                explicitPayloadContentType = 'application/octet-stream';
              } else if (payloadSchema.isStringSchema()) {
                explicitPayloadContentType = 'text/plain';
              }
              serializer.write(payloadSchema, event[unionMember][explicitPayloadMember]);
            } else {
              serializer.write(eventSchema, event[unionMember]);
            }
          } else {
            throw new Error('@smithy/core/event-streams - non-struct member not supported in event stream union.');
          }
        }
        const messageSerialization = serializer.flush();
        const body =
          typeof messageSerialization === 'string'
            ? ((_b = (_a = this.serdeContext) == null ? void 0 : _a.utf8Decoder) != null
                ? _b
                : import_util_utf8.fromUtf8)(messageSerialization)
            : messageSerialization;
        return {
          body,
          eventType,
          explicitPayloadContentType,
          additionalHeaders,
        };
      }
    };
  },
});

// node_modules/@smithy/core/event-streams.js
var require_event_streams2 = __commonJS({
  'node_modules/@smithy/core/event-streams.js'(exports, module2) {
    module2.exports = require_event_streams();
  },
});

// node_modules/@smithy/core/dist-cjs/submodules/protocols/index.js
var require_protocols = __commonJS({
  'node_modules/@smithy/core/dist-cjs/submodules/protocols/index.js'(exports, module2) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (
      (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),
      __copyProps2(
        isNodeMode || !mod || !mod.__esModule
          ? __defProp2(target, 'default', { value: mod, enumerable: true })
          : target,
        mod
      )
    );
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      FromStringShapeDeserializer: () => FromStringShapeDeserializer,
      HttpBindingProtocol: () => HttpBindingProtocol,
      HttpInterceptingShapeDeserializer: () => HttpInterceptingShapeDeserializer,
      HttpInterceptingShapeSerializer: () => HttpInterceptingShapeSerializer,
      HttpProtocol: () => HttpProtocol,
      RequestBuilder: () => RequestBuilder,
      RpcProtocol: () => RpcProtocol,
      ToStringShapeSerializer: () => ToStringShapeSerializer,
      collectBody: () => collectBody2,
      determineTimestampFormat: () => determineTimestampFormat,
      extendedEncodeURIComponent: () => extendedEncodeURIComponent2,
      requestBuilder: () => requestBuilder2,
      resolvedPath: () => resolvedPath2,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_util_stream = require_dist_cjs17();
    var collectBody2 = async (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return import_util_stream.Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return import_util_stream.Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return import_util_stream.Uint8ArrayBlobAdapter.mutate(await fromContext);
    };
    function extendedEncodeURIComponent2(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    var import_schema2 = require_schema2();
    var import_serde = require_serde2();
    var import_protocol_http2 = require_dist_cjs2();
    var import_util_stream2 = require_dist_cjs17();
    var import_schema = require_schema2();
    var import_protocol_http = require_dist_cjs2();
    var HttpProtocol = class {
      constructor(options) {
        this.options = options;
      }
      getRequestType() {
        return import_protocol_http.HttpRequest;
      }
      getResponseType() {
        return import_protocol_http.HttpResponse;
      }
      setSerdeContext(serdeContext) {
        this.serdeContext = serdeContext;
        this.serializer.setSerdeContext(serdeContext);
        this.deserializer.setSerdeContext(serdeContext);
        if (this.getPayloadCodec()) {
          this.getPayloadCodec().setSerdeContext(serdeContext);
        }
      }
      updateServiceEndpoint(request, endpoint) {
        if ('url' in endpoint) {
          request.protocol = endpoint.url.protocol;
          request.hostname = endpoint.url.hostname;
          request.port = endpoint.url.port ? Number(endpoint.url.port) : void 0;
          request.path = endpoint.url.pathname;
          request.fragment = endpoint.url.hash || void 0;
          request.username = endpoint.url.username || void 0;
          request.password = endpoint.url.password || void 0;
          for (const [k, v] of endpoint.url.searchParams.entries()) {
            if (!request.query) {
              request.query = {};
            }
            request.query[k] = v;
          }
          return request;
        } else {
          request.protocol = endpoint.protocol;
          request.hostname = endpoint.hostname;
          request.port = endpoint.port ? Number(endpoint.port) : void 0;
          request.path = endpoint.path;
          request.query = __spreadValues({}, endpoint.query);
          return request;
        }
      }
      setHostPrefix(request, operationSchema, input) {
        var _a;
        const operationNs = import_schema.NormalizedSchema.of(operationSchema);
        const inputNs = import_schema.NormalizedSchema.of(operationSchema.input);
        if (operationNs.getMergedTraits().endpoint) {
          let hostPrefix = (_a = operationNs.getMergedTraits().endpoint) == null ? void 0 : _a[0];
          if (typeof hostPrefix === 'string') {
            const hostLabelInputs = [...inputNs.structIterator()].filter(
              ([, member]) => member.getMergedTraits().hostLabel
            );
            for (const [name] of hostLabelInputs) {
              const replacement = input[name];
              if (typeof replacement !== 'string') {
                throw new Error(`@smithy/core/schema - ${name} in input must be a string as hostLabel.`);
              }
              hostPrefix = hostPrefix.replace(`{${name}}`, replacement);
            }
            request.hostname = hostPrefix + request.hostname;
          }
        }
      }
      deserializeMetadata(output) {
        var _a, _b;
        return {
          httpStatusCode: output.statusCode,
          requestId:
            (_b = (_a = output.headers['x-amzn-requestid']) != null ? _a : output.headers['x-amzn-request-id']) != null
              ? _b
              : output.headers['x-amz-request-id'],
          extendedRequestId: output.headers['x-amz-id-2'],
          cfId: output.headers['x-amz-cf-id'],
        };
      }
      async serializeEventStream({ eventStream, requestSchema, initialRequest }) {
        const eventStreamSerde = await this.loadEventStreamCapability();
        return eventStreamSerde.serializeEventStream({
          eventStream,
          requestSchema,
          initialRequest,
        });
      }
      async deserializeEventStream({ response, responseSchema, initialResponseContainer }) {
        const eventStreamSerde = await this.loadEventStreamCapability();
        return eventStreamSerde.deserializeEventStream({
          response,
          responseSchema,
          initialResponseContainer,
        });
      }
      async loadEventStreamCapability() {
        const { EventStreamSerde } = await Promise.resolve().then(() => __toESM2(require_event_streams2()));
        return new EventStreamSerde({
          marshaller: this.getEventStreamMarshaller(),
          serializer: this.serializer,
          deserializer: this.deserializer,
          serdeContext: this.serdeContext,
          defaultContentType: this.getDefaultContentType(),
        });
      }
      getDefaultContentType() {
        throw new Error(
          `@smithy/core/protocols - ${this.constructor.name} getDefaultContentType() implementation missing.`
        );
      }
      async deserializeHttpMessage(schema, context, response, arg4, arg5) {
        return [];
      }
      getEventStreamMarshaller() {
        const context = this.serdeContext;
        if (!context.eventStreamMarshaller) {
          throw new Error('@smithy/core - HttpProtocol: eventStreamMarshaller missing in serdeContext.');
        }
        return context.eventStreamMarshaller;
      }
    };
    var HttpBindingProtocol = class extends HttpProtocol {
      async serializeRequest(operationSchema, _input, context) {
        var _a;
        const input = __spreadValues({}, _input != null ? _input : {});
        const serializer = this.serializer;
        const query = {};
        const headers = {};
        const endpoint = await context.endpoint();
        const ns = import_schema2.NormalizedSchema.of(operationSchema == null ? void 0 : operationSchema.input);
        const schema = ns.getSchema();
        let hasNonHttpBindingMember = false;
        let payload;
        const request = new import_protocol_http2.HttpRequest({
          protocol: '',
          hostname: '',
          port: void 0,
          path: '',
          fragment: void 0,
          query,
          headers,
          body: void 0,
        });
        if (endpoint) {
          this.updateServiceEndpoint(request, endpoint);
          this.setHostPrefix(request, operationSchema, input);
          const opTraits = import_schema2.NormalizedSchema.translateTraits(operationSchema.traits);
          if (opTraits.http) {
            request.method = opTraits.http[0];
            const [path, search] = opTraits.http[1].split('?');
            if (request.path == '/') {
              request.path = path;
            } else {
              request.path += path;
            }
            const traitSearchParams = new URLSearchParams(search != null ? search : '');
            Object.assign(query, Object.fromEntries(traitSearchParams));
          }
        }
        for (const [memberName, memberNs] of ns.structIterator()) {
          const memberTraits = (_a = memberNs.getMergedTraits()) != null ? _a : {};
          const inputMemberValue = input[memberName];
          if (inputMemberValue == null) {
            continue;
          }
          if (memberTraits.httpPayload) {
            const isStreaming = memberNs.isStreaming();
            if (isStreaming) {
              const isEventStream = memberNs.isStructSchema();
              if (isEventStream) {
                if (input[memberName]) {
                  payload = await this.serializeEventStream({
                    eventStream: input[memberName],
                    requestSchema: ns,
                  });
                }
              } else {
                payload = inputMemberValue;
              }
            } else {
              serializer.write(memberNs, inputMemberValue);
              payload = serializer.flush();
            }
            delete input[memberName];
          } else if (memberTraits.httpLabel) {
            serializer.write(memberNs, inputMemberValue);
            const replacement = serializer.flush();
            if (request.path.includes(`{${memberName}+}`)) {
              request.path = request.path.replace(
                `{${memberName}+}`,
                replacement.split('/').map(extendedEncodeURIComponent2).join('/')
              );
            } else if (request.path.includes(`{${memberName}}`)) {
              request.path = request.path.replace(`{${memberName}}`, extendedEncodeURIComponent2(replacement));
            }
            delete input[memberName];
          } else if (memberTraits.httpHeader) {
            serializer.write(memberNs, inputMemberValue);
            headers[memberTraits.httpHeader.toLowerCase()] = String(serializer.flush());
            delete input[memberName];
          } else if (typeof memberTraits.httpPrefixHeaders === 'string') {
            for (const [key, val] of Object.entries(inputMemberValue)) {
              const amalgam = memberTraits.httpPrefixHeaders + key;
              serializer.write([memberNs.getValueSchema(), { httpHeader: amalgam }], val);
              headers[amalgam.toLowerCase()] = serializer.flush();
            }
            delete input[memberName];
          } else if (memberTraits.httpQuery || memberTraits.httpQueryParams) {
            this.serializeQuery(memberNs, inputMemberValue, query);
            delete input[memberName];
          } else {
            hasNonHttpBindingMember = true;
          }
        }
        if (hasNonHttpBindingMember && input) {
          serializer.write(schema, input);
          payload = serializer.flush();
        }
        request.headers = headers;
        request.query = query;
        request.body = payload;
        return request;
      }
      serializeQuery(ns, data, query) {
        const serializer = this.serializer;
        const traits = ns.getMergedTraits();
        if (traits.httpQueryParams) {
          for (const [key, val] of Object.entries(data)) {
            if (!(key in query)) {
              this.serializeQuery(
                import_schema2.NormalizedSchema.of([
                  ns.getValueSchema(),
                  __spreadProps(__spreadValues({}, traits), {
                    httpQuery: key,
                    httpQueryParams: void 0,
                  }),
                ]),
                val,
                query
              );
            }
          }
          return;
        }
        if (ns.isListSchema()) {
          const sparse = !!ns.getMergedTraits().sparse;
          const buffer = [];
          for (const item of data) {
            serializer.write([ns.getValueSchema(), traits], item);
            const serializable = serializer.flush();
            if (sparse || serializable !== void 0) {
              buffer.push(serializable);
            }
          }
          query[traits.httpQuery] = buffer;
        } else {
          serializer.write([ns, traits], data);
          query[traits.httpQuery] = serializer.flush();
        }
      }
      async deserializeResponse(operationSchema, context, response) {
        const deserializer = this.deserializer;
        const ns = import_schema2.NormalizedSchema.of(operationSchema.output);
        const dataObject = {};
        if (response.statusCode >= 300) {
          const bytes = await collectBody2(response.body, context);
          if (bytes.byteLength > 0) {
            Object.assign(dataObject, await deserializer.read(import_schema2.SCHEMA.DOCUMENT, bytes));
          }
          await this.handleError(operationSchema, context, response, dataObject, this.deserializeMetadata(response));
          throw new Error('@smithy/core/protocols - HTTP Protocol error handler failed to throw.');
        }
        for (const header in response.headers) {
          const value = response.headers[header];
          delete response.headers[header];
          response.headers[header.toLowerCase()] = value;
        }
        const nonHttpBindingMembers = await this.deserializeHttpMessage(ns, context, response, dataObject);
        if (nonHttpBindingMembers.length) {
          const bytes = await collectBody2(response.body, context);
          if (bytes.byteLength > 0) {
            const dataFromBody = await deserializer.read(ns, bytes);
            for (const member of nonHttpBindingMembers) {
              dataObject[member] = dataFromBody[member];
            }
          }
        }
        dataObject.$metadata = this.deserializeMetadata(response);
        return dataObject;
      }
      async deserializeHttpMessage(schema, context, response, arg4, arg5) {
        let dataObject;
        if (arg4 instanceof Set) {
          dataObject = arg5;
        } else {
          dataObject = arg4;
        }
        const deserializer = this.deserializer;
        const ns = import_schema2.NormalizedSchema.of(schema);
        const nonHttpBindingMembers = [];
        for (const [memberName, memberSchema] of ns.structIterator()) {
          const memberTraits = memberSchema.getMemberTraits();
          if (memberTraits.httpPayload) {
            const isStreaming = memberSchema.isStreaming();
            if (isStreaming) {
              const isEventStream = memberSchema.isStructSchema();
              if (isEventStream) {
                dataObject[memberName] = await this.deserializeEventStream({
                  response,
                  responseSchema: ns,
                });
              } else {
                dataObject[memberName] = (0, import_util_stream2.sdkStreamMixin)(response.body);
              }
            } else if (response.body) {
              const bytes = await collectBody2(response.body, context);
              if (bytes.byteLength > 0) {
                dataObject[memberName] = await deserializer.read(memberSchema, bytes);
              }
            }
          } else if (memberTraits.httpHeader) {
            const key = String(memberTraits.httpHeader).toLowerCase();
            const value = response.headers[key];
            if (value != null) {
              if (memberSchema.isListSchema()) {
                const headerListValueSchema = memberSchema.getValueSchema();
                let sections;
                if (
                  headerListValueSchema.isTimestampSchema() &&
                  headerListValueSchema.getSchema() === import_schema2.SCHEMA.TIMESTAMP_DEFAULT
                ) {
                  sections = (0, import_serde.splitEvery)(value, ',', 2);
                } else {
                  sections = (0, import_serde.splitHeader)(value);
                }
                const list = [];
                for (const section of sections) {
                  list.push(await deserializer.read([headerListValueSchema, { httpHeader: key }], section.trim()));
                }
                dataObject[memberName] = list;
              } else {
                dataObject[memberName] = await deserializer.read(memberSchema, value);
              }
            }
          } else if (memberTraits.httpPrefixHeaders !== void 0) {
            dataObject[memberName] = {};
            for (const [header, value] of Object.entries(response.headers)) {
              if (header.startsWith(memberTraits.httpPrefixHeaders)) {
                dataObject[memberName][header.slice(memberTraits.httpPrefixHeaders.length)] = await deserializer.read(
                  [memberSchema.getValueSchema(), { httpHeader: header }],
                  value
                );
              }
            }
          } else if (memberTraits.httpResponseCode) {
            dataObject[memberName] = response.statusCode;
          } else {
            nonHttpBindingMembers.push(memberName);
          }
        }
        return nonHttpBindingMembers;
      }
    };
    var import_schema3 = require_schema2();
    var import_protocol_http3 = require_dist_cjs2();
    var RpcProtocol = class extends HttpProtocol {
      async serializeRequest(operationSchema, input, context) {
        const serializer = this.serializer;
        const query = {};
        const headers = {};
        const endpoint = await context.endpoint();
        const ns = import_schema3.NormalizedSchema.of(operationSchema == null ? void 0 : operationSchema.input);
        const schema = ns.getSchema();
        let payload;
        const request = new import_protocol_http3.HttpRequest({
          protocol: '',
          hostname: '',
          port: void 0,
          path: '/',
          fragment: void 0,
          query,
          headers,
          body: void 0,
        });
        if (endpoint) {
          this.updateServiceEndpoint(request, endpoint);
          this.setHostPrefix(request, operationSchema, input);
        }
        const _input = __spreadValues({}, input);
        if (input) {
          const eventStreamMember = ns.getEventStreamMember();
          if (eventStreamMember) {
            if (_input[eventStreamMember]) {
              const initialRequest = {};
              for (const [memberName, memberSchema] of ns.structIterator()) {
                if (memberName !== eventStreamMember && _input[memberName]) {
                  serializer.write(memberSchema, _input[memberName]);
                  initialRequest[memberName] = serializer.flush();
                }
              }
              payload = await this.serializeEventStream({
                eventStream: _input[eventStreamMember],
                requestSchema: ns,
                initialRequest,
              });
            }
          } else {
            serializer.write(schema, _input);
            payload = serializer.flush();
          }
        }
        request.headers = headers;
        request.query = query;
        request.body = payload;
        request.method = 'POST';
        return request;
      }
      async deserializeResponse(operationSchema, context, response) {
        const deserializer = this.deserializer;
        const ns = import_schema3.NormalizedSchema.of(operationSchema.output);
        const dataObject = {};
        if (response.statusCode >= 300) {
          const bytes = await collectBody2(response.body, context);
          if (bytes.byteLength > 0) {
            Object.assign(dataObject, await deserializer.read(import_schema3.SCHEMA.DOCUMENT, bytes));
          }
          await this.handleError(operationSchema, context, response, dataObject, this.deserializeMetadata(response));
          throw new Error('@smithy/core/protocols - RPC Protocol error handler failed to throw.');
        }
        for (const header in response.headers) {
          const value = response.headers[header];
          delete response.headers[header];
          response.headers[header.toLowerCase()] = value;
        }
        const eventStreamMember = ns.getEventStreamMember();
        if (eventStreamMember) {
          dataObject[eventStreamMember] = await this.deserializeEventStream({
            response,
            responseSchema: ns,
            initialResponseContainer: dataObject,
          });
        } else {
          const bytes = await collectBody2(response.body, context);
          if (bytes.byteLength > 0) {
            Object.assign(dataObject, await deserializer.read(ns, bytes));
          }
        }
        dataObject.$metadata = this.deserializeMetadata(response);
        return dataObject;
      }
    };
    var import_protocol_http4 = require_dist_cjs2();
    var resolvedPath2 = (resolvedPath22, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error('Empty value provided for input HTTP label: ' + memberName + '.');
        }
        resolvedPath22 = resolvedPath22.replace(
          uriLabel,
          isGreedyLabel
            ? labelValue
                .split('/')
                .map((segment) => extendedEncodeURIComponent2(segment))
                .join('/')
            : extendedEncodeURIComponent2(labelValue)
        );
      } else {
        throw new Error('No value provided for input HTTP label: ' + memberName + '.');
      }
      return resolvedPath22;
    };
    function requestBuilder2(input, context) {
      return new RequestBuilder(input, context);
    }
    var RequestBuilder = class {
      constructor(input, context) {
        this.input = input;
        this.context = context;
        this.query = {};
        this.method = '';
        this.headers = {};
        this.path = '';
        this.body = null;
        this.hostname = '';
        this.resolvePathStack = [];
      }
      async build() {
        const { hostname, protocol = 'https', port, path: basePath } = await this.context.endpoint();
        this.path = basePath;
        for (const resolvePath of this.resolvePathStack) {
          resolvePath(this.path);
        }
        return new import_protocol_http4.HttpRequest({
          protocol,
          hostname: this.hostname || hostname,
          port,
          method: this.method,
          path: this.path,
          query: this.query,
          body: this.body,
          headers: this.headers,
        });
      }
      hn(hostname) {
        this.hostname = hostname;
        return this;
      }
      bp(uriLabel) {
        this.resolvePathStack.push((basePath) => {
          this.path =
            `${(basePath == null ? void 0 : basePath.endsWith('/')) ? basePath.slice(0, -1) : basePath || ''}` +
            uriLabel;
        });
        return this;
      }
      p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {
        this.resolvePathStack.push((path) => {
          this.path = resolvedPath2(path, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);
        });
        return this;
      }
      h(headers) {
        this.headers = headers;
        return this;
      }
      q(query) {
        this.query = query;
        return this;
      }
      b(body) {
        this.body = body;
        return this;
      }
      m(method) {
        this.method = method;
        return this;
      }
    };
    var import_schema5 = require_schema2();
    var import_serde2 = require_serde2();
    var import_util_base64 = require_dist_cjs11();
    var import_util_utf8 = require_dist_cjs10();
    var import_schema4 = require_schema2();
    function determineTimestampFormat(ns, settings) {
      if (settings.timestampFormat.useTrait) {
        if (
          ns.isTimestampSchema() &&
          (ns.getSchema() === import_schema4.SCHEMA.TIMESTAMP_DATE_TIME ||
            ns.getSchema() === import_schema4.SCHEMA.TIMESTAMP_HTTP_DATE ||
            ns.getSchema() === import_schema4.SCHEMA.TIMESTAMP_EPOCH_SECONDS)
        ) {
          return ns.getSchema();
        }
      }
      const { httpLabel, httpPrefixHeaders, httpHeader, httpQuery } = ns.getMergedTraits();
      const bindingFormat = settings.httpBindings
        ? typeof httpPrefixHeaders === 'string' || Boolean(httpHeader)
          ? import_schema4.SCHEMA.TIMESTAMP_HTTP_DATE
          : Boolean(httpQuery) || Boolean(httpLabel)
          ? import_schema4.SCHEMA.TIMESTAMP_DATE_TIME
          : void 0
        : void 0;
      return bindingFormat != null ? bindingFormat : settings.timestampFormat.default;
    }
    var FromStringShapeDeserializer = class {
      constructor(settings) {
        this.settings = settings;
      }
      setSerdeContext(serdeContext) {
        this.serdeContext = serdeContext;
      }
      read(_schema, data) {
        var _a, _b;
        const ns = import_schema5.NormalizedSchema.of(_schema);
        if (ns.isListSchema()) {
          return (0, import_serde2.splitHeader)(data).map((item) => this.read(ns.getValueSchema(), item));
        }
        if (ns.isBlobSchema()) {
          return (
            (_b = (_a = this.serdeContext) == null ? void 0 : _a.base64Decoder) != null
              ? _b
              : import_util_base64.fromBase64
          )(data);
        }
        if (ns.isTimestampSchema()) {
          const format = determineTimestampFormat(ns, this.settings);
          switch (format) {
            case import_schema5.SCHEMA.TIMESTAMP_DATE_TIME:
              return (0, import_serde2.parseRfc3339DateTimeWithOffset)(data);
            case import_schema5.SCHEMA.TIMESTAMP_HTTP_DATE:
              return (0, import_serde2.parseRfc7231DateTime)(data);
            case import_schema5.SCHEMA.TIMESTAMP_EPOCH_SECONDS:
              return (0, import_serde2.parseEpochTimestamp)(data);
            default:
              console.warn('Missing timestamp format, parsing value with Date constructor:', data);
              return new Date(data);
          }
        }
        if (ns.isStringSchema()) {
          const mediaType = ns.getMergedTraits().mediaType;
          let intermediateValue = data;
          if (mediaType) {
            if (ns.getMergedTraits().httpHeader) {
              intermediateValue = this.base64ToUtf8(intermediateValue);
            }
            const isJson = mediaType === 'application/json' || mediaType.endsWith('+json');
            if (isJson) {
              intermediateValue = import_serde2.LazyJsonString.from(intermediateValue);
            }
            return intermediateValue;
          }
        }
        switch (true) {
          case ns.isNumericSchema():
            return Number(data);
          case ns.isBigIntegerSchema():
            return BigInt(data);
          case ns.isBigDecimalSchema():
            return new import_serde2.NumericValue(data, 'bigDecimal');
          case ns.isBooleanSchema():
            return String(data).toLowerCase() === 'true';
        }
        return data;
      }
      base64ToUtf8(base64String) {
        var _a, _b, _c, _d;
        return (
          (_b = (_a = this.serdeContext) == null ? void 0 : _a.utf8Encoder) != null ? _b : import_util_utf8.toUtf8
        )(
          ((_d = (_c = this.serdeContext) == null ? void 0 : _c.base64Decoder) != null
            ? _d
            : import_util_base64.fromBase64)(base64String)
        );
      }
    };
    var import_schema6 = require_schema2();
    var import_util_utf82 = require_dist_cjs10();
    var HttpInterceptingShapeDeserializer = class {
      constructor(codecDeserializer, codecSettings) {
        this.codecDeserializer = codecDeserializer;
        this.stringDeserializer = new FromStringShapeDeserializer(codecSettings);
      }
      setSerdeContext(serdeContext) {
        this.stringDeserializer.setSerdeContext(serdeContext);
        this.codecDeserializer.setSerdeContext(serdeContext);
        this.serdeContext = serdeContext;
      }
      read(schema, data) {
        var _a, _b, _c, _d;
        const ns = import_schema6.NormalizedSchema.of(schema);
        const traits = ns.getMergedTraits();
        const toString =
          (_b = (_a = this.serdeContext) == null ? void 0 : _a.utf8Encoder) != null ? _b : import_util_utf82.toUtf8;
        if (traits.httpHeader || traits.httpResponseCode) {
          return this.stringDeserializer.read(ns, toString(data));
        }
        if (traits.httpPayload) {
          if (ns.isBlobSchema()) {
            const toBytes =
              (_d = (_c = this.serdeContext) == null ? void 0 : _c.utf8Decoder) != null
                ? _d
                : import_util_utf82.fromUtf8;
            if (typeof data === 'string') {
              return toBytes(data);
            }
            return data;
          } else if (ns.isStringSchema()) {
            if ('byteLength' in data) {
              return toString(data);
            }
            return data;
          }
        }
        return this.codecDeserializer.read(ns, data);
      }
    };
    var import_schema8 = require_schema2();
    var import_schema7 = require_schema2();
    var import_serde3 = require_serde2();
    var import_util_base642 = require_dist_cjs11();
    var ToStringShapeSerializer = class {
      constructor(settings) {
        this.settings = settings;
        this.stringBuffer = '';
        this.serdeContext = void 0;
      }
      setSerdeContext(serdeContext) {
        this.serdeContext = serdeContext;
      }
      write(schema, value) {
        var _a, _b, _c, _d;
        const ns = import_schema7.NormalizedSchema.of(schema);
        switch (typeof value) {
          case 'object':
            if (value === null) {
              this.stringBuffer = 'null';
              return;
            }
            if (ns.isTimestampSchema()) {
              if (!(value instanceof Date)) {
                throw new Error(
                  `@smithy/core/protocols - received non-Date value ${value} when schema expected Date in ${ns.getName(
                    true
                  )}`
                );
              }
              const format = determineTimestampFormat(ns, this.settings);
              switch (format) {
                case import_schema7.SCHEMA.TIMESTAMP_DATE_TIME:
                  this.stringBuffer = value.toISOString().replace('.000Z', 'Z');
                  break;
                case import_schema7.SCHEMA.TIMESTAMP_HTTP_DATE:
                  this.stringBuffer = (0, import_serde3.dateToUtcString)(value);
                  break;
                case import_schema7.SCHEMA.TIMESTAMP_EPOCH_SECONDS:
                  this.stringBuffer = String(value.getTime() / 1e3);
                  break;
                default:
                  console.warn('Missing timestamp format, using epoch seconds', value);
                  this.stringBuffer = String(value.getTime() / 1e3);
              }
              return;
            }
            if (ns.isBlobSchema() && 'byteLength' in value) {
              this.stringBuffer = (
                (_b = (_a = this.serdeContext) == null ? void 0 : _a.base64Encoder) != null
                  ? _b
                  : import_util_base642.toBase64
              )(value);
              return;
            }
            if (ns.isListSchema() && Array.isArray(value)) {
              let buffer = '';
              for (const item of value) {
                this.write([ns.getValueSchema(), ns.getMergedTraits()], item);
                const headerItem = this.flush();
                const serialized = ns.getValueSchema().isTimestampSchema()
                  ? headerItem
                  : (0, import_serde3.quoteHeader)(headerItem);
                if (buffer !== '') {
                  buffer += ', ';
                }
                buffer += serialized;
              }
              this.stringBuffer = buffer;
              return;
            }
            this.stringBuffer = JSON.stringify(value, null, 2);
            break;
          case 'string':
            const mediaType = ns.getMergedTraits().mediaType;
            let intermediateValue = value;
            if (mediaType) {
              const isJson = mediaType === 'application/json' || mediaType.endsWith('+json');
              if (isJson) {
                intermediateValue = import_serde3.LazyJsonString.from(intermediateValue);
              }
              if (ns.getMergedTraits().httpHeader) {
                this.stringBuffer = (
                  (_d = (_c = this.serdeContext) == null ? void 0 : _c.base64Encoder) != null
                    ? _d
                    : import_util_base642.toBase64
                )(intermediateValue.toString());
                return;
              }
            }
            this.stringBuffer = value;
            break;
          default:
            this.stringBuffer = String(value);
        }
      }
      flush() {
        const buffer = this.stringBuffer;
        this.stringBuffer = '';
        return buffer;
      }
    };
    var HttpInterceptingShapeSerializer = class {
      constructor(codecSerializer, codecSettings, stringSerializer = new ToStringShapeSerializer(codecSettings)) {
        this.codecSerializer = codecSerializer;
        this.stringSerializer = stringSerializer;
      }
      setSerdeContext(serdeContext) {
        this.codecSerializer.setSerdeContext(serdeContext);
        this.stringSerializer.setSerdeContext(serdeContext);
      }
      write(schema, value) {
        const ns = import_schema8.NormalizedSchema.of(schema);
        const traits = ns.getMergedTraits();
        if (traits.httpHeader || traits.httpLabel || traits.httpQuery) {
          this.stringSerializer.write(ns, value);
          this.buffer = this.stringSerializer.flush();
          return;
        }
        return this.codecSerializer.write(ns, value);
      }
      flush() {
        if (this.buffer !== void 0) {
          const buffer = this.buffer;
          this.buffer = void 0;
          return buffer;
        }
        return this.codecSerializer.flush();
      }
    };
  },
});

// node_modules/@smithy/core/protocols.js
var require_protocols2 = __commonJS({
  'node_modules/@smithy/core/protocols.js'(exports, module2) {
    module2.exports = require_protocols();
  },
});

// node_modules/@smithy/core/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  'node_modules/@smithy/core/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      DefaultIdentityProviderConfig: () => DefaultIdentityProviderConfig,
      EXPIRATION_MS: () => EXPIRATION_MS,
      HttpApiKeyAuthSigner: () => HttpApiKeyAuthSigner,
      HttpBearerAuthSigner: () => HttpBearerAuthSigner,
      NoAuthSigner: () => NoAuthSigner,
      createIsIdentityExpiredFunction: () => createIsIdentityExpiredFunction,
      createPaginator: () => createPaginator,
      doesIdentityRequireRefresh: () => doesIdentityRequireRefresh,
      getHttpAuthSchemeEndpointRuleSetPlugin: () => getHttpAuthSchemeEndpointRuleSetPlugin,
      getHttpAuthSchemePlugin: () => getHttpAuthSchemePlugin,
      getHttpSigningPlugin: () => getHttpSigningPlugin,
      getSmithyContext: () => getSmithyContext,
      httpAuthSchemeEndpointRuleSetMiddlewareOptions: () => httpAuthSchemeEndpointRuleSetMiddlewareOptions,
      httpAuthSchemeMiddleware: () => httpAuthSchemeMiddleware,
      httpAuthSchemeMiddlewareOptions: () => httpAuthSchemeMiddlewareOptions,
      httpSigningMiddleware: () => httpSigningMiddleware,
      httpSigningMiddlewareOptions: () => httpSigningMiddlewareOptions,
      isIdentityExpired: () => isIdentityExpired,
      memoizeIdentityProvider: () => memoizeIdentityProvider,
      normalizeProvider: () => normalizeProvider,
      requestBuilder: () => import_protocols.requestBuilder,
      setFeature: () => setFeature,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_types = require_dist_cjs();
    var getSmithyContext = /* @__PURE__ */ __name(
      (context) => context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {}),
      'getSmithyContext'
    );
    var import_util_middleware = require_dist_cjs6();
    var resolveAuthOptions = /* @__PURE__ */ __name((candidateAuthOptions, authSchemePreference) => {
      if (!authSchemePreference || authSchemePreference.length === 0) {
        return candidateAuthOptions;
      }
      const preferredAuthOptions = [];
      for (const preferredSchemeName of authSchemePreference) {
        for (const candidateAuthOption of candidateAuthOptions) {
          const candidateAuthSchemeName = candidateAuthOption.schemeId.split('#')[1];
          if (candidateAuthSchemeName === preferredSchemeName) {
            preferredAuthOptions.push(candidateAuthOption);
          }
        }
      }
      for (const candidateAuthOption of candidateAuthOptions) {
        if (!preferredAuthOptions.find(({ schemeId }) => schemeId === candidateAuthOption.schemeId)) {
          preferredAuthOptions.push(candidateAuthOption);
        }
      }
      return preferredAuthOptions;
    }, 'resolveAuthOptions');
    function convertHttpAuthSchemesToMap(httpAuthSchemes) {
      const map = /* @__PURE__ */ new Map();
      for (const scheme of httpAuthSchemes) {
        map.set(scheme.schemeId, scheme);
      }
      return map;
    }
    __name(convertHttpAuthSchemesToMap, 'convertHttpAuthSchemesToMap');
    var httpAuthSchemeMiddleware = /* @__PURE__ */ __name(
      (config, mwOptions) => (next, context) => async (args) => {
        var _a5;
        const options = config.httpAuthSchemeProvider(
          await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input)
        );
        const authSchemePreference = config.authSchemePreference ? await config.authSchemePreference() : [];
        const resolvedOptions = resolveAuthOptions(options, authSchemePreference);
        const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);
        const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
        const failureReasons = [];
        for (const option of resolvedOptions) {
          const scheme = authSchemes.get(option.schemeId);
          if (!scheme) {
            failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
            continue;
          }
          const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));
          if (!identityProvider) {
            failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
            continue;
          }
          const { identityProperties = {}, signingProperties = {} } =
            ((_a5 = option.propertiesExtractor) == null ? void 0 : _a5.call(option, config, context)) || {};
          option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
          option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
          smithyContext.selectedHttpAuthScheme = {
            httpAuthOption: option,
            identity: await identityProvider(option.identityProperties),
            signer: scheme.signer,
          };
          break;
        }
        if (!smithyContext.selectedHttpAuthScheme) {
          throw new Error(failureReasons.join('\n'));
        }
        return next(args);
      },
      'httpAuthSchemeMiddleware'
    );
    var httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
      step: 'serialize',
      tags: ['HTTP_AUTH_SCHEME'],
      name: 'httpAuthSchemeMiddleware',
      override: true,
      relation: 'before',
      toMiddleware: 'endpointV2Middleware',
    };
    var getHttpAuthSchemeEndpointRuleSetPlugin = /* @__PURE__ */ __name(
      (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
        applyToStack: /* @__PURE__ */ __name((clientStack) => {
          clientStack.addRelativeTo(
            httpAuthSchemeMiddleware(config, {
              httpAuthSchemeParametersProvider,
              identityProviderConfigProvider,
            }),
            httpAuthSchemeEndpointRuleSetMiddlewareOptions
          );
        }, 'applyToStack'),
      }),
      'getHttpAuthSchemeEndpointRuleSetPlugin'
    );
    var import_middleware_serde = require_dist_cjs7();
    var httpAuthSchemeMiddlewareOptions = {
      step: 'serialize',
      tags: ['HTTP_AUTH_SCHEME'],
      name: 'httpAuthSchemeMiddleware',
      override: true,
      relation: 'before',
      toMiddleware: import_middleware_serde.serializerMiddlewareOption.name,
    };
    var getHttpAuthSchemePlugin = /* @__PURE__ */ __name(
      (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
        applyToStack: /* @__PURE__ */ __name((clientStack) => {
          clientStack.addRelativeTo(
            httpAuthSchemeMiddleware(config, {
              httpAuthSchemeParametersProvider,
              identityProviderConfigProvider,
            }),
            httpAuthSchemeMiddlewareOptions
          );
        }, 'applyToStack'),
      }),
      'getHttpAuthSchemePlugin'
    );
    var import_protocol_http = require_dist_cjs2();
    var defaultErrorHandler = /* @__PURE__ */ __name(
      (signingProperties) => (error) => {
        throw error;
      },
      'defaultErrorHandler'
    );
    var defaultSuccessHandler = /* @__PURE__ */ __name((httpResponse, signingProperties) => {},
    'defaultSuccessHandler');
    var httpSigningMiddleware = /* @__PURE__ */ __name(
      (config) => (next, context) => async (args) => {
        if (!import_protocol_http.HttpRequest.isInstance(args.request)) {
          return next(args);
        }
        const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
        const scheme = smithyContext.selectedHttpAuthScheme;
        if (!scheme) {
          throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
        }
        const {
          httpAuthOption: { signingProperties = {} },
          identity,
          signer,
        } = scheme;
        const output = await next(
          __spreadProps(__spreadValues({}, args), {
            request: await signer.sign(args.request, identity, signingProperties),
          })
        ).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
        (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
        return output;
      },
      'httpSigningMiddleware'
    );
    var httpSigningMiddlewareOptions = {
      step: 'finalizeRequest',
      tags: ['HTTP_SIGNING'],
      name: 'httpSigningMiddleware',
      aliases: ['apiKeyMiddleware', 'tokenMiddleware', 'awsAuthMiddleware'],
      override: true,
      relation: 'after',
      toMiddleware: 'retryMiddleware',
    };
    var getHttpSigningPlugin = /* @__PURE__ */ __name(
      (config) => ({
        applyToStack: /* @__PURE__ */ __name((clientStack) => {
          clientStack.addRelativeTo(httpSigningMiddleware(config), httpSigningMiddlewareOptions);
        }, 'applyToStack'),
      }),
      'getHttpSigningPlugin'
    );
    var normalizeProvider = /* @__PURE__ */ __name((input) => {
      if (typeof input === 'function') return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    }, 'normalizeProvider');
    var makePagedClientRequest = /* @__PURE__ */ __name(
      async (CommandCtor, client, input, withCommand = (_) => _, ...args) => {
        var _a5;
        let command = new CommandCtor(input);
        command = (_a5 = withCommand(command)) != null ? _a5 : command;
        return await client.send(command, ...args);
      },
      'makePagedClientRequest'
    );
    function createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
      return /* @__PURE__ */ __name(async function* paginateOperation(config, input, ...additionalArguments) {
        var _a5, _b;
        const _input = input;
        let token = (_a5 = config.startingToken) != null ? _a5 : _input[inputTokenName];
        let hasNext = true;
        let page;
        while (hasNext) {
          _input[inputTokenName] = token;
          if (pageSizeTokenName) {
            _input[pageSizeTokenName] = (_b = _input[pageSizeTokenName]) != null ? _b : config.pageSize;
          }
          if (config.client instanceof ClientCtor) {
            page = await makePagedClientRequest(
              CommandCtor,
              config.client,
              input,
              config.withCommand,
              ...additionalArguments
            );
          } else {
            throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
          }
          yield page;
          const prevToken = token;
          token = get(page, outputTokenName);
          hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
        }
        return void 0;
      }, 'paginateOperation');
    }
    __name(createPaginator, 'createPaginator');
    var get = /* @__PURE__ */ __name((fromObject, path) => {
      let cursor = fromObject;
      const pathComponents = path.split('.');
      for (const step of pathComponents) {
        if (!cursor || typeof cursor !== 'object') {
          return void 0;
        }
        cursor = cursor[step];
      }
      return cursor;
    }, 'get');
    var import_protocols = require_protocols2();
    function setFeature(context, feature, value) {
      if (!context.__smithy_context) {
        context.__smithy_context = {
          features: {},
        };
      } else if (!context.__smithy_context.features) {
        context.__smithy_context.features = {};
      }
      context.__smithy_context.features[feature] = value;
    }
    __name(setFeature, 'setFeature');
    var _a;
    var DefaultIdentityProviderConfig =
      ((_a = class {
        constructor(config) {
          this.authSchemes = /* @__PURE__ */ new Map();
          for (const [key, value] of Object.entries(config)) {
            if (value !== void 0) {
              this.authSchemes.set(key, value);
            }
          }
        }
        getIdentityProvider(schemeId) {
          return this.authSchemes.get(schemeId);
        }
      }),
      (() => {
        __name(_a, 'DefaultIdentityProviderConfig');
      })(),
      _a);
    var _a2;
    var HttpApiKeyAuthSigner =
      ((_a2 = class {
        async sign(httpRequest, identity, signingProperties) {
          if (!signingProperties) {
            throw new Error(
              'request could not be signed with `apiKey` since the `name` and `in` signer properties are missing'
            );
          }
          if (!signingProperties.name) {
            throw new Error('request could not be signed with `apiKey` since the `name` signer property is missing');
          }
          if (!signingProperties.in) {
            throw new Error('request could not be signed with `apiKey` since the `in` signer property is missing');
          }
          if (!identity.apiKey) {
            throw new Error('request could not be signed with `apiKey` since the `apiKey` is not defined');
          }
          const clonedRequest = import_protocol_http.HttpRequest.clone(httpRequest);
          if (signingProperties.in === import_types.HttpApiKeyAuthLocation.QUERY) {
            clonedRequest.query[signingProperties.name] = identity.apiKey;
          } else if (signingProperties.in === import_types.HttpApiKeyAuthLocation.HEADER) {
            clonedRequest.headers[signingProperties.name] = signingProperties.scheme
              ? `${signingProperties.scheme} ${identity.apiKey}`
              : identity.apiKey;
          } else {
            throw new Error(
              'request can only be signed with `apiKey` locations `query` or `header`, but found: `' +
                signingProperties.in +
                '`'
            );
          }
          return clonedRequest;
        }
      }),
      (() => {
        __name(_a2, 'HttpApiKeyAuthSigner');
      })(),
      _a2);
    var _a3;
    var HttpBearerAuthSigner =
      ((_a3 = class {
        async sign(httpRequest, identity, signingProperties) {
          const clonedRequest = import_protocol_http.HttpRequest.clone(httpRequest);
          if (!identity.token) {
            throw new Error('request could not be signed with `token` since the `token` is not defined');
          }
          clonedRequest.headers['Authorization'] = `Bearer ${identity.token}`;
          return clonedRequest;
        }
      }),
      (() => {
        __name(_a3, 'HttpBearerAuthSigner');
      })(),
      _a3);
    var _a4;
    var NoAuthSigner =
      ((_a4 = class {
        async sign(httpRequest, identity, signingProperties) {
          return httpRequest;
        }
      }),
      (() => {
        __name(_a4, 'NoAuthSigner');
      })(),
      _a4);
    var createIsIdentityExpiredFunction = /* @__PURE__ */ __name(
      (expirationMs) => (identity) =>
        doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs,
      'createIsIdentityExpiredFunction'
    );
    var EXPIRATION_MS = 3e5;
    var isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
    var doesIdentityRequireRefresh = /* @__PURE__ */ __name(
      (identity) => identity.expiration !== void 0,
      'doesIdentityRequireRefresh'
    );
    var memoizeIdentityProvider = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh) => {
      if (provider === void 0) {
        return void 0;
      }
      const normalizedProvider = typeof provider !== 'function' ? async () => Promise.resolve(provider) : provider;
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = /* @__PURE__ */ __name(async (options) => {
        if (!pending) {
          pending = normalizedProvider(options);
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      }, 'coalesceProvider');
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider(options);
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider(options);
        }
        if (isConstant) {
          return resolved;
        }
        if (!requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider(options);
          return resolved;
        }
        return resolved;
      };
    }, 'memoizeIdentityProvider');
  },
});

// node_modules/@smithy/util-endpoints/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  'node_modules/@smithy/util-endpoints/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      EndpointCache: () => EndpointCache,
      EndpointError: () => EndpointError2,
      customEndpointFunctions: () => customEndpointFunctions,
      isIpAddress: () => isIpAddress2,
      isValidHostLabel: () => isValidHostLabel,
      resolveEndpoint: () => resolveEndpoint2,
    });
    module2.exports = __toCommonJS(index_exports);
    var _a;
    var EndpointCache =
      ((_a = class {
        constructor({ size, params }) {
          this.data = /* @__PURE__ */ new Map();
          this.parameters = [];
          this.capacity = size != null ? size : 50;
          if (params) {
            this.parameters = params;
          }
        }
        get(endpointParams, resolver) {
          const key = this.hash(endpointParams);
          if (key === false) {
            return resolver();
          }
          if (!this.data.has(key)) {
            if (this.data.size > this.capacity + 10) {
              const keys = this.data.keys();
              let i = 0;
              while (true) {
                const { value, done } = keys.next();
                this.data.delete(value);
                if (done || ++i > 10) {
                  break;
                }
              }
            }
            this.data.set(key, resolver());
          }
          return this.data.get(key);
        }
        size() {
          return this.data.size;
        }
        hash(endpointParams) {
          var _a3;
          let buffer = '';
          const { parameters } = this;
          if (parameters.length === 0) {
            return false;
          }
          for (const param of parameters) {
            const val = String((_a3 = endpointParams[param]) != null ? _a3 : '');
            if (val.includes('|;')) {
              return false;
            }
            buffer += val + '|;';
          }
          return buffer;
        }
      }),
      (() => {
        __name(_a, 'EndpointCache');
      })(),
      _a);
    var IP_V4_REGEX = new RegExp(
      `^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`
    );
    var isIpAddress2 = /* @__PURE__ */ __name(
      (value) => IP_V4_REGEX.test(value) || (value.startsWith('[') && value.endsWith(']')),
      'isIpAddress'
    );
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split('.');
      for (const label of labels) {
        if (!isValidHostLabel(label)) {
          return false;
        }
      }
      return true;
    }, 'isValidHostLabel');
    var customEndpointFunctions = {};
    var debugId = 'endpoints';
    function toDebugString(input) {
      if (typeof input !== 'object' || input == null) {
        return input;
      }
      if ('ref' in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ('fn' in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(', ')})`;
      }
      return JSON.stringify(input, null, 2);
    }
    __name(toDebugString, 'toDebugString');
    var _a2;
    var EndpointError2 =
      ((_a2 = class extends Error {
        constructor(message) {
          super(message);
          this.name = 'EndpointError';
        }
      }),
      (() => {
        __name(_a2, 'EndpointError');
      })(),
      _a2);
    var booleanEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, 'booleanEquals');
    var getAttrPathList = /* @__PURE__ */ __name((path) => {
      const parts = path.split('.');
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf('[');
        if (squareBracketIndex !== -1) {
          if (part.indexOf(']') !== part.length - 1) {
            throw new EndpointError2(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new EndpointError2(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    }, 'getAttrPathList');
    var getAttr = /* @__PURE__ */ __name(
      (value, path) =>
        getAttrPathList(path).reduce((acc, index) => {
          if (typeof acc !== 'object') {
            throw new EndpointError2(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
          } else if (Array.isArray(acc)) {
            return acc[parseInt(index)];
          }
          return acc[index];
        }, value),
      'getAttr'
    );
    var isSet = /* @__PURE__ */ __name((value) => value != null, 'isSet');
    var not = /* @__PURE__ */ __name((value) => !value, 'not');
    var import_types3 = require_dist_cjs();
    var DEFAULT_PORTS = {
      [import_types3.EndpointURLScheme.HTTP]: 80,
      [import_types3.EndpointURLScheme.HTTPS]: 443,
    };
    var parseURL = /* @__PURE__ */ __name((value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === 'object' && 'hostname' in value) {
            const { hostname: hostname2, port, protocol: protocol2 = '', path = '', query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ''}${path}`);
            url.search = Object.entries(query)
              .map(([k, v]) => `${k}=${v}`)
              .join('&');
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(import_types3.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = isIpAddress2(hostname);
      const inputContainsDefaultPort =
        urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||
        (typeof value === 'string' && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith('/') ? pathname : `${pathname}/`,
        isIp,
      };
    }, 'parseURL');
    var stringEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, 'stringEquals');
    var substring = /* @__PURE__ */ __name((input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    }, 'substring');
    var uriEncode = /* @__PURE__ */ __name(
      (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`),
      'uriEncode'
    );
    var endpointFunctions = {
      booleanEquals,
      getAttr,
      isSet,
      isValidHostLabel,
      not,
      parseURL,
      stringEquals,
      substring,
      uriEncode,
    };
    var evaluateTemplate = /* @__PURE__ */ __name((template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = __spreadValues(__spreadValues({}, options.endpointParams), options.referenceRecord);
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf('{', currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf('}', openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === '{' && template[closingBraceIndex + 1] === '}') {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes('#')) {
          const [refName, attrName] = parameterName.split('#');
          evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join('');
    }, 'evaluateTemplate');
    var getReferenceValue = /* @__PURE__ */ __name(({ ref }, options) => {
      const referenceRecord = __spreadValues(__spreadValues({}, options.endpointParams), options.referenceRecord);
      return referenceRecord[ref];
    }, 'getReferenceValue');
    var evaluateExpression = /* @__PURE__ */ __name((obj, keyName, options) => {
      if (typeof obj === 'string') {
        return evaluateTemplate(obj, options);
      } else if (obj['fn']) {
        return callFunction(obj, options);
      } else if (obj['ref']) {
        return getReferenceValue(obj, options);
      }
      throw new EndpointError2(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    }, 'evaluateExpression');
    var callFunction = /* @__PURE__ */ __name(({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) =>
        ['boolean', 'number'].includes(typeof arg) ? arg : evaluateExpression(arg, 'arg', options)
      );
      const fnSegments = fn.split('.');
      if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {
        return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
      }
      return endpointFunctions[fn](...evaluatedArgs);
    }, 'callFunction');
    var evaluateCondition = /* @__PURE__ */ __name((_a3, options) => {
      var _b = _a3,
        { assign } = _b,
        fnArgs = __objRest(_b, ['assign']);
      var _a4, _b2;
      if (assign && assign in options.referenceRecord) {
        throw new EndpointError2(`'${assign}' is already defined in Reference Record.`);
      }
      const value = callFunction(fnArgs, options);
      (_b2 = (_a4 = options.logger) == null ? void 0 : _a4.debug) == null
        ? void 0
        : _b2.call(_a4, `${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
      return __spreadValues(
        {
          result: value === '' ? true : !!value,
        },
        assign != null && { toAssign: { name: assign, value } }
      );
    }, 'evaluateCondition');
    var evaluateConditions = /* @__PURE__ */ __name((conditions = [], options) => {
      var _a3, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = evaluateCondition(
          condition,
          __spreadProps(__spreadValues({}, options), {
            referenceRecord: __spreadValues(__spreadValues({}, options.referenceRecord), conditionsReferenceRecord),
          })
        );
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a3 = options.logger) == null ? void 0 : _a3.debug) == null
            ? void 0
            : _b.call(_a3, `${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    }, 'evaluateConditions');
    var getEndpointHeaders = /* @__PURE__ */ __name(
      (headers, options) =>
        Object.entries(headers).reduce(
          (acc, [headerKey, headerVal]) =>
            __spreadProps(__spreadValues({}, acc), {
              [headerKey]: headerVal.map((headerValEntry) => {
                const processedExpr = evaluateExpression(headerValEntry, 'Header value entry', options);
                if (typeof processedExpr !== 'string') {
                  throw new EndpointError2(`Header '${headerKey}' value '${processedExpr}' is not a string`);
                }
                return processedExpr;
              }),
            }),
          {}
        ),
      'getEndpointHeaders'
    );
    var getEndpointProperty = /* @__PURE__ */ __name((property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
      }
      switch (typeof property) {
        case 'string':
          return evaluateTemplate(property, options);
        case 'object':
          if (property === null) {
            throw new EndpointError2(`Unexpected endpoint property: ${property}`);
          }
          return getEndpointProperties(property, options);
        case 'boolean':
          return property;
        default:
          throw new EndpointError2(`Unexpected endpoint property type: ${typeof property}`);
      }
    }, 'getEndpointProperty');
    var getEndpointProperties = /* @__PURE__ */ __name(
      (properties, options) =>
        Object.entries(properties).reduce(
          (acc, [propertyKey, propertyVal]) =>
            __spreadProps(__spreadValues({}, acc), {
              [propertyKey]: getEndpointProperty(propertyVal, options),
            }),
          {}
        ),
      'getEndpointProperties'
    );
    var getEndpointUrl = /* @__PURE__ */ __name((endpointUrl, options) => {
      const expression = evaluateExpression(endpointUrl, 'Endpoint URL', options);
      if (typeof expression === 'string') {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new EndpointError2(`Endpoint URL must be a string, got ${typeof expression}`);
    }, 'getEndpointUrl');
    var evaluateEndpointRule = /* @__PURE__ */ __name((endpointRule, options) => {
      var _a3, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = __spreadProps(__spreadValues({}, options), {
        referenceRecord: __spreadValues(__spreadValues({}, options.referenceRecord), referenceRecord),
      });
      const { url, properties, headers } = endpoint;
      (_b = (_a3 = options.logger) == null ? void 0 : _a3.debug) == null
        ? void 0
        : _b.call(_a3, `${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);
      return __spreadProps(
        __spreadValues(
          __spreadValues(
            {},
            headers != void 0 && {
              headers: getEndpointHeaders(headers, endpointRuleOptions),
            }
          ),
          properties != void 0 && {
            properties: getEndpointProperties(properties, endpointRuleOptions),
          }
        ),
        {
          url: getEndpointUrl(url, endpointRuleOptions),
        }
      );
    }, 'evaluateEndpointRule');
    var evaluateErrorRule = /* @__PURE__ */ __name((errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      throw new EndpointError2(
        evaluateExpression(
          error,
          'Error',
          __spreadProps(__spreadValues({}, options), {
            referenceRecord: __spreadValues(__spreadValues({}, options.referenceRecord), referenceRecord),
          })
        )
      );
    }, 'evaluateErrorRule');
    var evaluateTreeRule = /* @__PURE__ */ __name((treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      return evaluateRules(
        rules,
        __spreadProps(__spreadValues({}, options), {
          referenceRecord: __spreadValues(__spreadValues({}, options.referenceRecord), referenceRecord),
        })
      );
    }, 'evaluateTreeRule');
    var evaluateRules = /* @__PURE__ */ __name((rules, options) => {
      for (const rule of rules) {
        if (rule.type === 'endpoint') {
          const endpointOrUndefined = evaluateEndpointRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === 'error') {
          evaluateErrorRule(rule, options);
        } else if (rule.type === 'tree') {
          const endpointOrUndefined = evaluateTreeRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new EndpointError2(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new EndpointError2(`Rules evaluation failed`);
    }, 'evaluateRules');
    var resolveEndpoint2 = /* @__PURE__ */ __name((ruleSetObject, options) => {
      var _a3, _b, _c, _d, _e;
      const { endpointParams, logger: logger2 } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a3 = options.logger) == null ? void 0 : _a3.debug) == null
        ? void 0
        : _b.call(_a3, `${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters)
        .filter(([, v]) => v.default != null)
        .map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = (_c = endpointParams[paramKey]) != null ? _c : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters)
        .filter(([, v]) => v.required)
        .map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new EndpointError2(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = evaluateRules(rules, { endpointParams, logger: logger2, referenceRecord: {} });
      (_e = (_d = options.logger) == null ? void 0 : _d.debug) == null
        ? void 0
        : _e.call(_d, `${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
      return endpoint;
    }, 'resolveEndpoint');
  },
});

// node_modules/@smithy/querystring-parser/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  'node_modules/@smithy/querystring-parser/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      parseQueryString: () => parseQueryString,
    });
    module2.exports = __toCommonJS(index_exports);
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, '');
      if (querystring) {
        for (const pair of querystring.split('&')) {
          let [key, value = null] = pair.split('=');
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    __name(parseQueryString, 'parseQueryString');
  },
});

// node_modules/@smithy/url-parser/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  'node_modules/@smithy/url-parser/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      parseUrl: () => parseUrl,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_querystring_parser = require_dist_cjs20();
    var parseUrl = /* @__PURE__ */ __name((url) => {
      if (typeof url === 'string') {
        return parseUrl(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, import_querystring_parser.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query,
      };
    }, 'parseUrl');
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      ConditionObject: () => import_util_endpoints.ConditionObject,
      DeprecatedObject: () => import_util_endpoints.DeprecatedObject,
      EndpointError: () => import_util_endpoints.EndpointError,
      EndpointObject: () => import_util_endpoints.EndpointObject,
      EndpointObjectHeaders: () => import_util_endpoints.EndpointObjectHeaders,
      EndpointObjectProperties: () => import_util_endpoints.EndpointObjectProperties,
      EndpointParams: () => import_util_endpoints.EndpointParams,
      EndpointResolverOptions: () => import_util_endpoints.EndpointResolverOptions,
      EndpointRuleObject: () => import_util_endpoints.EndpointRuleObject,
      ErrorRuleObject: () => import_util_endpoints.ErrorRuleObject,
      EvaluateOptions: () => import_util_endpoints.EvaluateOptions,
      Expression: () => import_util_endpoints.Expression,
      FunctionArgv: () => import_util_endpoints.FunctionArgv,
      FunctionObject: () => import_util_endpoints.FunctionObject,
      FunctionReturn: () => import_util_endpoints.FunctionReturn,
      ParameterObject: () => import_util_endpoints.ParameterObject,
      ReferenceObject: () => import_util_endpoints.ReferenceObject,
      ReferenceRecord: () => import_util_endpoints.ReferenceRecord,
      RuleSetObject: () => import_util_endpoints.RuleSetObject,
      RuleSetRules: () => import_util_endpoints.RuleSetRules,
      TreeRuleObject: () => import_util_endpoints.TreeRuleObject,
      awsEndpointFunctions: () => awsEndpointFunctions,
      getUserAgentPrefix: () => getUserAgentPrefix,
      isIpAddress: () => import_util_endpoints.isIpAddress,
      partition: () => partition,
      resolveDefaultAwsRegionalEndpointsConfig: () => resolveDefaultAwsRegionalEndpointsConfig,
      resolveEndpoint: () => import_util_endpoints.resolveEndpoint,
      setPartitionInfo: () => setPartitionInfo,
      toEndpointV1: () => toEndpointV1,
      useDefaultPartitionInfo: () => useDefaultPartitionInfo,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_util_endpoints = require_dist_cjs19();
    var isVirtualHostableS3Bucket = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split('.')) {
          if (!isVirtualHostableS3Bucket(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, import_util_endpoints.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, import_util_endpoints.isIpAddress)(value)) {
        return false;
      }
      return true;
    }, 'isVirtualHostableS3Bucket');
    var ARN_DELIMITER = ':';
    var RESOURCE_DELIMITER = '/';
    var parseArn = /* @__PURE__ */ __name((value) => {
      const segments = value.split(ARN_DELIMITER);
      if (segments.length < 6) return null;
      const [arn, partition2, service, region, accountId, ...resourcePath] = segments;
      if (arn !== 'arn' || partition2 === '' || service === '' || resourcePath.join(ARN_DELIMITER) === '') return null;
      const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();
      return {
        partition: partition2,
        service,
        region,
        accountId,
        resourceId,
      };
    }, 'parseArn');
    var partitions_default = {
      partitions: [
        {
          id: 'aws',
          outputs: {
            dnsSuffix: 'amazonaws.com',
            dualStackDnsSuffix: 'api.aws',
            implicitGlobalRegion: 'us-east-1',
            name: 'aws',
            supportsDualStack: true,
            supportsFIPS: true,
          },
          regionRegex: '^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$',
          regions: {
            'af-south-1': {
              description: 'Africa (Cape Town)',
            },
            'ap-east-1': {
              description: 'Asia Pacific (Hong Kong)',
            },
            'ap-east-2': {
              description: 'Asia Pacific (Taipei)',
            },
            'ap-northeast-1': {
              description: 'Asia Pacific (Tokyo)',
            },
            'ap-northeast-2': {
              description: 'Asia Pacific (Seoul)',
            },
            'ap-northeast-3': {
              description: 'Asia Pacific (Osaka)',
            },
            'ap-south-1': {
              description: 'Asia Pacific (Mumbai)',
            },
            'ap-south-2': {
              description: 'Asia Pacific (Hyderabad)',
            },
            'ap-southeast-1': {
              description: 'Asia Pacific (Singapore)',
            },
            'ap-southeast-2': {
              description: 'Asia Pacific (Sydney)',
            },
            'ap-southeast-3': {
              description: 'Asia Pacific (Jakarta)',
            },
            'ap-southeast-4': {
              description: 'Asia Pacific (Melbourne)',
            },
            'ap-southeast-5': {
              description: 'Asia Pacific (Malaysia)',
            },
            'ap-southeast-6': {
              description: 'Asia Pacific (New Zealand)',
            },
            'ap-southeast-7': {
              description: 'Asia Pacific (Thailand)',
            },
            'aws-global': {
              description: 'aws global region',
            },
            'ca-central-1': {
              description: 'Canada (Central)',
            },
            'ca-west-1': {
              description: 'Canada West (Calgary)',
            },
            'eu-central-1': {
              description: 'Europe (Frankfurt)',
            },
            'eu-central-2': {
              description: 'Europe (Zurich)',
            },
            'eu-north-1': {
              description: 'Europe (Stockholm)',
            },
            'eu-south-1': {
              description: 'Europe (Milan)',
            },
            'eu-south-2': {
              description: 'Europe (Spain)',
            },
            'eu-west-1': {
              description: 'Europe (Ireland)',
            },
            'eu-west-2': {
              description: 'Europe (London)',
            },
            'eu-west-3': {
              description: 'Europe (Paris)',
            },
            'il-central-1': {
              description: 'Israel (Tel Aviv)',
            },
            'me-central-1': {
              description: 'Middle East (UAE)',
            },
            'me-south-1': {
              description: 'Middle East (Bahrain)',
            },
            'mx-central-1': {
              description: 'Mexico (Central)',
            },
            'sa-east-1': {
              description: 'South America (Sao Paulo)',
            },
            'us-east-1': {
              description: 'US East (N. Virginia)',
            },
            'us-east-2': {
              description: 'US East (Ohio)',
            },
            'us-west-1': {
              description: 'US West (N. California)',
            },
            'us-west-2': {
              description: 'US West (Oregon)',
            },
          },
        },
        {
          id: 'aws-cn',
          outputs: {
            dnsSuffix: 'amazonaws.com.cn',
            dualStackDnsSuffix: 'api.amazonwebservices.com.cn',
            implicitGlobalRegion: 'cn-northwest-1',
            name: 'aws-cn',
            supportsDualStack: true,
            supportsFIPS: true,
          },
          regionRegex: '^cn\\-\\w+\\-\\d+$',
          regions: {
            'aws-cn-global': {
              description: 'aws-cn global region',
            },
            'cn-north-1': {
              description: 'China (Beijing)',
            },
            'cn-northwest-1': {
              description: 'China (Ningxia)',
            },
          },
        },
        {
          id: 'aws-eusc',
          outputs: {
            dnsSuffix: 'amazonaws.eu',
            dualStackDnsSuffix: 'api.amazonwebservices.eu',
            implicitGlobalRegion: 'eusc-de-east-1',
            name: 'aws-eusc',
            supportsDualStack: true,
            supportsFIPS: true,
          },
          regionRegex: '^eusc\\-(de)\\-\\w+\\-\\d+$',
          regions: {
            'eusc-de-east-1': {
              description: 'EU (Germany)',
            },
          },
        },
        {
          id: 'aws-iso',
          outputs: {
            dnsSuffix: 'c2s.ic.gov',
            dualStackDnsSuffix: 'api.aws.ic.gov',
            implicitGlobalRegion: 'us-iso-east-1',
            name: 'aws-iso',
            supportsDualStack: false,
            supportsFIPS: true,
          },
          regionRegex: '^us\\-iso\\-\\w+\\-\\d+$',
          regions: {
            'aws-iso-global': {
              description: 'aws-iso global region',
            },
            'us-iso-east-1': {
              description: 'US ISO East',
            },
            'us-iso-west-1': {
              description: 'US ISO WEST',
            },
          },
        },
        {
          id: 'aws-iso-b',
          outputs: {
            dnsSuffix: 'sc2s.sgov.gov',
            dualStackDnsSuffix: 'api.aws.scloud',
            implicitGlobalRegion: 'us-isob-east-1',
            name: 'aws-iso-b',
            supportsDualStack: false,
            supportsFIPS: true,
          },
          regionRegex: '^us\\-isob\\-\\w+\\-\\d+$',
          regions: {
            'aws-iso-b-global': {
              description: 'aws-iso-b global region',
            },
            'us-isob-east-1': {
              description: 'US ISOB East (Ohio)',
            },
          },
        },
        {
          id: 'aws-iso-e',
          outputs: {
            dnsSuffix: 'cloud.adc-e.uk',
            dualStackDnsSuffix: 'api.cloud-aws.adc-e.uk',
            implicitGlobalRegion: 'eu-isoe-west-1',
            name: 'aws-iso-e',
            supportsDualStack: false,
            supportsFIPS: true,
          },
          regionRegex: '^eu\\-isoe\\-\\w+\\-\\d+$',
          regions: {
            'aws-iso-e-global': {
              description: 'aws-iso-e global region',
            },
            'eu-isoe-west-1': {
              description: 'EU ISOE West',
            },
          },
        },
        {
          id: 'aws-iso-f',
          outputs: {
            dnsSuffix: 'csp.hci.ic.gov',
            dualStackDnsSuffix: 'api.aws.hci.ic.gov',
            implicitGlobalRegion: 'us-isof-south-1',
            name: 'aws-iso-f',
            supportsDualStack: false,
            supportsFIPS: true,
          },
          regionRegex: '^us\\-isof\\-\\w+\\-\\d+$',
          regions: {
            'aws-iso-f-global': {
              description: 'aws-iso-f global region',
            },
            'us-isof-east-1': {
              description: 'US ISOF EAST',
            },
            'us-isof-south-1': {
              description: 'US ISOF SOUTH',
            },
          },
        },
        {
          id: 'aws-us-gov',
          outputs: {
            dnsSuffix: 'amazonaws.com',
            dualStackDnsSuffix: 'api.aws',
            implicitGlobalRegion: 'us-gov-west-1',
            name: 'aws-us-gov',
            supportsDualStack: true,
            supportsFIPS: true,
          },
          regionRegex: '^us\\-gov\\-\\w+\\-\\d+$',
          regions: {
            'aws-us-gov-global': {
              description: 'aws-us-gov global region',
            },
            'us-gov-east-1': {
              description: 'AWS GovCloud (US-East)',
            },
            'us-gov-west-1': {
              description: 'AWS GovCloud (US-West)',
            },
          },
        },
      ],
      version: '1.1',
    };
    var selectedPartitionsInfo = partitions_default;
    var selectedUserAgentPrefix = '';
    var partition = /* @__PURE__ */ __name((value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return __spreadValues(__spreadValues({}, outputs), regionData);
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return __spreadValues({}, outputs);
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === 'aws');
      if (!DEFAULT_PARTITION) {
        throw new Error(
          "Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist."
        );
      }
      return __spreadValues({}, DEFAULT_PARTITION.outputs);
    }, 'partition');
    var setPartitionInfo = /* @__PURE__ */ __name((partitionsInfo, userAgentPrefix = '') => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    }, 'setPartitionInfo');
    var useDefaultPartitionInfo = /* @__PURE__ */ __name(() => {
      setPartitionInfo(partitions_default, '');
    }, 'useDefaultPartitionInfo');
    var getUserAgentPrefix = /* @__PURE__ */ __name(() => selectedUserAgentPrefix, 'getUserAgentPrefix');
    var awsEndpointFunctions = {
      isVirtualHostableS3Bucket,
      parseArn,
      partition,
    };
    import_util_endpoints.customEndpointFunctions.aws = awsEndpointFunctions;
    var import_url_parser = require_dist_cjs21();
    var resolveDefaultAwsRegionalEndpointsConfig = /* @__PURE__ */ __name((input) => {
      if (typeof input.endpointProvider !== 'function') {
        throw new Error('@aws-sdk/util-endpoint - endpointProvider and endpoint missing in config for this client.');
      }
      const { endpoint } = input;
      if (endpoint === void 0) {
        input.endpoint = async () => {
          return toEndpointV1(
            input.endpointProvider(
              {
                Region: typeof input.region === 'function' ? await input.region() : input.region,
                UseDualStack:
                  typeof input.useDualstackEndpoint === 'function'
                    ? await input.useDualstackEndpoint()
                    : input.useDualstackEndpoint,
                UseFIPS:
                  typeof input.useFipsEndpoint === 'function' ? await input.useFipsEndpoint() : input.useFipsEndpoint,
                Endpoint: void 0,
              },
              { logger: input.logger }
            )
          );
        };
      }
      return input;
    }, 'resolveDefaultAwsRegionalEndpointsConfig');
    var toEndpointV1 = /* @__PURE__ */ __name(
      (endpoint) => (0, import_url_parser.parseUrl)(endpoint.url),
      'toEndpointV1'
    );
  },
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  'node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g;
        return (
          (g = { next: verb(0), throw: verb(1), return: verb(2) }),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while (_)
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = {}),
          verb('next'),
          verb('throw'),
          verb('return'),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function verb(n) {
          if (g[n])
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: n === 'return' } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      __importStar = function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
    });
  },
});

// node_modules/@aws-sdk/core/dist-cjs/submodules/client/index.js
var require_client = __commonJS({
  'node_modules/@aws-sdk/core/dist-cjs/submodules/client/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
      setCredentialFeature: () => setCredentialFeature,
      setFeature: () => setFeature,
      setTokenFeature: () => setTokenFeature,
      state: () => state,
    });
    module2.exports = __toCommonJS(index_exports);
    var state = {
      warningEmitted: false,
    };
    var emitWarningIfUnsupportedVersion = /* @__PURE__ */ __name((version) => {
      if (version && !state.warningEmitted && parseInt(version.substring(1, version.indexOf('.'))) < 18) {
        state.warningEmitted = true;
        process.emitWarning(`NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will
no longer support Node.js 16.x on January 6, 2025.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to a supported Node.js LTS version.

More information can be found at: https://a.co/74kJMmI`);
      }
    }, 'emitWarningIfUnsupportedVersion');
    function setCredentialFeature(credentials, feature, value) {
      if (!credentials.$source) {
        credentials.$source = {};
      }
      credentials.$source[feature] = value;
      return credentials;
    }
    __name(setCredentialFeature, 'setCredentialFeature');
    function setFeature(context, feature, value) {
      if (!context.__aws_sdk_context) {
        context.__aws_sdk_context = {
          features: {},
        };
      } else if (!context.__aws_sdk_context.features) {
        context.__aws_sdk_context.features = {};
      }
      context.__aws_sdk_context.features[feature] = value;
    }
    __name(setFeature, 'setFeature');
    function setTokenFeature(token, feature, value) {
      if (!token.$source) {
        token.$source = {};
      }
      token.$source[feature] = value;
      return token;
    }
    __name(setTokenFeature, 'setTokenFeature');
  },
});

// node_modules/@smithy/property-provider/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  'node_modules/@smithy/property-provider/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      CredentialsProviderError: () => CredentialsProviderError,
      ProviderError: () => ProviderError,
      TokenProviderError: () => TokenProviderError,
      chain: () => chain,
      fromStatic: () => fromStatic,
      memoize: () => memoize,
    });
    module2.exports = __toCommonJS(index_exports);
    var _a;
    var ProviderError =
      ((_a = class extends Error {
        constructor(message, options = true) {
          var _a4, _b;
          let logger2;
          let tryNextLink = true;
          if (typeof options === 'boolean') {
            logger2 = void 0;
            tryNextLink = options;
          } else if (options != null && typeof options === 'object') {
            logger2 = options.logger;
            tryNextLink = (_a4 = options.tryNextLink) != null ? _a4 : true;
          }
          super(message);
          this.name = 'ProviderError';
          this.tryNextLink = tryNextLink;
          Object.setPrototypeOf(this, _a.prototype);
          (_b = logger2 == null ? void 0 : logger2.debug) == null
            ? void 0
            : _b.call(logger2, `@smithy/property-provider ${tryNextLink ? '->' : '(!)'} ${message}`);
        }
        static from(error, options = true) {
          return Object.assign(new this(error.message, options), error);
        }
      }),
      (() => {
        __name(_a, 'ProviderError');
      })(),
      _a);
    var _a2;
    var CredentialsProviderError =
      ((_a2 = class extends ProviderError {
        constructor(message, options = true) {
          super(message, options);
          this.name = 'CredentialsProviderError';
          Object.setPrototypeOf(this, _a2.prototype);
        }
      }),
      (() => {
        __name(_a2, 'CredentialsProviderError');
      })(),
      _a2);
    var _a3;
    var TokenProviderError =
      ((_a3 = class extends ProviderError {
        constructor(message, options = true) {
          super(message, options);
          this.name = 'TokenProviderError';
          Object.setPrototypeOf(this, _a3.prototype);
        }
      }),
      (() => {
        __name(_a3, 'TokenProviderError');
      })(),
      _a3);
    var chain = /* @__PURE__ */ __name(
      (...providers) =>
        async () => {
          if (providers.length === 0) {
            throw new ProviderError('No providers in chain');
          }
          let lastProviderError;
          for (const provider of providers) {
            try {
              const credentials = await provider();
              return credentials;
            } catch (err) {
              lastProviderError = err;
              if (err == null ? void 0 : err.tryNextLink) {
                continue;
              }
              throw err;
            }
          }
          throw lastProviderError;
        },
      'chain'
    );
    var fromStatic = /* @__PURE__ */ __name((staticValue) => () => Promise.resolve(staticValue), 'fromStatic');
    var memoize = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = /* @__PURE__ */ __name(async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      }, 'coalesceProvider');
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    }, 'memoize');
  },
});

// node_modules/@aws-sdk/core/client.js
var require_client2 = __commonJS({
  'node_modules/@aws-sdk/core/client.js'(exports, module2) {
    module2.exports = require_client();
  },
});

// node_modules/@smithy/signature-v4/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  'node_modules/@smithy/signature-v4/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      ALGORITHM_IDENTIFIER: () => ALGORITHM_IDENTIFIER,
      ALGORITHM_IDENTIFIER_V4A: () => ALGORITHM_IDENTIFIER_V4A,
      ALGORITHM_QUERY_PARAM: () => ALGORITHM_QUERY_PARAM,
      ALWAYS_UNSIGNABLE_HEADERS: () => ALWAYS_UNSIGNABLE_HEADERS,
      AMZ_DATE_HEADER: () => AMZ_DATE_HEADER,
      AMZ_DATE_QUERY_PARAM: () => AMZ_DATE_QUERY_PARAM,
      AUTH_HEADER: () => AUTH_HEADER,
      CREDENTIAL_QUERY_PARAM: () => CREDENTIAL_QUERY_PARAM,
      DATE_HEADER: () => DATE_HEADER,
      EVENT_ALGORITHM_IDENTIFIER: () => EVENT_ALGORITHM_IDENTIFIER,
      EXPIRES_QUERY_PARAM: () => EXPIRES_QUERY_PARAM,
      GENERATED_HEADERS: () => GENERATED_HEADERS,
      HOST_HEADER: () => HOST_HEADER,
      KEY_TYPE_IDENTIFIER: () => KEY_TYPE_IDENTIFIER,
      MAX_CACHE_SIZE: () => MAX_CACHE_SIZE,
      MAX_PRESIGNED_TTL: () => MAX_PRESIGNED_TTL,
      PROXY_HEADER_PATTERN: () => PROXY_HEADER_PATTERN,
      REGION_SET_PARAM: () => REGION_SET_PARAM,
      SEC_HEADER_PATTERN: () => SEC_HEADER_PATTERN,
      SHA256_HEADER: () => SHA256_HEADER,
      SIGNATURE_HEADER: () => SIGNATURE_HEADER,
      SIGNATURE_QUERY_PARAM: () => SIGNATURE_QUERY_PARAM,
      SIGNED_HEADERS_QUERY_PARAM: () => SIGNED_HEADERS_QUERY_PARAM,
      SignatureV4: () => SignatureV4,
      SignatureV4Base: () => SignatureV4Base,
      TOKEN_HEADER: () => TOKEN_HEADER,
      TOKEN_QUERY_PARAM: () => TOKEN_QUERY_PARAM,
      UNSIGNABLE_PATTERNS: () => UNSIGNABLE_PATTERNS,
      UNSIGNED_PAYLOAD: () => UNSIGNED_PAYLOAD,
      clearCredentialCache: () => clearCredentialCache,
      createScope: () => createScope,
      getCanonicalHeaders: () => getCanonicalHeaders,
      getCanonicalQuery: () => getCanonicalQuery,
      getPayloadHash: () => getPayloadHash,
      getSigningKey: () => getSigningKey,
      hasHeader: () => hasHeader,
      moveHeadersToQuery: () => moveHeadersToQuery,
      prepareRequest: () => prepareRequest,
      signatureV4aContainer: () => signatureV4aContainer,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_util_utf85 = require_dist_cjs10();
    var ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm';
    var CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential';
    var AMZ_DATE_QUERY_PARAM = 'X-Amz-Date';
    var SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders';
    var EXPIRES_QUERY_PARAM = 'X-Amz-Expires';
    var SIGNATURE_QUERY_PARAM = 'X-Amz-Signature';
    var TOKEN_QUERY_PARAM = 'X-Amz-Security-Token';
    var REGION_SET_PARAM = 'X-Amz-Region-Set';
    var AUTH_HEADER = 'authorization';
    var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
    var DATE_HEADER = 'date';
    var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
    var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
    var SHA256_HEADER = 'x-amz-content-sha256';
    var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
    var HOST_HEADER = 'host';
    var ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      'cache-control': true,
      connection: true,
      expect: true,
      from: true,
      'keep-alive': true,
      'max-forwards': true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      'transfer-encoding': true,
      upgrade: true,
      'user-agent': true,
      'x-amzn-trace-id': true,
    };
    var PROXY_HEADER_PATTERN = /^proxy-/;
    var SEC_HEADER_PATTERN = /^sec-/;
    var UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    var ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256';
    var ALGORITHM_IDENTIFIER_V4A = 'AWS4-ECDSA-P256-SHA256';
    var EVENT_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256-PAYLOAD';
    var UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD';
    var MAX_CACHE_SIZE = 50;
    var KEY_TYPE_IDENTIFIER = 'aws4_request';
    var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
    var import_util_hex_encoding = require_dist_cjs16();
    var import_util_utf8 = require_dist_cjs10();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = /* @__PURE__ */ __name(
      (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`,
      'createScope'
    );
    var getSigningKey = /* @__PURE__ */ __name(async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, import_util_hex_encoding.toHex)(credsHash)}:${
        credentials.sessionToken
      }`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return (signingKeyCache[cacheKey] = key);
    }, 'getSigningKey');
    var clearCredentialCache = /* @__PURE__ */ __name(() => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    }, 'clearCredentialCache');
    var hmac = /* @__PURE__ */ __name((ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, import_util_utf8.toUint8Array)(data));
      return hash.digest();
    }, 'hmac');
    var getCanonicalHeaders = /* @__PURE__ */ __name(({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (
          canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS ||
          (unsignableHeaders == null ? void 0 : unsignableHeaders.has(canonicalHeaderName)) ||
          PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||
          SEC_HEADER_PATTERN.test(canonicalHeaderName)
        ) {
          if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, ' ');
      }
      return canonical;
    }, 'getCanonicalHeaders');
    var import_is_array_buffer = require_dist_cjs8();
    var import_util_utf82 = require_dist_cjs10();
    var getPayloadHash = /* @__PURE__ */ __name(async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
      } else if (
        typeof body === 'string' ||
        ArrayBuffer.isView(body) ||
        (0, import_is_array_buffer.isArrayBuffer)(body)
      ) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, import_util_utf82.toUint8Array)(body));
        return (0, import_util_hex_encoding.toHex)(await hashCtor.digest());
      }
      return UNSIGNED_PAYLOAD;
    }, 'getPayloadHash');
    var import_util_utf83 = require_dist_cjs10();
    var _a;
    var HeaderFormatter =
      ((_a = class {
        format(headers) {
          const chunks = [];
          for (const headerName of Object.keys(headers)) {
            const bytes = (0, import_util_utf83.fromUtf8)(headerName);
            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
          }
          const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
          let position = 0;
          for (const chunk of chunks) {
            out.set(chunk, position);
            position += chunk.byteLength;
          }
          return out;
        }
        formatHeaderValue(header) {
          switch (header.type) {
            case 'boolean':
              return Uint8Array.from([header.value ? 0 : 1]);
            case 'byte':
              return Uint8Array.from([2, header.value]);
            case 'short':
              const shortView = new DataView(new ArrayBuffer(3));
              shortView.setUint8(0, 3);
              shortView.setInt16(1, header.value, false);
              return new Uint8Array(shortView.buffer);
            case 'integer':
              const intView = new DataView(new ArrayBuffer(5));
              intView.setUint8(0, 4);
              intView.setInt32(1, header.value, false);
              return new Uint8Array(intView.buffer);
            case 'long':
              const longBytes = new Uint8Array(9);
              longBytes[0] = 5;
              longBytes.set(header.value.bytes, 1);
              return longBytes;
            case 'binary':
              const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
              binView.setUint8(0, 6);
              binView.setUint16(1, header.value.byteLength, false);
              const binBytes = new Uint8Array(binView.buffer);
              binBytes.set(header.value, 3);
              return binBytes;
            case 'string':
              const utf8Bytes = (0, import_util_utf83.fromUtf8)(header.value);
              const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
              strView.setUint8(0, 7);
              strView.setUint16(1, utf8Bytes.byteLength, false);
              const strBytes = new Uint8Array(strView.buffer);
              strBytes.set(utf8Bytes, 3);
              return strBytes;
            case 'timestamp':
              const tsBytes = new Uint8Array(9);
              tsBytes[0] = 8;
              tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
              return tsBytes;
            case 'uuid':
              if (!UUID_PATTERN.test(header.value)) {
                throw new Error(`Invalid UUID received: ${header.value}`);
              }
              const uuidBytes = new Uint8Array(17);
              uuidBytes[0] = 9;
              uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\-/g, '')), 1);
              return uuidBytes;
          }
        }
      }),
      (() => {
        __name(_a, 'HeaderFormatter');
      })(),
      _a);
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    var _a2;
    var Int64 =
      ((_a2 = class {
        constructor(bytes) {
          this.bytes = bytes;
          if (bytes.byteLength !== 8) {
            throw new Error('Int64 buffers must be exactly 8 bytes');
          }
        }
        static fromNumber(number) {
          if (number > 9223372036854776e3 || number < -9223372036854776e3) {
            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
          }
          const bytes = new Uint8Array(8);
          for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
            bytes[i] = remaining;
          }
          if (number < 0) {
            negate(bytes);
          }
          return new _a2(bytes);
        }
        valueOf() {
          const bytes = this.bytes.slice(0);
          const negative = bytes[0] & 128;
          if (negative) {
            negate(bytes);
          }
          return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);
        }
        toString() {
          return String(this.valueOf());
        }
      }),
      (() => {
        __name(_a2, 'Int64');
      })(),
      _a2);
    function negate(bytes) {
      for (let i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0) break;
      }
    }
    __name(negate, 'negate');
    var hasHeader = /* @__PURE__ */ __name((soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    }, 'hasHeader');
    var import_protocol_http = require_dist_cjs2();
    var moveHeadersToQuery = /* @__PURE__ */ __name((request, options = {}) => {
      var _a5, _b;
      const { headers, query = {} } = import_protocol_http.HttpRequest.clone(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (
          (lname.slice(0, 6) === 'x-amz-' && !((_a5 = options.unhoistableHeaders) == null ? void 0 : _a5.has(lname))) ||
          ((_b = options.hoistableHeaders) == null ? void 0 : _b.has(lname))
        ) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return __spreadProps(__spreadValues({}, request), {
        headers,
        query,
      });
    }, 'moveHeadersToQuery');
    var prepareRequest = /* @__PURE__ */ __name((request) => {
      request = import_protocol_http.HttpRequest.clone(request);
      for (const headerName of Object.keys(request.headers)) {
        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    }, 'prepareRequest');
    var import_util_middleware = require_dist_cjs6();
    var import_util_utf84 = require_dist_cjs10();
    var import_util_uri_escape = require_dist_cjs12();
    var getCanonicalQuery = /* @__PURE__ */ __name(({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query)) {
        if (key.toLowerCase() === SIGNATURE_HEADER) {
          continue;
        }
        const encodedKey = (0, import_util_uri_escape.escapeUri)(key);
        keys.push(encodedKey);
        const value = query[key];
        if (typeof value === 'string') {
          serialized[encodedKey] = `${encodedKey}=${(0, import_util_uri_escape.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[encodedKey] = value
            .slice(0)
            .reduce(
              (encoded, value2) => encoded.concat([`${encodedKey}=${(0, import_util_uri_escape.escapeUri)(value2)}`]),
              []
            )
            .sort()
            .join('&');
        }
      }
      return keys
        .sort()
        .map((key) => serialized[key])
        .filter((serialized2) => serialized2)
        .join('&');
    }, 'getCanonicalQuery');
    var iso8601 = /* @__PURE__ */ __name(
      (time) =>
        toDate(time)
          .toISOString()
          .replace(/\.\d{3}Z$/, 'Z'),
      'iso8601'
    );
    var toDate = /* @__PURE__ */ __name((time) => {
      if (typeof time === 'number') {
        return new Date(time * 1e3);
      }
      if (typeof time === 'string') {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    }, 'toDate');
    var _a3;
    var SignatureV4Base =
      ((_a3 = class {
        constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
          this.service = service;
          this.sha256 = sha256;
          this.uriEscapePath = uriEscapePath;
          this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true;
          this.regionProvider = (0, import_util_middleware.normalizeProvider)(region);
          this.credentialProvider = (0, import_util_middleware.normalizeProvider)(credentials);
        }
        createCanonicalRequest(request, canonicalHeaders, payloadHash) {
          const sortedHeaders = Object.keys(canonicalHeaders).sort();
          return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join('\n')}

${sortedHeaders.join(';')}
${payloadHash}`;
        }
        async createStringToSign(longDate, credentialScope, canonicalRequest, algorithmIdentifier) {
          const hash = new this.sha256();
          hash.update((0, import_util_utf84.toUint8Array)(canonicalRequest));
          const hashedRequest = await hash.digest();
          return `${algorithmIdentifier}
${longDate}
${credentialScope}
${(0, import_util_hex_encoding.toHex)(hashedRequest)}`;
        }
        getCanonicalPath({ path }) {
          if (this.uriEscapePath) {
            const normalizedPathSegments = [];
            for (const pathSegment of path.split('/')) {
              if ((pathSegment == null ? void 0 : pathSegment.length) === 0) continue;
              if (pathSegment === '.') continue;
              if (pathSegment === '..') {
                normalizedPathSegments.pop();
              } else {
                normalizedPathSegments.push(pathSegment);
              }
            }
            const normalizedPath = `${
              (path == null ? void 0 : path.startsWith('/')) ? '/' : ''
            }${normalizedPathSegments.join('/')}${
              normalizedPathSegments.length > 0 && (path == null ? void 0 : path.endsWith('/')) ? '/' : ''
            }`;
            const doubleEncoded = (0, import_util_uri_escape.escapeUri)(normalizedPath);
            return doubleEncoded.replace(/%2F/g, '/');
          }
          return path;
        }
        validateResolvedCredentials(credentials) {
          if (
            typeof credentials !== 'object' ||
            typeof credentials.accessKeyId !== 'string' ||
            typeof credentials.secretAccessKey !== 'string'
          ) {
            throw new Error('Resolved credential object is not valid');
          }
        }
        formatDate(now) {
          const longDate = iso8601(now).replace(/[\-:]/g, '');
          return {
            longDate,
            shortDate: longDate.slice(0, 8),
          };
        }
        getCanonicalHeaderList(headers) {
          return Object.keys(headers).sort().join(';');
        }
      }),
      (() => {
        __name(_a3, 'SignatureV4Base');
      })(),
      _a3);
    var _a4;
    var SignatureV4 =
      ((_a4 = class extends SignatureV4Base {
        constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
          super({
            applyChecksum,
            credentials,
            region,
            service,
            sha256,
            uriEscapePath,
          });
          this.headerFormatter = new HeaderFormatter();
        }
        async presign(originalRequest, options = {}) {
          const {
            signingDate = /* @__PURE__ */ new Date(),
            expiresIn = 3600,
            unsignableHeaders,
            unhoistableHeaders,
            signableHeaders,
            hoistableHeaders,
            signingRegion,
            signingService,
          } = options;
          const credentials = await this.credentialProvider();
          this.validateResolvedCredentials(credentials);
          const region = signingRegion != null ? signingRegion : await this.regionProvider();
          const { longDate, shortDate } = this.formatDate(signingDate);
          if (expiresIn > MAX_PRESIGNED_TTL) {
            return Promise.reject(
              'Signature version 4 presigned URLs must have an expiration date less than one week in the future'
            );
          }
          const scope = createScope(shortDate, region, signingService != null ? signingService : this.service);
          const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders, hoistableHeaders });
          if (credentials.sessionToken) {
            request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
          }
          request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
          request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
          request.query[AMZ_DATE_QUERY_PARAM] = longDate;
          request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
          const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
          request.query[SIGNED_HEADERS_QUERY_PARAM] = this.getCanonicalHeaderList(canonicalHeaders);
          request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(
            longDate,
            scope,
            this.getSigningKey(credentials, region, shortDate, signingService),
            this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256))
          );
          return request;
        }
        async sign(toSign, options) {
          if (typeof toSign === 'string') {
            return this.signString(toSign, options);
          } else if (toSign.headers && toSign.payload) {
            return this.signEvent(toSign, options);
          } else if (toSign.message) {
            return this.signMessage(toSign, options);
          } else {
            return this.signRequest(toSign, options);
          }
        }
        async signEvent(
          { headers, payload },
          { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }
        ) {
          const region = signingRegion != null ? signingRegion : await this.regionProvider();
          const { shortDate, longDate } = this.formatDate(signingDate);
          const scope = createScope(shortDate, region, signingService != null ? signingService : this.service);
          const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);
          const hash = new this.sha256();
          hash.update(headers);
          const hashedHeaders = (0, import_util_hex_encoding.toHex)(await hash.digest());
          const stringToSign = [
            EVENT_ALGORITHM_IDENTIFIER,
            longDate,
            scope,
            priorSignature,
            hashedHeaders,
            hashedPayload,
          ].join('\n');
          return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
        }
        async signMessage(
          signableMessage,
          { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }
        ) {
          const promise = this.signEvent(
            {
              headers: this.headerFormatter.format(signableMessage.message.headers),
              payload: signableMessage.message.body,
            },
            {
              signingDate,
              signingRegion,
              signingService,
              priorSignature: signableMessage.priorSignature,
            }
          );
          return promise.then((signature) => {
            return { message: signableMessage.message, signature };
          });
        }
        async signString(
          stringToSign,
          { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}
        ) {
          const credentials = await this.credentialProvider();
          this.validateResolvedCredentials(credentials);
          const region = signingRegion != null ? signingRegion : await this.regionProvider();
          const { shortDate } = this.formatDate(signingDate);
          const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
          hash.update((0, import_util_utf85.toUint8Array)(stringToSign));
          return (0, import_util_hex_encoding.toHex)(await hash.digest());
        }
        async signRequest(
          requestToSign,
          {
            signingDate = /* @__PURE__ */ new Date(),
            signableHeaders,
            unsignableHeaders,
            signingRegion,
            signingService,
          } = {}
        ) {
          const credentials = await this.credentialProvider();
          this.validateResolvedCredentials(credentials);
          const region = signingRegion != null ? signingRegion : await this.regionProvider();
          const request = prepareRequest(requestToSign);
          const { longDate, shortDate } = this.formatDate(signingDate);
          const scope = createScope(shortDate, region, signingService != null ? signingService : this.service);
          request.headers[AMZ_DATE_HEADER] = longDate;
          if (credentials.sessionToken) {
            request.headers[TOKEN_HEADER] = credentials.sessionToken;
          }
          const payloadHash = await getPayloadHash(request, this.sha256);
          if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
            request.headers[SHA256_HEADER] = payloadHash;
          }
          const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
          const signature = await this.getSignature(
            longDate,
            scope,
            this.getSigningKey(credentials, region, shortDate, signingService),
            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)
          );
          request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${
            credentials.accessKeyId
          }/${scope}, SignedHeaders=${this.getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
          return request;
        }
        async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
          const stringToSign = await this.createStringToSign(
            longDate,
            credentialScope,
            canonicalRequest,
            ALGORITHM_IDENTIFIER
          );
          const hash = new this.sha256(await keyPromise);
          hash.update((0, import_util_utf85.toUint8Array)(stringToSign));
          return (0, import_util_hex_encoding.toHex)(await hash.digest());
        }
        getSigningKey(credentials, region, shortDate, service) {
          return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
        }
      }),
      (() => {
        __name(_a4, 'SignatureV4');
      })(),
      _a4);
    var signatureV4aContainer = {
      SignatureV4a: null,
    };
  },
});

// node_modules/@aws-sdk/core/dist-cjs/submodules/httpAuthSchemes/index.js
var require_httpAuthSchemes = __commonJS({
  'node_modules/@aws-sdk/core/dist-cjs/submodules/httpAuthSchemes/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      AWSSDKSigV4Signer: () => AWSSDKSigV4Signer,
      AwsSdkSigV4ASigner: () => AwsSdkSigV4ASigner,
      AwsSdkSigV4Signer: () => AwsSdkSigV4Signer,
      NODE_AUTH_SCHEME_PREFERENCE_OPTIONS: () => NODE_AUTH_SCHEME_PREFERENCE_OPTIONS,
      NODE_SIGV4A_CONFIG_OPTIONS: () => NODE_SIGV4A_CONFIG_OPTIONS,
      getBearerTokenEnvKey: () => getBearerTokenEnvKey,
      resolveAWSSDKSigV4Config: () => resolveAWSSDKSigV4Config,
      resolveAwsSdkSigV4AConfig: () => resolveAwsSdkSigV4AConfig,
      resolveAwsSdkSigV4Config: () => resolveAwsSdkSigV4Config,
      validateSigningProperties: () => validateSigningProperties,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_protocol_http2 = require_dist_cjs2();
    var import_protocol_http = require_dist_cjs2();
    var getDateHeader = /* @__PURE__ */ __name((response) => {
      var _a3, _b, _c;
      return import_protocol_http.HttpResponse.isInstance(response)
        ? (_c = (_a3 = response.headers) == null ? void 0 : _a3.date) != null
          ? _c
          : (_b = response.headers) == null
          ? void 0
          : _b.Date
        : void 0;
    }, 'getDateHeader');
    var getSkewCorrectedDate = /* @__PURE__ */ __name(
      (systemClockOffset) => new Date(Date.now() + systemClockOffset),
      'getSkewCorrectedDate'
    );
    var isClockSkewed = /* @__PURE__ */ __name(
      (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5,
      'isClockSkewed'
    );
    var getUpdatedSystemClockOffset = /* @__PURE__ */ __name((clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    }, 'getUpdatedSystemClockOffset');
    var throwSigningPropertyError = /* @__PURE__ */ __name((name, property) => {
      if (!property) {
        throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
      }
      return property;
    }, 'throwSigningPropertyError');
    var validateSigningProperties = /* @__PURE__ */ __name(async (signingProperties) => {
      var _a3, _b, _c;
      const context = throwSigningPropertyError('context', signingProperties.context);
      const config = throwSigningPropertyError('config', signingProperties.config);
      const authScheme =
        (_c = (_b = (_a3 = context.endpointV2) == null ? void 0 : _a3.properties) == null ? void 0 : _b.authSchemes) ==
        null
          ? void 0
          : _c[0];
      const signerFunction = throwSigningPropertyError('signer', config.signer);
      const signer = await signerFunction(authScheme);
      const signingRegion = signingProperties == null ? void 0 : signingProperties.signingRegion;
      const signingRegionSet = signingProperties == null ? void 0 : signingProperties.signingRegionSet;
      const signingName = signingProperties == null ? void 0 : signingProperties.signingName;
      return {
        config,
        signer,
        signingRegion,
        signingRegionSet,
        signingName,
      };
    }, 'validateSigningProperties');
    var _a;
    var AwsSdkSigV4Signer =
      ((_a = class {
        async sign(httpRequest, identity, signingProperties) {
          var _a3, _b, _c, _d;
          if (!import_protocol_http2.HttpRequest.isInstance(httpRequest)) {
            throw new Error('The request is not an instance of `HttpRequest` and cannot be signed');
          }
          const validatedProps = await validateSigningProperties(signingProperties);
          const { config, signer } = validatedProps;
          let { signingRegion, signingName } = validatedProps;
          const handlerExecutionContext = signingProperties.context;
          if (
            (_b =
              (_a3 = handlerExecutionContext == null ? void 0 : handlerExecutionContext.authSchemes) == null
                ? void 0
                : _a3.length) != null
              ? _b
              : 0 > 1
          ) {
            const [first, second] = handlerExecutionContext.authSchemes;
            if (
              (first == null ? void 0 : first.name) === 'sigv4a' &&
              (second == null ? void 0 : second.name) === 'sigv4'
            ) {
              signingRegion = (_c = second == null ? void 0 : second.signingRegion) != null ? _c : signingRegion;
              signingName = (_d = second == null ? void 0 : second.signingName) != null ? _d : signingName;
            }
          }
          const signedRequest = await signer.sign(httpRequest, {
            signingDate: getSkewCorrectedDate(config.systemClockOffset),
            signingRegion,
            signingService: signingName,
          });
          return signedRequest;
        }
        errorHandler(signingProperties) {
          return (error) => {
            var _a3;
            const serverTime = (_a3 = error.ServerTime) != null ? _a3 : getDateHeader(error.$response);
            if (serverTime) {
              const config = throwSigningPropertyError('config', signingProperties.config);
              const initialSystemClockOffset = config.systemClockOffset;
              config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);
              const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;
              if (clockSkewCorrected && error.$metadata) {
                error.$metadata.clockSkewCorrected = true;
              }
            }
            throw error;
          };
        }
        successHandler(httpResponse, signingProperties) {
          const dateHeader = getDateHeader(httpResponse);
          if (dateHeader) {
            const config = throwSigningPropertyError('config', signingProperties.config);
            config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);
          }
        }
      }),
      (() => {
        __name(_a, 'AwsSdkSigV4Signer');
      })(),
      _a);
    var AWSSDKSigV4Signer = AwsSdkSigV4Signer;
    var import_protocol_http3 = require_dist_cjs2();
    var _a2;
    var AwsSdkSigV4ASigner =
      ((_a2 = class extends AwsSdkSigV4Signer {
        async sign(httpRequest, identity, signingProperties) {
          var _a3, _b;
          if (!import_protocol_http3.HttpRequest.isInstance(httpRequest)) {
            throw new Error('The request is not an instance of `HttpRequest` and cannot be signed');
          }
          const { config, signer, signingRegion, signingRegionSet, signingName } = await validateSigningProperties(
            signingProperties
          );
          const configResolvedSigningRegionSet = await ((_a3 = config.sigv4aSigningRegionSet) == null
            ? void 0
            : _a3.call(config));
          const multiRegionOverride = (
            (_b = configResolvedSigningRegionSet != null ? configResolvedSigningRegionSet : signingRegionSet) != null
              ? _b
              : [signingRegion]
          ).join(',');
          const signedRequest = await signer.sign(httpRequest, {
            signingDate: getSkewCorrectedDate(config.systemClockOffset),
            signingRegion: multiRegionOverride,
            signingService: signingName,
          });
          return signedRequest;
        }
      }),
      (() => {
        __name(_a2, 'AwsSdkSigV4ASigner');
      })(),
      _a2);
    var getArrayForCommaSeparatedString = /* @__PURE__ */ __name(
      (str) => (typeof str === 'string' && str.length > 0 ? str.split(',').map((item) => item.trim()) : []),
      'getArrayForCommaSeparatedString'
    );
    var getBearerTokenEnvKey = /* @__PURE__ */ __name(
      (signingName) => `AWS_BEARER_TOKEN_${signingName.replace(/[\s-]/g, '_').toUpperCase()}`,
      'getBearerTokenEnvKey'
    );
    var NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY = 'AWS_AUTH_SCHEME_PREFERENCE';
    var NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY = 'auth_scheme_preference';
    var NODE_AUTH_SCHEME_PREFERENCE_OPTIONS = {
      environmentVariableSelector: /* @__PURE__ */ __name((env, options) => {
        if (options == null ? void 0 : options.signingName) {
          const bearerTokenKey = getBearerTokenEnvKey(options.signingName);
          if (bearerTokenKey in env) return ['httpBearerAuth'];
        }
        if (!(NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY in env)) return void 0;
        return getArrayForCommaSeparatedString(env[NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY]);
      }, 'environmentVariableSelector'),
      configFileSelector: /* @__PURE__ */ __name((profile) => {
        if (!(NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY in profile)) return void 0;
        return getArrayForCommaSeparatedString(profile[NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY]);
      }, 'configFileSelector'),
      default: [],
    };
    var import_core2 = require_dist_cjs18();
    var import_property_provider = require_dist_cjs23();
    var resolveAwsSdkSigV4AConfig = /* @__PURE__ */ __name((config) => {
      config.sigv4aSigningRegionSet = (0, import_core2.normalizeProvider)(config.sigv4aSigningRegionSet);
      return config;
    }, 'resolveAwsSdkSigV4AConfig');
    var NODE_SIGV4A_CONFIG_OPTIONS = {
      environmentVariableSelector(env) {
        if (env.AWS_SIGV4A_SIGNING_REGION_SET) {
          return env.AWS_SIGV4A_SIGNING_REGION_SET.split(',').map((_) => _.trim());
        }
        throw new import_property_provider.ProviderError('AWS_SIGV4A_SIGNING_REGION_SET not set in env.', {
          tryNextLink: true,
        });
      },
      configFileSelector(profile) {
        var _a3;
        if (profile.sigv4a_signing_region_set) {
          return ((_a3 = profile.sigv4a_signing_region_set) != null ? _a3 : '').split(',').map((_) => _.trim());
        }
        throw new import_property_provider.ProviderError('sigv4a_signing_region_set not set in profile.', {
          tryNextLink: true,
        });
      },
      default: void 0,
    };
    var import_client = require_client2();
    var import_core22 = require_dist_cjs18();
    var import_signature_v4 = require_dist_cjs24();
    var resolveAwsSdkSigV4Config = /* @__PURE__ */ __name((config) => {
      let inputCredentials = config.credentials;
      let isUserSupplied = !!config.credentials;
      let resolvedCredentials = void 0;
      Object.defineProperty(config, 'credentials', {
        set(credentials) {
          if (credentials && credentials !== inputCredentials && credentials !== resolvedCredentials) {
            isUserSupplied = true;
          }
          inputCredentials = credentials;
          const memoizedProvider = normalizeCredentialProvider(config, {
            credentials: inputCredentials,
            credentialDefaultProvider: config.credentialDefaultProvider,
          });
          const boundProvider = bindCallerConfig(config, memoizedProvider);
          if (isUserSupplied && !boundProvider.attributed) {
            resolvedCredentials = /* @__PURE__ */ __name(
              async (options) =>
                boundProvider(options).then((creds) =>
                  (0, import_client.setCredentialFeature)(creds, 'CREDENTIALS_CODE', 'e')
                ),
              'resolvedCredentials'
            );
            resolvedCredentials.memoized = boundProvider.memoized;
            resolvedCredentials.configBound = boundProvider.configBound;
            resolvedCredentials.attributed = true;
          } else {
            resolvedCredentials = boundProvider;
          }
        },
        get() {
          return resolvedCredentials;
        },
        enumerable: true,
        configurable: true,
      });
      config.credentials = inputCredentials;
      const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256 } = config;
      let signer;
      if (config.signer) {
        signer = (0, import_core22.normalizeProvider)(config.signer);
      } else if (config.regionInfoProvider) {
        signer = /* @__PURE__ */ __name(
          () =>
            (0, import_core22.normalizeProvider)(config.region)()
              .then(async (region) => [
                (await config.regionInfoProvider(region, {
                  useFipsEndpoint: await config.useFipsEndpoint(),
                  useDualstackEndpoint: await config.useDualstackEndpoint(),
                })) || {},
                region,
              ])
              .then(([regionInfo, region]) => {
                const { signingRegion, signingService } = regionInfo;
                config.signingRegion = config.signingRegion || signingRegion || region;
                config.signingName = config.signingName || signingService || config.serviceId;
                const params = __spreadProps(__spreadValues({}, config), {
                  credentials: config.credentials,
                  region: config.signingRegion,
                  service: config.signingName,
                  sha256,
                  uriEscapePath: signingEscapePath,
                });
                const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;
                return new SignerCtor(params);
              }),
          'signer'
        );
      } else {
        signer = /* @__PURE__ */ __name(async (authScheme) => {
          authScheme = Object.assign(
            {},
            {
              name: 'sigv4',
              signingName: config.signingName || config.defaultSigningName,
              signingRegion: await (0, import_core22.normalizeProvider)(config.region)(),
              properties: {},
            },
            authScheme
          );
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          config.signingRegion = config.signingRegion || signingRegion;
          config.signingName = config.signingName || signingService || config.serviceId;
          const params = __spreadProps(__spreadValues({}, config), {
            credentials: config.credentials,
            region: config.signingRegion,
            service: config.signingName,
            sha256,
            uriEscapePath: signingEscapePath,
          });
          const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;
          return new SignerCtor(params);
        }, 'signer');
      }
      const resolvedConfig = Object.assign(config, {
        systemClockOffset,
        signingEscapePath,
        signer,
      });
      return resolvedConfig;
    }, 'resolveAwsSdkSigV4Config');
    var resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;
    function normalizeCredentialProvider(config, { credentials, credentialDefaultProvider }) {
      let credentialsProvider;
      if (credentials) {
        if (!(credentials == null ? void 0 : credentials.memoized)) {
          credentialsProvider = (0, import_core22.memoizeIdentityProvider)(
            credentials,
            import_core22.isIdentityExpired,
            import_core22.doesIdentityRequireRefresh
          );
        } else {
          credentialsProvider = credentials;
        }
      } else {
        if (credentialDefaultProvider) {
          credentialsProvider = (0, import_core22.normalizeProvider)(
            credentialDefaultProvider(
              Object.assign({}, config, {
                parentClientConfig: config,
              })
            )
          );
        } else {
          credentialsProvider = /* @__PURE__ */ __name(async () => {
            throw new Error(
              '@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.'
            );
          }, 'credentialsProvider');
        }
      }
      credentialsProvider.memoized = true;
      return credentialsProvider;
    }
    __name(normalizeCredentialProvider, 'normalizeCredentialProvider');
    function bindCallerConfig(config, credentialsProvider) {
      if (credentialsProvider.configBound) {
        return credentialsProvider;
      }
      const fn = /* @__PURE__ */ __name(
        async (options) =>
          credentialsProvider(__spreadProps(__spreadValues({}, options), { callerClientConfig: config })),
        'fn'
      );
      fn.memoized = credentialsProvider.memoized;
      fn.configBound = true;
      return fn;
    }
    __name(bindCallerConfig, 'bindCallerConfig');
  },
});

// node_modules/@smithy/util-body-length-browser/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  'node_modules/@smithy/util-body-length-browser/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      calculateBodyLength: () => calculateBodyLength,
    });
    module2.exports = __toCommonJS(index_exports);
    var TEXT_ENCODER = typeof TextEncoder == 'function' ? new TextEncoder() : null;
    var calculateBodyLength = /* @__PURE__ */ __name((body) => {
      if (typeof body === 'string') {
        if (TEXT_ENCODER) {
          return TEXT_ENCODER.encode(body).byteLength;
        }
        let len = body.length;
        for (let i = len - 1; i >= 0; i--) {
          const code = body.charCodeAt(i);
          if (code > 127 && code <= 2047) len++;
          else if (code > 2047 && code <= 65535) len += 2;
          if (code >= 56320 && code <= 57343) i--;
        }
        return len;
      } else if (typeof body.byteLength === 'number') {
        return body.byteLength;
      } else if (typeof body.size === 'number') {
        return body.size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    }, 'calculateBodyLength');
  },
});

// node_modules/@smithy/core/dist-cjs/submodules/cbor/index.js
var require_cbor = __commonJS({
  'node_modules/@smithy/core/dist-cjs/submodules/cbor/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      CborCodec: () => CborCodec,
      CborShapeDeserializer: () => CborShapeDeserializer,
      CborShapeSerializer: () => CborShapeSerializer,
      SmithyRpcV2CborProtocol: () => SmithyRpcV2CborProtocol,
      buildHttpRpcRequest: () => buildHttpRpcRequest,
      cbor: () => cbor,
      checkCborResponse: () => checkCborResponse,
      dateToTag: () => dateToTag,
      loadSmithyRpcV2CborErrorCode: () => loadSmithyRpcV2CborErrorCode,
      parseCborBody: () => parseCborBody,
      parseCborErrorBody: () => parseCborErrorBody,
      tag: () => tag,
      tagSymbol: () => tagSymbol,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_serde = require_serde2();
    var import_util_utf8 = require_dist_cjs10();
    var majorUint64 = 0;
    var majorNegativeInt64 = 1;
    var majorUnstructuredByteString = 2;
    var majorUtf8String = 3;
    var majorList = 4;
    var majorMap = 5;
    var majorTag = 6;
    var majorSpecial = 7;
    var specialFalse = 20;
    var specialTrue = 21;
    var specialNull = 22;
    var specialUndefined = 23;
    var extendedOneByte = 24;
    var extendedFloat16 = 25;
    var extendedFloat32 = 26;
    var extendedFloat64 = 27;
    var minorIndefinite = 31;
    function alloc(size) {
      return typeof Buffer !== 'undefined' ? Buffer.alloc(size) : new Uint8Array(size);
    }
    var tagSymbol = Symbol('@smithy/core/cbor::tagSymbol');
    function tag(data2) {
      data2[tagSymbol] = true;
      return data2;
    }
    var USE_TEXT_DECODER = typeof TextDecoder !== 'undefined';
    var USE_BUFFER = typeof Buffer !== 'undefined';
    var payload = alloc(0);
    var dataView = new DataView(payload.buffer, payload.byteOffset, payload.byteLength);
    var textDecoder = USE_TEXT_DECODER ? new TextDecoder() : null;
    var _offset = 0;
    function setPayload(bytes) {
      payload = bytes;
      dataView = new DataView(payload.buffer, payload.byteOffset, payload.byteLength);
    }
    function decode(at, to) {
      if (at >= to) {
        throw new Error('unexpected end of (decode) payload.');
      }
      const major = (payload[at] & 224) >> 5;
      const minor = payload[at] & 31;
      switch (major) {
        case majorUint64:
        case majorNegativeInt64:
        case majorTag:
          let unsignedInt;
          let offset;
          if (minor < 24) {
            unsignedInt = minor;
            offset = 1;
          } else {
            switch (minor) {
              case extendedOneByte:
              case extendedFloat16:
              case extendedFloat32:
              case extendedFloat64:
                const countLength = minorValueToArgumentLength[minor];
                const countOffset = countLength + 1;
                offset = countOffset;
                if (to - at < countOffset) {
                  throw new Error(`countLength ${countLength} greater than remaining buf len.`);
                }
                const countIndex = at + 1;
                if (countLength === 1) {
                  unsignedInt = payload[countIndex];
                } else if (countLength === 2) {
                  unsignedInt = dataView.getUint16(countIndex);
                } else if (countLength === 4) {
                  unsignedInt = dataView.getUint32(countIndex);
                } else {
                  unsignedInt = dataView.getBigUint64(countIndex);
                }
                break;
              default:
                throw new Error(`unexpected minor value ${minor}.`);
            }
          }
          if (major === majorUint64) {
            _offset = offset;
            return castBigInt(unsignedInt);
          } else if (major === majorNegativeInt64) {
            let negativeInt;
            if (typeof unsignedInt === 'bigint') {
              negativeInt = BigInt(-1) - unsignedInt;
            } else {
              negativeInt = -1 - unsignedInt;
            }
            _offset = offset;
            return castBigInt(negativeInt);
          } else {
            if (minor === 2 || minor === 3) {
              const length = decodeCount(at + offset, to);
              let b = BigInt(0);
              const start = at + offset + _offset;
              for (let i = start; i < start + length; ++i) {
                b = (b << BigInt(8)) | BigInt(payload[i]);
              }
              _offset = offset + _offset + length;
              return minor === 3 ? -b - BigInt(1) : b;
            } else if (minor === 4) {
              const decimalFraction = decode(at + offset, to);
              const [exponent, mantissa] = decimalFraction;
              const normalizer = mantissa < 0 ? -1 : 1;
              const mantissaStr = '0'.repeat(Math.abs(exponent) + 1) + String(BigInt(normalizer) * BigInt(mantissa));
              let numericString;
              const sign = mantissa < 0 ? '-' : '';
              numericString =
                exponent === 0
                  ? mantissaStr
                  : mantissaStr.slice(0, mantissaStr.length + exponent) + '.' + mantissaStr.slice(exponent);
              numericString = numericString.replace(/^0+/g, '');
              if (numericString === '') {
                numericString = '0';
              }
              if (numericString[0] === '.') {
                numericString = '0' + numericString;
              }
              numericString = sign + numericString;
              _offset = offset + _offset;
              return (0, import_serde.nv)(numericString);
            } else {
              const value = decode(at + offset, to);
              const valueOffset = _offset;
              _offset = offset + valueOffset;
              return tag({ tag: castBigInt(unsignedInt), value });
            }
          }
        case majorUtf8String:
        case majorMap:
        case majorList:
        case majorUnstructuredByteString:
          if (minor === minorIndefinite) {
            switch (major) {
              case majorUtf8String:
                return decodeUtf8StringIndefinite(at, to);
              case majorMap:
                return decodeMapIndefinite(at, to);
              case majorList:
                return decodeListIndefinite(at, to);
              case majorUnstructuredByteString:
                return decodeUnstructuredByteStringIndefinite(at, to);
            }
          } else {
            switch (major) {
              case majorUtf8String:
                return decodeUtf8String(at, to);
              case majorMap:
                return decodeMap(at, to);
              case majorList:
                return decodeList(at, to);
              case majorUnstructuredByteString:
                return decodeUnstructuredByteString(at, to);
            }
          }
        default:
          return decodeSpecial(at, to);
      }
    }
    function bytesToUtf8(bytes, at, to) {
      var _a;
      if (USE_BUFFER && ((_a = bytes.constructor) == null ? void 0 : _a.name) === 'Buffer') {
        return bytes.toString('utf-8', at, to);
      }
      if (textDecoder) {
        return textDecoder.decode(bytes.subarray(at, to));
      }
      return (0, import_util_utf8.toUtf8)(bytes.subarray(at, to));
    }
    function demote(bigInteger) {
      const num = Number(bigInteger);
      if (num < Number.MIN_SAFE_INTEGER || Number.MAX_SAFE_INTEGER < num) {
        console.warn(
          new Error(`@smithy/core/cbor - truncating BigInt(${bigInteger}) to ${num} with loss of precision.`)
        );
      }
      return num;
    }
    var minorValueToArgumentLength = {
      [extendedOneByte]: 1,
      [extendedFloat16]: 2,
      [extendedFloat32]: 4,
      [extendedFloat64]: 8,
    };
    function bytesToFloat16(a, b) {
      const sign = a >> 7;
      const exponent = (a & 124) >> 2;
      const fraction = ((a & 3) << 8) | b;
      const scalar = sign === 0 ? 1 : -1;
      let exponentComponent;
      let summation;
      if (exponent === 0) {
        if (fraction === 0) {
          return 0;
        } else {
          exponentComponent = Math.pow(2, 1 - 15);
          summation = 0;
        }
      } else if (exponent === 31) {
        if (fraction === 0) {
          return scalar * Infinity;
        } else {
          return NaN;
        }
      } else {
        exponentComponent = Math.pow(2, exponent - 15);
        summation = 1;
      }
      summation += fraction / 1024;
      return scalar * (exponentComponent * summation);
    }
    function decodeCount(at, to) {
      const minor = payload[at] & 31;
      if (minor < 24) {
        _offset = 1;
        return minor;
      }
      if (
        minor === extendedOneByte ||
        minor === extendedFloat16 ||
        minor === extendedFloat32 ||
        minor === extendedFloat64
      ) {
        const countLength = minorValueToArgumentLength[minor];
        _offset = countLength + 1;
        if (to - at < _offset) {
          throw new Error(`countLength ${countLength} greater than remaining buf len.`);
        }
        const countIndex = at + 1;
        if (countLength === 1) {
          return payload[countIndex];
        } else if (countLength === 2) {
          return dataView.getUint16(countIndex);
        } else if (countLength === 4) {
          return dataView.getUint32(countIndex);
        }
        return demote(dataView.getBigUint64(countIndex));
      }
      throw new Error(`unexpected minor value ${minor}.`);
    }
    function decodeUtf8String(at, to) {
      const length = decodeCount(at, to);
      const offset = _offset;
      at += offset;
      if (to - at < length) {
        throw new Error(`string len ${length} greater than remaining buf len.`);
      }
      const value = bytesToUtf8(payload, at, at + length);
      _offset = offset + length;
      return value;
    }
    function decodeUtf8StringIndefinite(at, to) {
      at += 1;
      const vector = [];
      for (const base = at; at < to; ) {
        if (payload[at] === 255) {
          const data2 = alloc(vector.length);
          data2.set(vector, 0);
          _offset = at - base + 2;
          return bytesToUtf8(data2, 0, data2.length);
        }
        const major = (payload[at] & 224) >> 5;
        const minor = payload[at] & 31;
        if (major !== majorUtf8String) {
          throw new Error(`unexpected major type ${major} in indefinite string.`);
        }
        if (minor === minorIndefinite) {
          throw new Error('nested indefinite string.');
        }
        const bytes = decodeUnstructuredByteString(at, to);
        const length = _offset;
        at += length;
        for (let i = 0; i < bytes.length; ++i) {
          vector.push(bytes[i]);
        }
      }
      throw new Error('expected break marker.');
    }
    function decodeUnstructuredByteString(at, to) {
      const length = decodeCount(at, to);
      const offset = _offset;
      at += offset;
      if (to - at < length) {
        throw new Error(`unstructured byte string len ${length} greater than remaining buf len.`);
      }
      const value = payload.subarray(at, at + length);
      _offset = offset + length;
      return value;
    }
    function decodeUnstructuredByteStringIndefinite(at, to) {
      at += 1;
      const vector = [];
      for (const base = at; at < to; ) {
        if (payload[at] === 255) {
          const data2 = alloc(vector.length);
          data2.set(vector, 0);
          _offset = at - base + 2;
          return data2;
        }
        const major = (payload[at] & 224) >> 5;
        const minor = payload[at] & 31;
        if (major !== majorUnstructuredByteString) {
          throw new Error(`unexpected major type ${major} in indefinite string.`);
        }
        if (minor === minorIndefinite) {
          throw new Error('nested indefinite string.');
        }
        const bytes = decodeUnstructuredByteString(at, to);
        const length = _offset;
        at += length;
        for (let i = 0; i < bytes.length; ++i) {
          vector.push(bytes[i]);
        }
      }
      throw new Error('expected break marker.');
    }
    function decodeList(at, to) {
      const listDataLength = decodeCount(at, to);
      const offset = _offset;
      at += offset;
      const base = at;
      const list = Array(listDataLength);
      for (let i = 0; i < listDataLength; ++i) {
        const item = decode(at, to);
        const itemOffset = _offset;
        list[i] = item;
        at += itemOffset;
      }
      _offset = offset + (at - base);
      return list;
    }
    function decodeListIndefinite(at, to) {
      at += 1;
      const list = [];
      for (const base = at; at < to; ) {
        if (payload[at] === 255) {
          _offset = at - base + 2;
          return list;
        }
        const item = decode(at, to);
        const n = _offset;
        at += n;
        list.push(item);
      }
      throw new Error('expected break marker.');
    }
    function decodeMap(at, to) {
      const mapDataLength = decodeCount(at, to);
      const offset = _offset;
      at += offset;
      const base = at;
      const map = {};
      for (let i = 0; i < mapDataLength; ++i) {
        if (at >= to) {
          throw new Error('unexpected end of map payload.');
        }
        const major = (payload[at] & 224) >> 5;
        if (major !== majorUtf8String) {
          throw new Error(`unexpected major type ${major} for map key at index ${at}.`);
        }
        const key = decode(at, to);
        at += _offset;
        const value = decode(at, to);
        at += _offset;
        map[key] = value;
      }
      _offset = offset + (at - base);
      return map;
    }
    function decodeMapIndefinite(at, to) {
      at += 1;
      const base = at;
      const map = {};
      for (; at < to; ) {
        if (at >= to) {
          throw new Error('unexpected end of map payload.');
        }
        if (payload[at] === 255) {
          _offset = at - base + 2;
          return map;
        }
        const major = (payload[at] & 224) >> 5;
        if (major !== majorUtf8String) {
          throw new Error(`unexpected major type ${major} for map key.`);
        }
        const key = decode(at, to);
        at += _offset;
        const value = decode(at, to);
        at += _offset;
        map[key] = value;
      }
      throw new Error('expected break marker.');
    }
    function decodeSpecial(at, to) {
      const minor = payload[at] & 31;
      switch (minor) {
        case specialTrue:
        case specialFalse:
          _offset = 1;
          return minor === specialTrue;
        case specialNull:
          _offset = 1;
          return null;
        case specialUndefined:
          _offset = 1;
          return null;
        case extendedFloat16:
          if (to - at < 3) {
            throw new Error('incomplete float16 at end of buf.');
          }
          _offset = 3;
          return bytesToFloat16(payload[at + 1], payload[at + 2]);
        case extendedFloat32:
          if (to - at < 5) {
            throw new Error('incomplete float32 at end of buf.');
          }
          _offset = 5;
          return dataView.getFloat32(at + 1);
        case extendedFloat64:
          if (to - at < 9) {
            throw new Error('incomplete float64 at end of buf.');
          }
          _offset = 9;
          return dataView.getFloat64(at + 1);
        default:
          throw new Error(`unexpected minor value ${minor}.`);
      }
    }
    function castBigInt(bigInt) {
      if (typeof bigInt === 'number') {
        return bigInt;
      }
      const num = Number(bigInt);
      if (Number.MIN_SAFE_INTEGER <= num && num <= Number.MAX_SAFE_INTEGER) {
        return num;
      }
      return bigInt;
    }
    var import_serde2 = require_serde2();
    var import_util_utf82 = require_dist_cjs10();
    var USE_BUFFER2 = typeof Buffer !== 'undefined';
    var initialSize = 2048;
    var data = alloc(initialSize);
    var dataView2 = new DataView(data.buffer, data.byteOffset, data.byteLength);
    var cursor = 0;
    function ensureSpace(bytes) {
      const remaining = data.byteLength - cursor;
      if (remaining < bytes) {
        if (cursor < 16e6) {
          resize(Math.max(data.byteLength * 4, data.byteLength + bytes));
        } else {
          resize(data.byteLength + bytes + 16e6);
        }
      }
    }
    function toUint8Array() {
      const out = alloc(cursor);
      out.set(data.subarray(0, cursor), 0);
      cursor = 0;
      return out;
    }
    function resize(size) {
      const old = data;
      data = alloc(size);
      if (old) {
        if (old.copy) {
          old.copy(data, 0, 0, old.byteLength);
        } else {
          data.set(old, 0);
        }
      }
      dataView2 = new DataView(data.buffer, data.byteOffset, data.byteLength);
    }
    function encodeHeader(major, value) {
      if (value < 24) {
        data[cursor++] = (major << 5) | value;
      } else if (value < 1 << 8) {
        data[cursor++] = (major << 5) | 24;
        data[cursor++] = value;
      } else if (value < 1 << 16) {
        data[cursor++] = (major << 5) | extendedFloat16;
        dataView2.setUint16(cursor, value);
        cursor += 2;
      } else if (value < 2 ** 32) {
        data[cursor++] = (major << 5) | extendedFloat32;
        dataView2.setUint32(cursor, value);
        cursor += 4;
      } else {
        data[cursor++] = (major << 5) | extendedFloat64;
        dataView2.setBigUint64(cursor, typeof value === 'bigint' ? value : BigInt(value));
        cursor += 8;
      }
    }
    function encode(_input) {
      var _a, _b;
      const encodeStack = [_input];
      while (encodeStack.length) {
        const input = encodeStack.pop();
        ensureSpace(typeof input === 'string' ? input.length * 4 : 64);
        if (typeof input === 'string') {
          if (USE_BUFFER2) {
            encodeHeader(majorUtf8String, Buffer.byteLength(input));
            cursor += data.write(input, cursor);
          } else {
            const bytes = (0, import_util_utf82.fromUtf8)(input);
            encodeHeader(majorUtf8String, bytes.byteLength);
            data.set(bytes, cursor);
            cursor += bytes.byteLength;
          }
          continue;
        } else if (typeof input === 'number') {
          if (Number.isInteger(input)) {
            const nonNegative = input >= 0;
            const major = nonNegative ? majorUint64 : majorNegativeInt64;
            const value = nonNegative ? input : -input - 1;
            if (value < 24) {
              data[cursor++] = (major << 5) | value;
            } else if (value < 256) {
              data[cursor++] = (major << 5) | 24;
              data[cursor++] = value;
            } else if (value < 65536) {
              data[cursor++] = (major << 5) | extendedFloat16;
              data[cursor++] = value >> 8;
              data[cursor++] = value;
            } else if (value < 4294967296) {
              data[cursor++] = (major << 5) | extendedFloat32;
              dataView2.setUint32(cursor, value);
              cursor += 4;
            } else {
              data[cursor++] = (major << 5) | extendedFloat64;
              dataView2.setBigUint64(cursor, BigInt(value));
              cursor += 8;
            }
            continue;
          }
          data[cursor++] = (majorSpecial << 5) | extendedFloat64;
          dataView2.setFloat64(cursor, input);
          cursor += 8;
          continue;
        } else if (typeof input === 'bigint') {
          const nonNegative = input >= 0;
          const major = nonNegative ? majorUint64 : majorNegativeInt64;
          const value = nonNegative ? input : -input - BigInt(1);
          const n = Number(value);
          if (n < 24) {
            data[cursor++] = (major << 5) | n;
          } else if (n < 256) {
            data[cursor++] = (major << 5) | 24;
            data[cursor++] = n;
          } else if (n < 65536) {
            data[cursor++] = (major << 5) | extendedFloat16;
            data[cursor++] = n >> 8;
            data[cursor++] = n & 255;
          } else if (n < 4294967296) {
            data[cursor++] = (major << 5) | extendedFloat32;
            dataView2.setUint32(cursor, n);
            cursor += 4;
          } else if (value < BigInt('18446744073709551616')) {
            data[cursor++] = (major << 5) | extendedFloat64;
            dataView2.setBigUint64(cursor, value);
            cursor += 8;
          } else {
            const binaryBigInt = value.toString(2);
            const bigIntBytes = new Uint8Array(Math.ceil(binaryBigInt.length / 8));
            let b = value;
            let i = 0;
            while (bigIntBytes.byteLength - ++i >= 0) {
              bigIntBytes[bigIntBytes.byteLength - i] = Number(b & BigInt(255));
              b >>= BigInt(8);
            }
            ensureSpace(bigIntBytes.byteLength * 2);
            data[cursor++] = nonNegative ? 194 : 195;
            if (USE_BUFFER2) {
              encodeHeader(majorUnstructuredByteString, Buffer.byteLength(bigIntBytes));
            } else {
              encodeHeader(majorUnstructuredByteString, bigIntBytes.byteLength);
            }
            data.set(bigIntBytes, cursor);
            cursor += bigIntBytes.byteLength;
          }
          continue;
        } else if (input === null) {
          data[cursor++] = (majorSpecial << 5) | specialNull;
          continue;
        } else if (typeof input === 'boolean') {
          data[cursor++] = (majorSpecial << 5) | (input ? specialTrue : specialFalse);
          continue;
        } else if (typeof input === 'undefined') {
          throw new Error('@smithy/core/cbor: client may not serialize undefined value.');
        } else if (Array.isArray(input)) {
          for (let i = input.length - 1; i >= 0; --i) {
            encodeStack.push(input[i]);
          }
          encodeHeader(majorList, input.length);
          continue;
        } else if (typeof input.byteLength === 'number') {
          ensureSpace(input.length * 2);
          encodeHeader(majorUnstructuredByteString, input.length);
          data.set(input, cursor);
          cursor += input.byteLength;
          continue;
        } else if (typeof input === 'object') {
          if (input instanceof import_serde2.NumericValue) {
            const decimalIndex = input.string.indexOf('.');
            const exponent = decimalIndex === -1 ? 0 : decimalIndex - input.string.length + 1;
            const mantissa = BigInt(input.string.replace('.', ''));
            data[cursor++] = 196;
            encodeStack.push(mantissa);
            encodeStack.push(exponent);
            encodeHeader(majorList, 2);
            continue;
          }
          if (input[tagSymbol]) {
            if ('tag' in input && 'value' in input) {
              encodeStack.push(input.value);
              encodeHeader(majorTag, input.tag);
              continue;
            } else {
              throw new Error(
                "tag encountered with missing fields, need 'tag' and 'value', found: " + JSON.stringify(input)
              );
            }
          }
          const keys = Object.keys(input);
          for (let i = keys.length - 1; i >= 0; --i) {
            const key = keys[i];
            encodeStack.push(input[key]);
            encodeStack.push(key);
          }
          encodeHeader(majorMap, keys.length);
          continue;
        }
        throw new Error(
          `data type ${
            (_b = (_a = input == null ? void 0 : input.constructor) == null ? void 0 : _a.name) != null
              ? _b
              : typeof input
          } not compatible for encoding.`
        );
      }
    }
    var cbor = {
      deserialize(payload2) {
        setPayload(payload2);
        return decode(0, payload2.length);
      },
      serialize(input) {
        try {
          encode(input);
          return toUint8Array();
        } catch (e) {
          toUint8Array();
          throw e;
        }
      },
      resizeEncodingBuffer(size) {
        resize(size);
      },
    };
    var import_protocols = require_protocols2();
    var import_protocol_http = require_dist_cjs2();
    var import_util_body_length_browser = require_dist_cjs25();
    var parseCborBody = (streamBody, context) => {
      return (0, import_protocols.collectBody)(streamBody, context).then(async (bytes) => {
        if (bytes.length) {
          try {
            return cbor.deserialize(bytes);
          } catch (e) {
            Object.defineProperty(e, '$responseBodyText', {
              value: context.utf8Encoder(bytes),
            });
            throw e;
          }
        }
        return {};
      });
    };
    var dateToTag = (date) => {
      return tag({
        tag: 1,
        value: date.getTime() / 1e3,
      });
    };
    var parseCborErrorBody = async (errorBody, context) => {
      var _a;
      const value = await parseCborBody(errorBody, context);
      value.message = (_a = value.message) != null ? _a : value.Message;
      return value;
    };
    var loadSmithyRpcV2CborErrorCode = (output, data2) => {
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === 'number') {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(',') >= 0) {
          cleanValue = cleanValue.split(',')[0];
        }
        if (cleanValue.indexOf(':') >= 0) {
          cleanValue = cleanValue.split(':')[0];
        }
        if (cleanValue.indexOf('#') >= 0) {
          cleanValue = cleanValue.split('#')[1];
        }
        return cleanValue;
      };
      if (data2['__type'] !== void 0) {
        return sanitizeErrorCode(data2['__type']);
      }
      const codeKey = Object.keys(data2).find((key) => key.toLowerCase() === 'code');
      if (codeKey && data2[codeKey] !== void 0) {
        return sanitizeErrorCode(data2[codeKey]);
      }
    };
    var checkCborResponse = (response) => {
      if (String(response.headers['smithy-protocol']).toLowerCase() !== 'rpc-v2-cbor') {
        throw new Error('Malformed RPCv2 CBOR response, status: ' + response.statusCode);
      }
    };
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = 'https', port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: 'POST',
        path: basePath.endsWith('/') ? basePath.slice(0, -1) + path : basePath + path,
        headers: __spreadValues({}, headers),
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
        try {
          contents.headers['content-length'] = String((0, import_util_body_length_browser.calculateBodyLength)(body));
        } catch (e) {}
      }
      return new import_protocol_http.HttpRequest(contents);
    };
    var import_protocols2 = require_protocols2();
    var import_schema2 = require_schema2();
    var import_util_middleware = require_dist_cjs6();
    var import_schema = require_schema2();
    var import_serde3 = require_serde2();
    var import_util_base64 = require_dist_cjs11();
    var CborCodec = class {
      createSerializer() {
        const serializer = new CborShapeSerializer();
        serializer.setSerdeContext(this.serdeContext);
        return serializer;
      }
      createDeserializer() {
        const deserializer = new CborShapeDeserializer();
        deserializer.setSerdeContext(this.serdeContext);
        return deserializer;
      }
      setSerdeContext(serdeContext) {
        this.serdeContext = serdeContext;
      }
    };
    var CborShapeSerializer = class {
      setSerdeContext(serdeContext) {
        this.serdeContext = serdeContext;
      }
      write(schema, value) {
        this.value = this.serialize(schema, value);
      }
      serialize(schema, source) {
        var _a, _b;
        const ns = import_schema.NormalizedSchema.of(schema);
        if (source == null) {
          if (ns.isIdempotencyToken()) {
            return (0, import_serde3.generateIdempotencyToken)();
          }
          return source;
        }
        if (ns.isBlobSchema()) {
          if (typeof source === 'string') {
            return (
              (_b = (_a = this.serdeContext) == null ? void 0 : _a.base64Decoder) != null
                ? _b
                : import_util_base64.fromBase64
            )(source);
          }
          return source;
        }
        if (ns.isTimestampSchema()) {
          if (typeof source === 'number' || typeof source === 'bigint') {
            return dateToTag(new Date((Number(source) / 1e3) | 0));
          }
          return dateToTag(source);
        }
        if (typeof source === 'function' || typeof source === 'object') {
          const sourceObject = source;
          if (ns.isListSchema() && Array.isArray(sourceObject)) {
            const sparse = !!ns.getMergedTraits().sparse;
            const newArray = [];
            let i = 0;
            for (const item of sourceObject) {
              const value = this.serialize(ns.getValueSchema(), item);
              if (value != null || sparse) {
                newArray[i++] = value;
              }
            }
            return newArray;
          }
          if (sourceObject instanceof Date) {
            return dateToTag(sourceObject);
          }
          const newObject = {};
          if (ns.isMapSchema()) {
            const sparse = !!ns.getMergedTraits().sparse;
            for (const key of Object.keys(sourceObject)) {
              const value = this.serialize(ns.getValueSchema(), sourceObject[key]);
              if (value != null || sparse) {
                newObject[key] = value;
              }
            }
          } else if (ns.isStructSchema()) {
            for (const [key, memberSchema] of ns.structIterator()) {
              const value = this.serialize(memberSchema, sourceObject[key]);
              if (value != null) {
                newObject[key] = value;
              }
            }
          } else if (ns.isDocumentSchema()) {
            for (const key of Object.keys(sourceObject)) {
              newObject[key] = this.serialize(ns.getValueSchema(), sourceObject[key]);
            }
          }
          return newObject;
        }
        return source;
      }
      flush() {
        const buffer = cbor.serialize(this.value);
        this.value = void 0;
        return buffer;
      }
    };
    var CborShapeDeserializer = class {
      setSerdeContext(serdeContext) {
        this.serdeContext = serdeContext;
      }
      read(schema, bytes) {
        const data2 = cbor.deserialize(bytes);
        return this.readValue(schema, data2);
      }
      readValue(_schema, value) {
        var _a, _b;
        const ns = import_schema.NormalizedSchema.of(_schema);
        if (ns.isTimestampSchema() && typeof value === 'number') {
          return (0, import_serde3.parseEpochTimestamp)(value);
        }
        if (ns.isBlobSchema()) {
          if (typeof value === 'string') {
            return (
              (_b = (_a = this.serdeContext) == null ? void 0 : _a.base64Decoder) != null
                ? _b
                : import_util_base64.fromBase64
            )(value);
          }
          return value;
        }
        if (
          typeof value === 'undefined' ||
          typeof value === 'boolean' ||
          typeof value === 'number' ||
          typeof value === 'string' ||
          typeof value === 'bigint' ||
          typeof value === 'symbol'
        ) {
          return value;
        } else if (typeof value === 'function' || typeof value === 'object') {
          if (value === null) {
            return null;
          }
          if ('byteLength' in value) {
            return value;
          }
          if (value instanceof Date) {
            return value;
          }
          if (ns.isDocumentSchema()) {
            return value;
          }
          if (ns.isListSchema()) {
            const newArray = [];
            const memberSchema = ns.getValueSchema();
            const sparse = !!ns.getMergedTraits().sparse;
            for (const item of value) {
              const itemValue = this.readValue(memberSchema, item);
              if (itemValue != null || sparse) {
                newArray.push(itemValue);
              }
            }
            return newArray;
          }
          const newObject = {};
          if (ns.isMapSchema()) {
            const sparse = !!ns.getMergedTraits().sparse;
            const targetSchema = ns.getValueSchema();
            for (const key of Object.keys(value)) {
              const itemValue = this.readValue(targetSchema, value[key]);
              if (itemValue != null || sparse) {
                newObject[key] = itemValue;
              }
            }
          } else if (ns.isStructSchema()) {
            for (const [key, memberSchema] of ns.structIterator()) {
              newObject[key] = this.readValue(memberSchema, value[key]);
            }
          }
          return newObject;
        } else {
          return value;
        }
      }
    };
    var SmithyRpcV2CborProtocol = class extends import_protocols2.RpcProtocol {
      constructor({ defaultNamespace }) {
        super({ defaultNamespace });
        this.codec = new CborCodec();
        this.serializer = this.codec.createSerializer();
        this.deserializer = this.codec.createDeserializer();
      }
      getShapeId() {
        return 'smithy.protocols#rpcv2Cbor';
      }
      getPayloadCodec() {
        return this.codec;
      }
      async serializeRequest(operationSchema, input, context) {
        const request = await super.serializeRequest(operationSchema, input, context);
        Object.assign(request.headers, {
          'content-type': this.getDefaultContentType(),
          'smithy-protocol': 'rpc-v2-cbor',
          accept: this.getDefaultContentType(),
        });
        if ((0, import_schema2.deref)(operationSchema.input) === 'unit') {
          delete request.body;
          delete request.headers['content-type'];
        } else {
          if (!request.body) {
            this.serializer.write(15, {});
            request.body = this.serializer.flush();
          }
          try {
            request.headers['content-length'] = String(request.body.byteLength);
          } catch (e) {}
        }
        const { service, operation } = (0, import_util_middleware.getSmithyContext)(context);
        const path = `/service/${service}/operation/${operation}`;
        if (request.path.endsWith('/')) {
          request.path += path.slice(1);
        } else {
          request.path += path;
        }
        return request;
      }
      async deserializeResponse(operationSchema, context, response) {
        return super.deserializeResponse(operationSchema, context, response);
      }
      async handleError(operationSchema, context, response, dataObject, metadata) {
        var _a, _b, _c;
        const errorName = (_a = loadSmithyRpcV2CborErrorCode(response, dataObject)) != null ? _a : 'Unknown';
        let namespace = this.options.defaultNamespace;
        if (errorName.includes('#')) {
          [namespace] = errorName.split('#');
        }
        const errorMetadata = {
          $metadata: metadata,
          $response: response,
          $fault: response.statusCode <= 500 ? 'client' : 'server',
        };
        const registry = import_schema2.TypeRegistry.for(namespace);
        let errorSchema;
        try {
          errorSchema = registry.getSchema(errorName);
        } catch (e) {
          if (dataObject.Message) {
            dataObject.message = dataObject.Message;
          }
          const baseExceptionSchema = import_schema2.TypeRegistry.for(
            'smithy.ts.sdk.synthetic.' + namespace
          ).getBaseException();
          if (baseExceptionSchema) {
            const ErrorCtor = baseExceptionSchema.ctor;
            throw Object.assign(new ErrorCtor({ name: errorName }), errorMetadata, dataObject);
          }
          throw Object.assign(new Error(errorName), errorMetadata, dataObject);
        }
        const ns = import_schema2.NormalizedSchema.of(errorSchema);
        const message = (_c = (_b = dataObject.message) != null ? _b : dataObject.Message) != null ? _c : 'Unknown';
        const exception = new errorSchema.ctor(message);
        const output = {};
        for (const [name, member] of ns.structIterator()) {
          output[name] = this.deserializer.readValue(member, dataObject[name]);
        }
        throw Object.assign(
          exception,
          errorMetadata,
          {
            $fault: ns.getMergedTraits().error,
            message,
          },
          output
        );
      }
      getDefaultContentType() {
        return 'application/cbor';
      }
    };
  },
});

// node_modules/@smithy/core/cbor.js
var require_cbor2 = __commonJS({
  'node_modules/@smithy/core/cbor.js'(exports, module2) {
    module2.exports = require_cbor();
  },
});

// node_modules/@smithy/middleware-stack/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  'node_modules/@smithy/middleware-stack/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      constructStack: () => constructStack,
    });
    module2.exports = __toCommonJS(index_exports);
    var getAllAliases = /* @__PURE__ */ __name((name, aliases) => {
      const _aliases = [];
      if (name) {
        _aliases.push(name);
      }
      if (aliases) {
        for (const alias of aliases) {
          _aliases.push(alias);
        }
      }
      return _aliases;
    }, 'getAllAliases');
    var getMiddlewareNameWithAliases = /* @__PURE__ */ __name((name, aliases) => {
      return `${name || 'anonymous'}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(',')})` : ''}`;
    }, 'getMiddlewareNameWithAliases');
    var constructStack = /* @__PURE__ */ __name(() => {
      let absoluteEntries = [];
      let relativeEntries = [];
      let identifyOnResolve = false;
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = /* @__PURE__ */ __name(
        (entries) =>
          entries.sort(
            (a, b) =>
              stepWeights[b.step] - stepWeights[a.step] ||
              priorityWeights[b.priority || 'normal'] - priorityWeights[a.priority || 'normal']
          ),
        'sort'
      );
      const removeByName = /* @__PURE__ */ __name((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          const aliases = getAllAliases(entry.name, entry.aliases);
          if (aliases.includes(toRemove)) {
            isRemoved = true;
            for (const alias of aliases) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        }, 'filterCb');
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, 'removeByName');
      const removeByReference = /* @__PURE__ */ __name((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            for (const alias of getAllAliases(entry.name, entry.aliases)) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        }, 'filterCb');
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, 'removeByReference');
      const cloneTo = /* @__PURE__ */ __name((toStack) => {
        var _a;
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, __spreadValues({}, entry));
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, __spreadValues({}, entry));
        });
        (_a = toStack.identifyOnResolve) == null ? void 0 : _a.call(toStack, stack.identifyOnResolve());
        return toStack;
      }, 'cloneTo');
      const expandRelativeMiddlewareList = /* @__PURE__ */ __name((from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      }, 'expandRelativeMiddlewareList');
      const getMiddlewareList = /* @__PURE__ */ __name((debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = __spreadProps(__spreadValues({}, entry), {
            before: [],
            after: [],
          });
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = __spreadProps(__spreadValues({}, entry), {
            before: [],
            after: [],
          });
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(
                `${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(
                  entry.name,
                  entry.aliases
                )} middleware ${entry.relation} ${entry.toMiddleware}`
              );
            }
            if (entry.relation === 'after') {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === 'before') {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries)
          .map(expandRelativeMiddlewareList)
          .reduce((wholeList, expandedMiddlewareList) => {
            wholeList.push(...expandedMiddlewareList);
            return wholeList;
          }, []);
        return mainChain;
      }, 'getMiddlewareList');
      const stack = {
        add: /* @__PURE__ */ __name((middleware, options = {}) => {
          const { name, override, aliases: _aliases } = options;
          const entry = __spreadValues(
            {
              step: 'initialize',
              priority: 'normal',
              middleware,
            },
            options
          );
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = absoluteEntries.findIndex((entry2) => {
                  var _a;
                  return (
                    entry2.name === alias || ((_a = entry2.aliases) == null ? void 0 : _a.some((a) => a === alias))
                  );
                });
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = absoluteEntries[toOverrideIndex];
                if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                  throw new Error(
                    `"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ${
                      toOverride.priority
                    } priority in ${toOverride.step} step cannot be overridden by "${getMiddlewareNameWithAliases(
                      name,
                      _aliases
                    )}" middleware with ${entry.priority} priority in ${entry.step} step.`
                  );
                }
                absoluteEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          absoluteEntries.push(entry);
        }, 'add'),
        addRelativeTo: /* @__PURE__ */ __name((middleware, options) => {
          const { name, override, aliases: _aliases } = options;
          const entry = __spreadValues(
            {
              middleware,
            },
            options
          );
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = relativeEntries.findIndex((entry2) => {
                  var _a;
                  return (
                    entry2.name === alias || ((_a = entry2.aliases) == null ? void 0 : _a.some((a) => a === alias))
                  );
                });
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = relativeEntries[toOverrideIndex];
                if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                  throw new Error(
                    `"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ${
                      toOverride.relation
                    } "${toOverride.toMiddleware}" middleware cannot be overridden by "${getMiddlewareNameWithAliases(
                      name,
                      _aliases
                    )}" middleware ${entry.relation} "${entry.toMiddleware}" middleware.`
                  );
                }
                relativeEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          relativeEntries.push(entry);
        }, 'addRelativeTo'),
        clone: /* @__PURE__ */ __name(() => cloneTo(constructStack()), 'clone'),
        use: /* @__PURE__ */ __name((plugin) => {
          plugin.applyToStack(stack);
        }, 'use'),
        remove: /* @__PURE__ */ __name((toRemove) => {
          if (typeof toRemove === 'string') return removeByName(toRemove);
          else return removeByReference(toRemove);
        }, 'remove'),
        removeByTag: /* @__PURE__ */ __name((toRemove) => {
          let isRemoved = false;
          const filterCb = /* @__PURE__ */ __name((entry) => {
            const { tags, name, aliases: _aliases } = entry;
            if (tags && tags.includes(toRemove)) {
              const aliases = getAllAliases(name, _aliases);
              for (const alias of aliases) {
                entriesNameSet.delete(alias);
              }
              isRemoved = true;
              return false;
            }
            return true;
          }, 'filterCb');
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        }, 'removeByTag'),
        concat: /* @__PURE__ */ __name((from) => {
          var _a, _b;
          const cloned = cloneTo(constructStack());
          cloned.use(from);
          cloned.identifyOnResolve(
            identifyOnResolve ||
              cloned.identifyOnResolve() ||
              ((_b = (_a = from.identifyOnResolve) == null ? void 0 : _a.call(from)) != null ? _b : false)
          );
          return cloned;
        }, 'concat'),
        applyToStack: cloneTo,
        identify: /* @__PURE__ */ __name(() => {
          return getMiddlewareList(true).map((mw) => {
            var _a;
            const step = (_a = mw.step) != null ? _a : mw.relation + ' ' + mw.toMiddleware;
            return getMiddlewareNameWithAliases(mw.name, mw.aliases) + ' - ' + step;
          });
        }, 'identify'),
        identifyOnResolve(toggle) {
          if (typeof toggle === 'boolean') identifyOnResolve = toggle;
          return identifyOnResolve;
        },
        resolve: /* @__PURE__ */ __name((handler, context) => {
          for (const middleware of getMiddlewareList()
            .map((entry) => entry.middleware)
            .reverse()) {
            handler = middleware(handler, context);
          }
          if (identifyOnResolve) {
            console.log(stack.identify());
          }
          return handler;
        }, 'resolve'),
      };
      return stack;
    }, 'constructStack');
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1,
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1,
    };
  },
});

// node_modules/@smithy/smithy-client/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  'node_modules/@smithy/smithy-client/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (
      __copyProps2(target, mod, 'default'), secondTarget && __copyProps2(secondTarget, mod, 'default')
    );
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      Client: () => Client,
      Command: () => Command,
      NoOpLogger: () => NoOpLogger,
      SENSITIVE_STRING: () => SENSITIVE_STRING2,
      ServiceException: () => ServiceException,
      _json: () => _json,
      collectBody: () => import_protocols.collectBody,
      convertMap: () => convertMap,
      createAggregatedClient: () => createAggregatedClient,
      decorateServiceException: () => decorateServiceException,
      emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
      extendedEncodeURIComponent: () => import_protocols.extendedEncodeURIComponent,
      getArrayIfSingleItem: () => getArrayIfSingleItem,
      getDefaultClientConfiguration: () => getDefaultClientConfiguration,
      getDefaultExtensionConfiguration: () => getDefaultExtensionConfiguration,
      getValueFromTextNode: () => getValueFromTextNode,
      isSerializableHeaderValue: () => isSerializableHeaderValue,
      loadConfigsForDefaultMode: () => loadConfigsForDefaultMode,
      map: () => map,
      resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig,
      resolvedPath: () => import_protocols.resolvedPath,
      serializeDateTime: () => serializeDateTime,
      serializeFloat: () => serializeFloat,
      take: () => take,
      throwDefaultError: () => throwDefaultError,
      withBaseException: () => withBaseException,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_middleware_stack = require_dist_cjs26();
    var _a;
    var Client =
      ((_a = class {
        constructor(config) {
          this.config = config;
          this.middlewareStack = (0, import_middleware_stack.constructStack)();
        }
        send(command, optionsOrCb, cb) {
          const options = typeof optionsOrCb !== 'function' ? optionsOrCb : void 0;
          const callback = typeof optionsOrCb === 'function' ? optionsOrCb : cb;
          const useHandlerCache = options === void 0 && this.config.cacheMiddleware === true;
          let handler;
          if (useHandlerCache) {
            if (!this.handlers) {
              this.handlers = /* @__PURE__ */ new WeakMap();
            }
            const handlers = this.handlers;
            if (handlers.has(command.constructor)) {
              handler = handlers.get(command.constructor);
            } else {
              handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
              handlers.set(command.constructor, handler);
            }
          } else {
            delete this.handlers;
            handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
          }
          if (callback) {
            handler(command)
              .then(
                (result) => callback(null, result.output),
                (err) => callback(err)
              )
              .catch(() => {});
          } else {
            return handler(command).then((result) => result.output);
          }
        }
        destroy() {
          var _a6, _b, _c;
          (_c = (_b = (_a6 = this.config) == null ? void 0 : _a6.requestHandler) == null ? void 0 : _b.destroy) == null
            ? void 0
            : _c.call(_b);
          delete this.handlers;
        }
      }),
      (() => {
        __name(_a, 'Client');
      })(),
      _a);
    var import_protocols = require_protocols2();
    var import_types = require_dist_cjs();
    var import_schema = require_schema2();
    var SENSITIVE_STRING = '***SensitiveInformation***';
    function schemaLogFilter(schema, data) {
      if (data == null) {
        return data;
      }
      const ns = import_schema.NormalizedSchema.of(schema);
      if (ns.getMergedTraits().sensitive) {
        return SENSITIVE_STRING;
      }
      if (ns.isListSchema()) {
        const isSensitive = !!ns.getValueSchema().getMergedTraits().sensitive;
        if (isSensitive) {
          return SENSITIVE_STRING;
        }
      } else if (ns.isMapSchema()) {
        const isSensitive =
          !!ns.getKeySchema().getMergedTraits().sensitive || !!ns.getValueSchema().getMergedTraits().sensitive;
        if (isSensitive) {
          return SENSITIVE_STRING;
        }
      } else if (ns.isStructSchema() && typeof data === 'object') {
        const object = data;
        const newObject = {};
        for (const [member, memberNs] of ns.structIterator()) {
          if (object[member] != null) {
            newObject[member] = schemaLogFilter(memberNs, object[member]);
          }
        }
        return newObject;
      }
      return data;
    }
    __name(schemaLogFilter, 'schemaLogFilter');
    var _a2;
    var Command =
      ((_a2 = class {
        constructor() {
          this.middlewareStack = (0, import_middleware_stack.constructStack)();
        }
        static classBuilder() {
          return new ClassBuilder();
        }
        resolveMiddlewareWithContext(
          clientStack,
          configuration,
          options,
          {
            middlewareFn,
            clientName,
            commandName,
            inputFilterSensitiveLog,
            outputFilterSensitiveLog,
            smithyContext,
            additionalContext,
            CommandCtor,
          }
        ) {
          for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
            this.middlewareStack.use(mw);
          }
          const stack = clientStack.concat(this.middlewareStack);
          const { logger: logger2 } = configuration;
          const handlerExecutionContext = __spreadValues(
            {
              logger: logger2,
              clientName,
              commandName,
              inputFilterSensitiveLog,
              outputFilterSensitiveLog,
              [import_types.SMITHY_CONTEXT_KEY]: __spreadValues(
                {
                  commandInstance: this,
                },
                smithyContext
              ),
            },
            additionalContext
          );
          const { requestHandler } = configuration;
          return stack.resolve(
            (request) => requestHandler.handle(request.request, options || {}),
            handlerExecutionContext
          );
        }
      }),
      (() => {
        __name(_a2, 'Command');
      })(),
      _a2);
    var _a3;
    var ClassBuilder =
      ((_a3 = class {
        constructor() {
          this._init = /* @__PURE__ */ __name(() => {}, '_init');
          this._ep = {};
          this._middlewareFn = /* @__PURE__ */ __name(() => [], '_middlewareFn');
          this._commandName = '';
          this._clientName = '';
          this._additionalContext = {};
          this._smithyContext = {};
          this._inputFilterSensitiveLog = void 0;
          this._outputFilterSensitiveLog = void 0;
          this._serializer = null;
          this._deserializer = null;
        }
        init(cb) {
          this._init = cb;
        }
        ep(endpointParameterInstructions) {
          this._ep = endpointParameterInstructions;
          return this;
        }
        m(middlewareSupplier) {
          this._middlewareFn = middlewareSupplier;
          return this;
        }
        s(service, operation, smithyContext = {}) {
          this._smithyContext = __spreadValues(
            {
              service,
              operation,
            },
            smithyContext
          );
          return this;
        }
        c(additionalContext = {}) {
          this._additionalContext = additionalContext;
          return this;
        }
        n(clientName, commandName) {
          this._clientName = clientName;
          this._commandName = commandName;
          return this;
        }
        f(inputFilter = (_) => _, outputFilter = (_) => _) {
          this._inputFilterSensitiveLog = inputFilter;
          this._outputFilterSensitiveLog = outputFilter;
          return this;
        }
        ser(serializer) {
          this._serializer = serializer;
          return this;
        }
        de(deserializer) {
          this._deserializer = deserializer;
          return this;
        }
        sc(operation) {
          this._operationSchema = operation;
          this._smithyContext.operationSchema = operation;
          return this;
        }
        build() {
          var _a6;
          const closure = this;
          let CommandRef;
          return (CommandRef =
            ((_a6 = class extends Command {
              constructor(...[input]) {
                super();
                this.serialize = closure._serializer;
                this.deserialize = closure._deserializer;
                this.input = input != null ? input : {};
                closure._init(this);
                this.schema = closure._operationSchema;
              }
              static getEndpointParameterInstructions() {
                return closure._ep;
              }
              resolveMiddleware(stack, configuration, options) {
                var _a7, _b;
                return this.resolveMiddlewareWithContext(stack, configuration, options, {
                  CommandCtor: CommandRef,
                  middlewareFn: closure._middlewareFn,
                  clientName: closure._clientName,
                  commandName: closure._commandName,
                  inputFilterSensitiveLog:
                    (_a7 = closure._inputFilterSensitiveLog) != null
                      ? _a7
                      : closure._operationSchema
                      ? schemaLogFilter.bind(null, closure._operationSchema.input)
                      : (_) => _,
                  outputFilterSensitiveLog:
                    (_b = closure._outputFilterSensitiveLog) != null
                      ? _b
                      : closure._operationSchema
                      ? schemaLogFilter.bind(null, closure._operationSchema.output)
                      : (_) => _,
                  smithyContext: closure._smithyContext,
                  additionalContext: closure._additionalContext,
                });
              }
            }),
            (() => {
              __name(_a6, 'CommandRef');
            })(),
            _a6));
        }
      }),
      (() => {
        __name(_a3, 'ClassBuilder');
      })(),
      _a3);
    var SENSITIVE_STRING2 = '***SensitiveInformation***';
    var createAggregatedClient = /* @__PURE__ */ __name((commands, Client2) => {
      for (const command of Object.keys(commands)) {
        const CommandCtor = commands[command];
        const methodImpl = /* @__PURE__ */ __name(async function (args, optionsOrCb, cb) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === 'function') {
            this.send(command2, optionsOrCb);
          } else if (typeof cb === 'function') {
            if (typeof optionsOrCb !== 'object') throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb);
          } else {
            return this.send(command2, optionsOrCb);
          }
        }, 'methodImpl');
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, '');
        Client2.prototype[methodName] = methodImpl;
      }
    }, 'createAggregatedClient');
    var _a4;
    var ServiceException =
      ((_a4 = class extends Error {
        constructor(options) {
          super(options.message);
          Object.setPrototypeOf(this, Object.getPrototypeOf(this).constructor.prototype);
          this.name = options.name;
          this.$fault = options.$fault;
          this.$metadata = options.$metadata;
        }
        static isInstance(value) {
          if (!value) return false;
          const candidate = value;
          return (
            _a4.prototype.isPrototypeOf(candidate) ||
            (Boolean(candidate.$fault) &&
              Boolean(candidate.$metadata) &&
              (candidate.$fault === 'client' || candidate.$fault === 'server'))
          );
        }
        static [Symbol.hasInstance](instance) {
          if (!instance) return false;
          const candidate = instance;
          if (this === _a4) {
            return _a4.isInstance(instance);
          }
          if (_a4.isInstance(instance)) {
            if (candidate.name && this.name) {
              return this.prototype.isPrototypeOf(instance) || candidate.name === this.name;
            }
            return this.prototype.isPrototypeOf(instance);
          }
          return false;
        }
      }),
      (() => {
        __name(_a4, 'ServiceException');
      })(),
      _a4);
    var decorateServiceException = /* @__PURE__ */ __name((exception, additions = {}) => {
      Object.entries(additions)
        .filter(([, v]) => v !== void 0)
        .forEach(([k, v]) => {
          if (exception[k] == void 0 || exception[k] === '') {
            exception[k] = v;
          }
        });
      const message = exception.message || exception.Message || 'UnknownError';
      exception.message = message;
      delete exception.Message;
      return exception;
    }, 'decorateServiceException');
    var throwDefaultError = /* @__PURE__ */ __name(({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + '' : void 0;
      const response = new exceptionCtor({
        name:
          (parsedBody == null ? void 0 : parsedBody.code) ||
          (parsedBody == null ? void 0 : parsedBody.Code) ||
          errorCode ||
          statusCode ||
          'UnknownError',
        $fault: 'client',
        $metadata,
      });
      throw decorateServiceException(response, parsedBody);
    }, 'throwDefaultError');
    var withBaseException = /* @__PURE__ */ __name((ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    }, 'withBaseException');
    var deserializeMetadata = /* @__PURE__ */ __name((output) => {
      var _a6, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId:
          (_b = (_a6 = output.headers['x-amzn-requestid']) != null ? _a6 : output.headers['x-amzn-request-id']) != null
            ? _b
            : output.headers['x-amz-request-id'],
        extendedRequestId: output.headers['x-amz-id-2'],
        cfId: output.headers['x-amz-cf-id'],
      };
    }, 'deserializeMetadata');
    var loadConfigsForDefaultMode = /* @__PURE__ */ __name((mode) => {
      switch (mode) {
        case 'standard':
          return {
            retryMode: 'standard',
            connectionTimeout: 3100,
          };
        case 'in-region':
          return {
            retryMode: 'standard',
            connectionTimeout: 1100,
          };
        case 'cross-region':
          return {
            retryMode: 'standard',
            connectionTimeout: 3100,
          };
        case 'mobile':
          return {
            retryMode: 'standard',
            connectionTimeout: 3e4,
          };
        default:
          return {};
      }
    }, 'loadConfigsForDefaultMode');
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = /* @__PURE__ */ __name((version) => {
      if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf('.'))) < 16) {
        warningEmitted = true;
      }
    }, 'emitWarningIfUnsupportedVersion');
    var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const checksumAlgorithms = [];
      for (const id in import_types.AlgorithmId) {
        const algorithmId = import_types.AlgorithmId[id];
        if (runtimeConfig[algorithmId] === void 0) {
          continue;
        }
        checksumAlgorithms.push({
          algorithmId: /* @__PURE__ */ __name(() => algorithmId, 'algorithmId'),
          checksumConstructor: /* @__PURE__ */ __name(() => runtimeConfig[algorithmId], 'checksumConstructor'),
        });
      }
      return {
        addChecksumAlgorithm(algo) {
          checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return checksumAlgorithms;
        },
      };
    }, 'getChecksumConfiguration');
    var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    }, 'resolveChecksumRuntimeConfig');
    var getRetryConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return {
        setRetryStrategy(retryStrategy) {
          runtimeConfig.retryStrategy = retryStrategy;
        },
        retryStrategy() {
          return runtimeConfig.retryStrategy;
        },
      };
    }, 'getRetryConfiguration');
    var resolveRetryRuntimeConfig = /* @__PURE__ */ __name((retryStrategyConfiguration) => {
      const runtimeConfig = {};
      runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
      return runtimeConfig;
    }, 'resolveRetryRuntimeConfig');
    var getDefaultExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return Object.assign(getChecksumConfiguration(runtimeConfig), getRetryConfiguration(runtimeConfig));
    }, 'getDefaultExtensionConfiguration');
    var getDefaultClientConfiguration = getDefaultExtensionConfiguration;
    var resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return Object.assign(resolveChecksumRuntimeConfig(config), resolveRetryRuntimeConfig(config));
    }, 'resolveDefaultRuntimeConfig');
    var getArrayIfSingleItem = /* @__PURE__ */ __name(
      (mayBeArray) => (Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray]),
      'getArrayIfSingleItem'
    );
    var getValueFromTextNode = /* @__PURE__ */ __name((obj) => {
      const textNodeName = '#text';
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === 'object' && obj[key] !== null) {
          obj[key] = getValueFromTextNode(obj[key]);
        }
      }
      return obj;
    }, 'getValueFromTextNode');
    var isSerializableHeaderValue = /* @__PURE__ */ __name((value) => {
      return value != null;
    }, 'isSerializableHeaderValue');
    var _a5;
    var NoOpLogger =
      ((_a5 = class {
        trace() {}
        debug() {}
        info() {}
        warn() {}
        error() {}
      }),
      (() => {
        __name(_a5, 'NoOpLogger');
      })(),
      _a5);
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === 'undefined' && typeof arg2 === 'undefined') {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === 'function') {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        applyInstruction(target, null, instructions, key);
      }
      return target;
    }
    __name(map, 'map');
    var convertMap = /* @__PURE__ */ __name((target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    }, 'convertMap');
    var take = /* @__PURE__ */ __name((source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    }, 'take');
    var mapWithFilter = /* @__PURE__ */ __name((target, filter, instructions) => {
      return map(
        target,
        Object.entries(instructions).reduce((_instructions, [key, value]) => {
          if (Array.isArray(value)) {
            _instructions[key] = value;
          } else {
            if (typeof value === 'function') {
              _instructions[key] = [filter, value()];
            } else {
              _instructions[key] = [filter, value];
            }
          }
          return _instructions;
        }, {})
      );
    }, 'mapWithFilter');
    var applyInstruction = /* @__PURE__ */ __name((target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === 'function') {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (
          (typeof filter2 === 'function' && filter2(source[sourceKey])) ||
          (typeof filter2 !== 'function' && !!filter2)
        ) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === 'function') {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed =
          (typeof filter === 'function' && !!filter(void 0)) || (typeof filter !== 'function' && !!filter);
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed =
          (typeof filter === 'function' && !!filter(value)) || (typeof filter !== 'function' && !!filter);
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    }, 'applyInstruction');
    var nonNullish = /* @__PURE__ */ __name((_) => _ != null, 'nonNullish');
    var pass = /* @__PURE__ */ __name((_) => _, 'pass');
    var serializeFloat = /* @__PURE__ */ __name((value) => {
      if (value !== value) {
        return 'NaN';
      }
      switch (value) {
        case Infinity:
          return 'Infinity';
        case -Infinity:
          return '-Infinity';
        default:
          return value;
      }
    }, 'serializeFloat');
    var serializeDateTime = /* @__PURE__ */ __name(
      (date) => date.toISOString().replace('.000Z', 'Z'),
      'serializeDateTime'
    );
    var _json = /* @__PURE__ */ __name((obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_) => _ != null).map(_json);
      }
      if (typeof obj === 'object') {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = _json(obj[key]);
        }
        return target;
      }
      return obj;
    }, '_json');
    __reExport(index_exports, require_serde2(), module2.exports);
  },
});

// node_modules/fast-xml-parser/lib/fxp.cjs
var require_fxp = __commonJS({
  'node_modules/fast-xml-parser/lib/fxp.cjs'(exports, module2) {
    (() => {
      'use strict';
      var t = {
          d: (e2, n2) => {
            for (var i2 in n2)
              t.o(n2, i2) && !t.o(e2, i2) && Object.defineProperty(e2, i2, { enumerable: true, get: n2[i2] });
          },
          o: (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2),
          r: (t2) => {
            typeof Symbol != 'undefined' &&
              Symbol.toStringTag &&
              Object.defineProperty(t2, Symbol.toStringTag, { value: 'Module' }),
              Object.defineProperty(t2, '__esModule', { value: true });
          },
        },
        e = {};
      t.r(e), t.d(e, { XMLBuilder: () => ft, XMLParser: () => st, XMLValidator: () => mt });
      const n =
          ':A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD',
        i = new RegExp('^[' + n + '][' + n + '\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$');
      function s(t2, e2) {
        const n2 = [];
        let i2 = e2.exec(t2);
        for (; i2; ) {
          const s2 = [];
          s2.startIndex = e2.lastIndex - i2[0].length;
          const r2 = i2.length;
          for (let t3 = 0; t3 < r2; t3++) s2.push(i2[t3]);
          n2.push(s2), (i2 = e2.exec(t2));
        }
        return n2;
      }
      const r = function (t2) {
          return !(i.exec(t2) == null);
        },
        o = { allowBooleanAttributes: false, unpairedTags: [] };
      function a(t2, e2) {
        e2 = Object.assign({}, o, e2);
        const n2 = [];
        let i2 = false,
          s2 = false;
        t2[0] === '\uFEFF' && (t2 = t2.substr(1));
        for (let o2 = 0; o2 < t2.length; o2++)
          if (t2[o2] === '<' && t2[o2 + 1] === '?') {
            if (((o2 += 2), (o2 = u(t2, o2)), o2.err)) return o2;
          } else {
            if (t2[o2] !== '<') {
              if (l(t2[o2])) continue;
              return x('InvalidChar', "char '" + t2[o2] + "' is not expected.", N(t2, o2));
            }
            {
              let a2 = o2;
              if ((o2++, t2[o2] === '!')) {
                o2 = h(t2, o2);
                continue;
              }
              {
                let d2 = false;
                t2[o2] === '/' && ((d2 = true), o2++);
                let f2 = '';
                for (
                  ;
                  o2 < t2.length &&
                  t2[o2] !== '>' &&
                  t2[o2] !== ' ' &&
                  t2[o2] !== '	' &&
                  t2[o2] !== '\n' &&
                  t2[o2] !== '\r';
                  o2++
                )
                  f2 += t2[o2];
                if (
                  ((f2 = f2.trim()), f2[f2.length - 1] === '/' && ((f2 = f2.substring(0, f2.length - 1)), o2--), !r(f2))
                ) {
                  let e3;
                  return (
                    (e3 = f2.trim().length === 0 ? "Invalid space after '<'." : "Tag '" + f2 + "' is an invalid name."),
                    x('InvalidTag', e3, N(t2, o2))
                  );
                }
                const p2 = c(t2, o2);
                if (p2 === false) return x('InvalidAttr', "Attributes for '" + f2 + "' have open quote.", N(t2, o2));
                let b2 = p2.value;
                if (((o2 = p2.index), b2[b2.length - 1] === '/')) {
                  const n3 = o2 - b2.length;
                  b2 = b2.substring(0, b2.length - 1);
                  const s3 = g(b2, e2);
                  if (s3 !== true) return x(s3.err.code, s3.err.msg, N(t2, n3 + s3.err.line));
                  i2 = true;
                } else if (d2) {
                  if (!p2.tagClosed)
                    return x('InvalidTag', "Closing tag '" + f2 + "' doesn't have proper closing.", N(t2, o2));
                  if (b2.trim().length > 0)
                    return x(
                      'InvalidTag',
                      "Closing tag '" + f2 + "' can't have attributes or invalid starting.",
                      N(t2, a2)
                    );
                  if (n2.length === 0)
                    return x('InvalidTag', "Closing tag '" + f2 + "' has not been opened.", N(t2, a2));
                  {
                    const e3 = n2.pop();
                    if (f2 !== e3.tagName) {
                      let n3 = N(t2, e3.tagStartPos);
                      return x(
                        'InvalidTag',
                        "Expected closing tag '" +
                          e3.tagName +
                          "' (opened in line " +
                          n3.line +
                          ', col ' +
                          n3.col +
                          ") instead of closing tag '" +
                          f2 +
                          "'.",
                        N(t2, a2)
                      );
                    }
                    n2.length == 0 && (s2 = true);
                  }
                } else {
                  const r2 = g(b2, e2);
                  if (r2 !== true) return x(r2.err.code, r2.err.msg, N(t2, o2 - b2.length + r2.err.line));
                  if (s2 === true) return x('InvalidXml', 'Multiple possible root nodes found.', N(t2, o2));
                  e2.unpairedTags.indexOf(f2) !== -1 || n2.push({ tagName: f2, tagStartPos: a2 }), (i2 = true);
                }
                for (o2++; o2 < t2.length; o2++)
                  if (t2[o2] === '<') {
                    if (t2[o2 + 1] === '!') {
                      o2++, (o2 = h(t2, o2));
                      continue;
                    }
                    if (t2[o2 + 1] !== '?') break;
                    if (((o2 = u(t2, ++o2)), o2.err)) return o2;
                  } else if (t2[o2] === '&') {
                    const e3 = m(t2, o2);
                    if (e3 == -1) return x('InvalidChar', "char '&' is not expected.", N(t2, o2));
                    o2 = e3;
                  } else if (s2 === true && !l(t2[o2])) return x('InvalidXml', 'Extra text at the end', N(t2, o2));
                t2[o2] === '<' && o2--;
              }
            }
          }
        return i2
          ? n2.length == 1
            ? x('InvalidTag', "Unclosed tag '" + n2[0].tagName + "'.", N(t2, n2[0].tagStartPos))
            : !(n2.length > 0) ||
              x(
                'InvalidXml',
                "Invalid '" +
                  JSON.stringify(
                    n2.map((t3) => t3.tagName),
                    null,
                    4
                  ).replace(/\r?\n/g, '') +
                  "' found.",
                { line: 1, col: 1 }
              )
          : x('InvalidXml', 'Start tag expected.', 1);
      }
      function l(t2) {
        return t2 === ' ' || t2 === '	' || t2 === '\n' || t2 === '\r';
      }
      function u(t2, e2) {
        const n2 = e2;
        for (; e2 < t2.length; e2++)
          if (t2[e2] != '?' && t2[e2] != ' ');
          else {
            const i2 = t2.substr(n2, e2 - n2);
            if (e2 > 5 && i2 === 'xml')
              return x('InvalidXml', 'XML declaration allowed only at the start of the document.', N(t2, e2));
            if (t2[e2] == '?' && t2[e2 + 1] == '>') {
              e2++;
              break;
            }
          }
        return e2;
      }
      function h(t2, e2) {
        if (t2.length > e2 + 5 && t2[e2 + 1] === '-' && t2[e2 + 2] === '-') {
          for (e2 += 3; e2 < t2.length; e2++)
            if (t2[e2] === '-' && t2[e2 + 1] === '-' && t2[e2 + 2] === '>') {
              e2 += 2;
              break;
            }
        } else if (
          t2.length > e2 + 8 &&
          t2[e2 + 1] === 'D' &&
          t2[e2 + 2] === 'O' &&
          t2[e2 + 3] === 'C' &&
          t2[e2 + 4] === 'T' &&
          t2[e2 + 5] === 'Y' &&
          t2[e2 + 6] === 'P' &&
          t2[e2 + 7] === 'E'
        ) {
          let n2 = 1;
          for (e2 += 8; e2 < t2.length; e2++)
            if (t2[e2] === '<') n2++;
            else if (t2[e2] === '>' && (n2--, n2 === 0)) break;
        } else if (
          t2.length > e2 + 9 &&
          t2[e2 + 1] === '[' &&
          t2[e2 + 2] === 'C' &&
          t2[e2 + 3] === 'D' &&
          t2[e2 + 4] === 'A' &&
          t2[e2 + 5] === 'T' &&
          t2[e2 + 6] === 'A' &&
          t2[e2 + 7] === '['
        ) {
          for (e2 += 8; e2 < t2.length; e2++)
            if (t2[e2] === ']' && t2[e2 + 1] === ']' && t2[e2 + 2] === '>') {
              e2 += 2;
              break;
            }
        }
        return e2;
      }
      const d = '"',
        f = "'";
      function c(t2, e2) {
        let n2 = '',
          i2 = '',
          s2 = false;
        for (; e2 < t2.length; e2++) {
          if (t2[e2] === d || t2[e2] === f) i2 === '' ? (i2 = t2[e2]) : i2 !== t2[e2] || (i2 = '');
          else if (t2[e2] === '>' && i2 === '') {
            s2 = true;
            break;
          }
          n2 += t2[e2];
        }
        return i2 === '' && { value: n2, index: e2, tagClosed: s2 };
      }
      const p = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, 'g');
      function g(t2, e2) {
        const n2 = s(t2, p),
          i2 = {};
        for (let t3 = 0; t3 < n2.length; t3++) {
          if (n2[t3][1].length === 0)
            return x('InvalidAttr', "Attribute '" + n2[t3][2] + "' has no space in starting.", E(n2[t3]));
          if (n2[t3][3] !== void 0 && n2[t3][4] === void 0)
            return x('InvalidAttr', "Attribute '" + n2[t3][2] + "' is without value.", E(n2[t3]));
          if (n2[t3][3] === void 0 && !e2.allowBooleanAttributes)
            return x('InvalidAttr', "boolean attribute '" + n2[t3][2] + "' is not allowed.", E(n2[t3]));
          const s2 = n2[t3][2];
          if (!b(s2)) return x('InvalidAttr', "Attribute '" + s2 + "' is an invalid name.", E(n2[t3]));
          if (i2.hasOwnProperty(s2)) return x('InvalidAttr', "Attribute '" + s2 + "' is repeated.", E(n2[t3]));
          i2[s2] = 1;
        }
        return true;
      }
      function m(t2, e2) {
        if (t2[++e2] === ';') return -1;
        if (t2[e2] === '#')
          return (function (t3, e3) {
            let n3 = /\d/;
            for (t3[e3] === 'x' && (e3++, (n3 = /[\da-fA-F]/)); e3 < t3.length; e3++) {
              if (t3[e3] === ';') return e3;
              if (!t3[e3].match(n3)) break;
            }
            return -1;
          })(t2, ++e2);
        let n2 = 0;
        for (; e2 < t2.length; e2++, n2++)
          if (!(t2[e2].match(/\w/) && n2 < 20)) {
            if (t2[e2] === ';') break;
            return -1;
          }
        return e2;
      }
      function x(t2, e2, n2) {
        return { err: { code: t2, msg: e2, line: n2.line || n2, col: n2.col } };
      }
      function b(t2) {
        return r(t2);
      }
      function N(t2, e2) {
        const n2 = t2.substring(0, e2).split(/\r?\n/);
        return { line: n2.length, col: n2[n2.length - 1].length + 1 };
      }
      function E(t2) {
        return t2.startIndex + t2[1].length;
      }
      const v = {
        preserveOrder: false,
        attributeNamePrefix: '@_',
        attributesGroupName: false,
        textNodeName: '#text',
        ignoreAttributes: true,
        removeNSPrefix: false,
        allowBooleanAttributes: false,
        parseTagValue: true,
        parseAttributeValue: false,
        trimValues: true,
        cdataPropName: false,
        numberParseOptions: { hex: true, leadingZeros: true, eNotation: true },
        tagValueProcessor: function (t2, e2) {
          return e2;
        },
        attributeValueProcessor: function (t2, e2) {
          return e2;
        },
        stopNodes: [],
        alwaysCreateTextNode: false,
        isArray: () => false,
        commentPropName: false,
        unpairedTags: [],
        processEntities: true,
        htmlEntities: false,
        ignoreDeclaration: false,
        ignorePiTags: false,
        transformTagName: false,
        transformAttributeName: false,
        updateTag: function (t2, e2, n2) {
          return t2;
        },
        captureMetaData: false,
      };
      let y;
      y = typeof Symbol != 'function' ? '@@xmlMetadata' : Symbol('XML Node Metadata');
      class T {
        constructor(t2) {
          (this.tagname = t2), (this.child = []), (this[':@'] = {});
        }
        add(t2, e2) {
          t2 === '__proto__' && (t2 = '#__proto__'), this.child.push({ [t2]: e2 });
        }
        addChild(t2, e2) {
          t2.tagname === '__proto__' && (t2.tagname = '#__proto__'),
            t2[':@'] && Object.keys(t2[':@']).length > 0
              ? this.child.push({ [t2.tagname]: t2.child, ':@': t2[':@'] })
              : this.child.push({ [t2.tagname]: t2.child }),
            e2 !== void 0 && (this.child[this.child.length - 1][y] = { startIndex: e2 });
        }
        static getMetaDataSymbol() {
          return y;
        }
      }
      function w(t2, e2) {
        const n2 = {};
        if (
          t2[e2 + 3] !== 'O' ||
          t2[e2 + 4] !== 'C' ||
          t2[e2 + 5] !== 'T' ||
          t2[e2 + 6] !== 'Y' ||
          t2[e2 + 7] !== 'P' ||
          t2[e2 + 8] !== 'E'
        )
          throw new Error('Invalid Tag instead of DOCTYPE');
        {
          e2 += 9;
          let i2 = 1,
            s2 = false,
            r2 = false,
            o2 = '';
          for (; e2 < t2.length; e2++)
            if (t2[e2] !== '<' || r2)
              if (t2[e2] === '>') {
                if ((r2 ? t2[e2 - 1] === '-' && t2[e2 - 2] === '-' && ((r2 = false), i2--) : i2--, i2 === 0)) break;
              } else t2[e2] === '[' ? (s2 = true) : (o2 += t2[e2]);
            else {
              if (s2 && C(t2, '!ENTITY', e2)) {
                let i3, s3;
                (e2 += 7),
                  ([i3, s3, e2] = O(t2, e2 + 1)),
                  s3.indexOf('&') === -1 && (n2[i3] = { regx: RegExp(`&${i3};`, 'g'), val: s3 });
              } else if (s2 && C(t2, '!ELEMENT', e2)) {
                e2 += 8;
                const { index: n3 } = S(t2, e2 + 1);
                e2 = n3;
              } else if (s2 && C(t2, '!ATTLIST', e2)) e2 += 8;
              else if (s2 && C(t2, '!NOTATION', e2)) {
                e2 += 9;
                const { index: n3 } = A(t2, e2 + 1);
                e2 = n3;
              } else {
                if (!C(t2, '!--', e2)) throw new Error('Invalid DOCTYPE');
                r2 = true;
              }
              i2++, (o2 = '');
            }
          if (i2 !== 0) throw new Error('Unclosed DOCTYPE');
        }
        return { entities: n2, i: e2 };
      }
      const P = (t2, e2) => {
        for (; e2 < t2.length && /\s/.test(t2[e2]); ) e2++;
        return e2;
      };
      function O(t2, e2) {
        e2 = P(t2, e2);
        let n2 = '';
        for (; e2 < t2.length && !/\s/.test(t2[e2]) && t2[e2] !== '"' && t2[e2] !== "'"; ) (n2 += t2[e2]), e2++;
        if (($(n2), (e2 = P(t2, e2)), t2.substring(e2, e2 + 6).toUpperCase() === 'SYSTEM'))
          throw new Error('External entities are not supported');
        if (t2[e2] === '%') throw new Error('Parameter entities are not supported');
        let i2 = '';
        return ([e2, i2] = I(t2, e2, 'entity')), [n2, i2, --e2];
      }
      function A(t2, e2) {
        e2 = P(t2, e2);
        let n2 = '';
        for (; e2 < t2.length && !/\s/.test(t2[e2]); ) (n2 += t2[e2]), e2++;
        $(n2), (e2 = P(t2, e2));
        const i2 = t2.substring(e2, e2 + 6).toUpperCase();
        if (i2 !== 'SYSTEM' && i2 !== 'PUBLIC') throw new Error(`Expected SYSTEM or PUBLIC, found "${i2}"`);
        (e2 += i2.length), (e2 = P(t2, e2));
        let s2 = null,
          r2 = null;
        if (i2 === 'PUBLIC')
          ([e2, s2] = I(t2, e2, 'publicIdentifier')),
            (t2[(e2 = P(t2, e2))] !== '"' && t2[e2] !== "'") || ([e2, r2] = I(t2, e2, 'systemIdentifier'));
        else if (i2 === 'SYSTEM' && (([e2, r2] = I(t2, e2, 'systemIdentifier')), !r2))
          throw new Error('Missing mandatory system identifier for SYSTEM notation');
        return { notationName: n2, publicIdentifier: s2, systemIdentifier: r2, index: --e2 };
      }
      function I(t2, e2, n2) {
        let i2 = '';
        const s2 = t2[e2];
        if (s2 !== '"' && s2 !== "'") throw new Error(`Expected quoted string, found "${s2}"`);
        for (e2++; e2 < t2.length && t2[e2] !== s2; ) (i2 += t2[e2]), e2++;
        if (t2[e2] !== s2) throw new Error(`Unterminated ${n2} value`);
        return [++e2, i2];
      }
      function S(t2, e2) {
        e2 = P(t2, e2);
        let n2 = '';
        for (; e2 < t2.length && !/\s/.test(t2[e2]); ) (n2 += t2[e2]), e2++;
        if (!$(n2)) throw new Error(`Invalid element name: "${n2}"`);
        let i2 = '';
        if (t2[(e2 = P(t2, e2))] === 'E' && C(t2, 'MPTY', e2)) e2 += 4;
        else if (t2[e2] === 'A' && C(t2, 'NY', e2)) e2 += 2;
        else {
          if (t2[e2] !== '(') throw new Error(`Invalid Element Expression, found "${t2[e2]}"`);
          for (e2++; e2 < t2.length && t2[e2] !== ')'; ) (i2 += t2[e2]), e2++;
          if (t2[e2] !== ')') throw new Error('Unterminated content model');
        }
        return { elementName: n2, contentModel: i2.trim(), index: e2 };
      }
      function C(t2, e2, n2) {
        for (let i2 = 0; i2 < e2.length; i2++) if (e2[i2] !== t2[n2 + i2 + 1]) return false;
        return true;
      }
      function $(t2) {
        if (r(t2)) return t2;
        throw new Error(`Invalid entity name ${t2}`);
      }
      const j = /^[-+]?0x[a-fA-F0-9]+$/,
        D = /^([\-\+])?(0*)([0-9]*(\.[0-9]*)?)$/,
        V = { hex: true, leadingZeros: true, decimalPoint: '.', eNotation: true };
      const M = /^([-+])?(0*)(\d*(\.\d*)?[eE][-\+]?\d+)$/;
      function _(t2) {
        return typeof t2 == 'function'
          ? t2
          : Array.isArray(t2)
          ? (e2) => {
              for (const n2 of t2) {
                if (typeof n2 == 'string' && e2 === n2) return true;
                if (n2 instanceof RegExp && n2.test(e2)) return true;
              }
            }
          : () => false;
      }
      class k {
        constructor(t2) {
          (this.options = t2),
            (this.currentNode = null),
            (this.tagsNodeStack = []),
            (this.docTypeEntities = {}),
            (this.lastEntities = {
              apos: { regex: /&(apos|#39|#x27);/g, val: "'" },
              gt: { regex: /&(gt|#62|#x3E);/g, val: '>' },
              lt: { regex: /&(lt|#60|#x3C);/g, val: '<' },
              quot: { regex: /&(quot|#34|#x22);/g, val: '"' },
            }),
            (this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: '&' }),
            (this.htmlEntities = {
              space: { regex: /&(nbsp|#160);/g, val: ' ' },
              cent: { regex: /&(cent|#162);/g, val: '\xA2' },
              pound: { regex: /&(pound|#163);/g, val: '\xA3' },
              yen: { regex: /&(yen|#165);/g, val: '\xA5' },
              euro: { regex: /&(euro|#8364);/g, val: '\u20AC' },
              copyright: { regex: /&(copy|#169);/g, val: '\xA9' },
              reg: { regex: /&(reg|#174);/g, val: '\xAE' },
              inr: { regex: /&(inr|#8377);/g, val: '\u20B9' },
              num_dec: { regex: /&#([0-9]{1,7});/g, val: (t3, e2) => String.fromCodePoint(Number.parseInt(e2, 10)) },
              num_hex: {
                regex: /&#x([0-9a-fA-F]{1,6});/g,
                val: (t3, e2) => String.fromCodePoint(Number.parseInt(e2, 16)),
              },
            }),
            (this.addExternalEntities = F),
            (this.parseXml = X),
            (this.parseTextData = L),
            (this.resolveNameSpace = B),
            (this.buildAttributesMap = G),
            (this.isItStopNode = Z),
            (this.replaceEntitiesValue = R),
            (this.readStopNodeData = J),
            (this.saveTextToParentTag = q),
            (this.addChild = Y),
            (this.ignoreAttributesFn = _(this.options.ignoreAttributes));
        }
      }
      function F(t2) {
        const e2 = Object.keys(t2);
        for (let n2 = 0; n2 < e2.length; n2++) {
          const i2 = e2[n2];
          this.lastEntities[i2] = { regex: new RegExp('&' + i2 + ';', 'g'), val: t2[i2] };
        }
      }
      function L(t2, e2, n2, i2, s2, r2, o2) {
        if (t2 !== void 0 && (this.options.trimValues && !i2 && (t2 = t2.trim()), t2.length > 0)) {
          o2 || (t2 = this.replaceEntitiesValue(t2));
          const i3 = this.options.tagValueProcessor(e2, t2, n2, s2, r2);
          return i3 == null
            ? t2
            : typeof i3 != typeof t2 || i3 !== t2
            ? i3
            : this.options.trimValues || t2.trim() === t2
            ? H(t2, this.options.parseTagValue, this.options.numberParseOptions)
            : t2;
        }
      }
      function B(t2) {
        if (this.options.removeNSPrefix) {
          const e2 = t2.split(':'),
            n2 = t2.charAt(0) === '/' ? '/' : '';
          if (e2[0] === 'xmlns') return '';
          e2.length === 2 && (t2 = n2 + e2[1]);
        }
        return t2;
      }
      const U = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, 'gm');
      function G(t2, e2, n2) {
        if (this.options.ignoreAttributes !== true && typeof t2 == 'string') {
          const n3 = s(t2, U),
            i2 = n3.length,
            r2 = {};
          for (let t3 = 0; t3 < i2; t3++) {
            const i3 = this.resolveNameSpace(n3[t3][1]);
            if (this.ignoreAttributesFn(i3, e2)) continue;
            let s2 = n3[t3][4],
              o2 = this.options.attributeNamePrefix + i3;
            if (i3.length)
              if (
                (this.options.transformAttributeName && (o2 = this.options.transformAttributeName(o2)),
                o2 === '__proto__' && (o2 = '#__proto__'),
                s2 !== void 0)
              ) {
                this.options.trimValues && (s2 = s2.trim()), (s2 = this.replaceEntitiesValue(s2));
                const t4 = this.options.attributeValueProcessor(i3, s2, e2);
                r2[o2] =
                  t4 == null
                    ? s2
                    : typeof t4 != typeof s2 || t4 !== s2
                    ? t4
                    : H(s2, this.options.parseAttributeValue, this.options.numberParseOptions);
              } else this.options.allowBooleanAttributes && (r2[o2] = true);
          }
          if (!Object.keys(r2).length) return;
          if (this.options.attributesGroupName) {
            const t3 = {};
            return (t3[this.options.attributesGroupName] = r2), t3;
          }
          return r2;
        }
      }
      const X = function (t2) {
        t2 = t2.replace(/\r\n?/g, '\n');
        const e2 = new T('!xml');
        let n2 = e2,
          i2 = '',
          s2 = '';
        for (let r2 = 0; r2 < t2.length; r2++)
          if (t2[r2] === '<')
            if (t2[r2 + 1] === '/') {
              const e3 = W(t2, '>', r2, 'Closing Tag is not closed.');
              let o2 = t2.substring(r2 + 2, e3).trim();
              if (this.options.removeNSPrefix) {
                const t3 = o2.indexOf(':');
                t3 !== -1 && (o2 = o2.substr(t3 + 1));
              }
              this.options.transformTagName && (o2 = this.options.transformTagName(o2)),
                n2 && (i2 = this.saveTextToParentTag(i2, n2, s2));
              const a2 = s2.substring(s2.lastIndexOf('.') + 1);
              if (o2 && this.options.unpairedTags.indexOf(o2) !== -1)
                throw new Error(`Unpaired tag can not be used as closing tag: </${o2}>`);
              let l2 = 0;
              a2 && this.options.unpairedTags.indexOf(a2) !== -1
                ? ((l2 = s2.lastIndexOf('.', s2.lastIndexOf('.') - 1)), this.tagsNodeStack.pop())
                : (l2 = s2.lastIndexOf('.')),
                (s2 = s2.substring(0, l2)),
                (n2 = this.tagsNodeStack.pop()),
                (i2 = ''),
                (r2 = e3);
            } else if (t2[r2 + 1] === '?') {
              let e3 = z(t2, r2, false, '?>');
              if (!e3) throw new Error('Pi Tag is not closed.');
              if (
                ((i2 = this.saveTextToParentTag(i2, n2, s2)),
                (this.options.ignoreDeclaration && e3.tagName === '?xml') || this.options.ignorePiTags)
              );
              else {
                const t3 = new T(e3.tagName);
                t3.add(this.options.textNodeName, ''),
                  e3.tagName !== e3.tagExp &&
                    e3.attrExpPresent &&
                    (t3[':@'] = this.buildAttributesMap(e3.tagExp, s2, e3.tagName)),
                  this.addChild(n2, t3, s2, r2);
              }
              r2 = e3.closeIndex + 1;
            } else if (t2.substr(r2 + 1, 3) === '!--') {
              const e3 = W(t2, '-->', r2 + 4, 'Comment is not closed.');
              if (this.options.commentPropName) {
                const o2 = t2.substring(r2 + 4, e3 - 2);
                (i2 = this.saveTextToParentTag(i2, n2, s2)),
                  n2.add(this.options.commentPropName, [{ [this.options.textNodeName]: o2 }]);
              }
              r2 = e3;
            } else if (t2.substr(r2 + 1, 2) === '!D') {
              const e3 = w(t2, r2);
              (this.docTypeEntities = e3.entities), (r2 = e3.i);
            } else if (t2.substr(r2 + 1, 2) === '![') {
              const e3 = W(t2, ']]>', r2, 'CDATA is not closed.') - 2,
                o2 = t2.substring(r2 + 9, e3);
              i2 = this.saveTextToParentTag(i2, n2, s2);
              let a2 = this.parseTextData(o2, n2.tagname, s2, true, false, true, true);
              a2 == null && (a2 = ''),
                this.options.cdataPropName
                  ? n2.add(this.options.cdataPropName, [{ [this.options.textNodeName]: o2 }])
                  : n2.add(this.options.textNodeName, a2),
                (r2 = e3 + 2);
            } else {
              let o2 = z(t2, r2, this.options.removeNSPrefix),
                a2 = o2.tagName;
              const l2 = o2.rawTagName;
              let u2 = o2.tagExp,
                h2 = o2.attrExpPresent,
                d2 = o2.closeIndex;
              this.options.transformTagName && (a2 = this.options.transformTagName(a2)),
                n2 && i2 && n2.tagname !== '!xml' && (i2 = this.saveTextToParentTag(i2, n2, s2, false));
              const f2 = n2;
              f2 &&
                this.options.unpairedTags.indexOf(f2.tagname) !== -1 &&
                ((n2 = this.tagsNodeStack.pop()), (s2 = s2.substring(0, s2.lastIndexOf('.')))),
                a2 !== e2.tagname && (s2 += s2 ? '.' + a2 : a2);
              const c2 = r2;
              if (this.isItStopNode(this.options.stopNodes, s2, a2)) {
                let e3 = '';
                if (u2.length > 0 && u2.lastIndexOf('/') === u2.length - 1)
                  a2[a2.length - 1] === '/'
                    ? ((a2 = a2.substr(0, a2.length - 1)), (s2 = s2.substr(0, s2.length - 1)), (u2 = a2))
                    : (u2 = u2.substr(0, u2.length - 1)),
                    (r2 = o2.closeIndex);
                else if (this.options.unpairedTags.indexOf(a2) !== -1) r2 = o2.closeIndex;
                else {
                  const n3 = this.readStopNodeData(t2, l2, d2 + 1);
                  if (!n3) throw new Error(`Unexpected end of ${l2}`);
                  (r2 = n3.i), (e3 = n3.tagContent);
                }
                const i3 = new T(a2);
                a2 !== u2 && h2 && (i3[':@'] = this.buildAttributesMap(u2, s2, a2)),
                  e3 && (e3 = this.parseTextData(e3, a2, s2, true, h2, true, true)),
                  (s2 = s2.substr(0, s2.lastIndexOf('.'))),
                  i3.add(this.options.textNodeName, e3),
                  this.addChild(n2, i3, s2, c2);
              } else {
                if (u2.length > 0 && u2.lastIndexOf('/') === u2.length - 1) {
                  a2[a2.length - 1] === '/'
                    ? ((a2 = a2.substr(0, a2.length - 1)), (s2 = s2.substr(0, s2.length - 1)), (u2 = a2))
                    : (u2 = u2.substr(0, u2.length - 1)),
                    this.options.transformTagName && (a2 = this.options.transformTagName(a2));
                  const t3 = new T(a2);
                  a2 !== u2 && h2 && (t3[':@'] = this.buildAttributesMap(u2, s2, a2)),
                    this.addChild(n2, t3, s2, c2),
                    (s2 = s2.substr(0, s2.lastIndexOf('.')));
                } else {
                  const t3 = new T(a2);
                  this.tagsNodeStack.push(n2),
                    a2 !== u2 && h2 && (t3[':@'] = this.buildAttributesMap(u2, s2, a2)),
                    this.addChild(n2, t3, s2, c2),
                    (n2 = t3);
                }
                (i2 = ''), (r2 = d2);
              }
            }
          else i2 += t2[r2];
        return e2.child;
      };
      function Y(t2, e2, n2, i2) {
        this.options.captureMetaData || (i2 = void 0);
        const s2 = this.options.updateTag(e2.tagname, n2, e2[':@']);
        s2 === false || (typeof s2 == 'string' ? ((e2.tagname = s2), t2.addChild(e2, i2)) : t2.addChild(e2, i2));
      }
      const R = function (t2) {
        if (this.options.processEntities) {
          for (let e2 in this.docTypeEntities) {
            const n2 = this.docTypeEntities[e2];
            t2 = t2.replace(n2.regx, n2.val);
          }
          for (let e2 in this.lastEntities) {
            const n2 = this.lastEntities[e2];
            t2 = t2.replace(n2.regex, n2.val);
          }
          if (this.options.htmlEntities)
            for (let e2 in this.htmlEntities) {
              const n2 = this.htmlEntities[e2];
              t2 = t2.replace(n2.regex, n2.val);
            }
          t2 = t2.replace(this.ampEntity.regex, this.ampEntity.val);
        }
        return t2;
      };
      function q(t2, e2, n2, i2) {
        return (
          t2 &&
            (i2 === void 0 && (i2 = e2.child.length === 0),
            (t2 = this.parseTextData(
              t2,
              e2.tagname,
              n2,
              false,
              !!e2[':@'] && Object.keys(e2[':@']).length !== 0,
              i2
            )) !== void 0 &&
              t2 !== '' &&
              e2.add(this.options.textNodeName, t2),
            (t2 = '')),
          t2
        );
      }
      function Z(t2, e2, n2) {
        const i2 = '*.' + n2;
        for (const n3 in t2) {
          const s2 = t2[n3];
          if (i2 === s2 || e2 === s2) return true;
        }
        return false;
      }
      function W(t2, e2, n2, i2) {
        const s2 = t2.indexOf(e2, n2);
        if (s2 === -1) throw new Error(i2);
        return s2 + e2.length - 1;
      }
      function z(t2, e2, n2, i2 = '>') {
        const s2 = (function (t3, e3, n3 = '>') {
          let i3,
            s3 = '';
          for (let r3 = e3; r3 < t3.length; r3++) {
            let e4 = t3[r3];
            if (i3) e4 === i3 && (i3 = '');
            else if (e4 === '"' || e4 === "'") i3 = e4;
            else if (e4 === n3[0]) {
              if (!n3[1]) return { data: s3, index: r3 };
              if (t3[r3 + 1] === n3[1]) return { data: s3, index: r3 };
            } else e4 === '	' && (e4 = ' ');
            s3 += e4;
          }
        })(t2, e2 + 1, i2);
        if (!s2) return;
        let r2 = s2.data;
        const o2 = s2.index,
          a2 = r2.search(/\s/);
        let l2 = r2,
          u2 = true;
        a2 !== -1 && ((l2 = r2.substring(0, a2)), (r2 = r2.substring(a2 + 1).trimStart()));
        const h2 = l2;
        if (n2) {
          const t3 = l2.indexOf(':');
          t3 !== -1 && ((l2 = l2.substr(t3 + 1)), (u2 = l2 !== s2.data.substr(t3 + 1)));
        }
        return { tagName: l2, tagExp: r2, closeIndex: o2, attrExpPresent: u2, rawTagName: h2 };
      }
      function J(t2, e2, n2) {
        const i2 = n2;
        let s2 = 1;
        for (; n2 < t2.length; n2++)
          if (t2[n2] === '<')
            if (t2[n2 + 1] === '/') {
              const r2 = W(t2, '>', n2, `${e2} is not closed`);
              if (t2.substring(n2 + 2, r2).trim() === e2 && (s2--, s2 === 0))
                return { tagContent: t2.substring(i2, n2), i: r2 };
              n2 = r2;
            } else if (t2[n2 + 1] === '?') n2 = W(t2, '?>', n2 + 1, 'StopNode is not closed.');
            else if (t2.substr(n2 + 1, 3) === '!--') n2 = W(t2, '-->', n2 + 3, 'StopNode is not closed.');
            else if (t2.substr(n2 + 1, 2) === '![') n2 = W(t2, ']]>', n2, 'StopNode is not closed.') - 2;
            else {
              const i3 = z(t2, n2, '>');
              i3 &&
                ((i3 && i3.tagName) === e2 && i3.tagExp[i3.tagExp.length - 1] !== '/' && s2++, (n2 = i3.closeIndex));
            }
      }
      function H(t2, e2, n2) {
        if (e2 && typeof t2 == 'string') {
          const e3 = t2.trim();
          return (
            e3 === 'true' ||
            (e3 !== 'false' &&
              (function (t3, e4 = {}) {
                if (((e4 = Object.assign({}, V, e4)), !t3 || typeof t3 != 'string')) return t3;
                let n3 = t3.trim();
                if (e4.skipLike !== void 0 && e4.skipLike.test(n3)) return t3;
                if (t3 === '0') return 0;
                if (e4.hex && j.test(n3))
                  return (function (t4) {
                    if (parseInt) return parseInt(t4, 16);
                    if (Number.parseInt) return Number.parseInt(t4, 16);
                    if (window && window.parseInt) return window.parseInt(t4, 16);
                    throw new Error('parseInt, Number.parseInt, window.parseInt are not supported');
                  })(n3);
                if (n3.search(/.+[eE].+/) !== -1)
                  return (function (t4, e5, n4) {
                    if (!n4.eNotation) return t4;
                    const i3 = e5.match(M);
                    if (i3) {
                      let s2 = i3[1] || '';
                      const r2 = i3[3].indexOf('e') === -1 ? 'E' : 'e',
                        o2 = i3[2],
                        a2 = s2 ? t4[o2.length + 1] === r2 : t4[o2.length] === r2;
                      return o2.length > 1 && a2
                        ? t4
                        : o2.length !== 1 || (!i3[3].startsWith(`.${r2}`) && i3[3][0] !== r2)
                        ? n4.leadingZeros && !a2
                          ? ((e5 = (i3[1] || '') + i3[3]), Number(e5))
                          : t4
                        : Number(e5);
                    }
                    return t4;
                  })(t3, n3, e4);
                {
                  const s2 = D.exec(n3);
                  if (s2) {
                    const r2 = s2[1] || '',
                      o2 = s2[2];
                    let a2 =
                      (i2 = s2[3]) && i2.indexOf('.') !== -1
                        ? ((i2 = i2.replace(/0+$/, '')) === '.'
                            ? (i2 = '0')
                            : i2[0] === '.'
                            ? (i2 = '0' + i2)
                            : i2[i2.length - 1] === '.' && (i2 = i2.substring(0, i2.length - 1)),
                          i2)
                        : i2;
                    const l2 = r2 ? t3[o2.length + 1] === '.' : t3[o2.length] === '.';
                    if (!e4.leadingZeros && (o2.length > 1 || (o2.length === 1 && !l2))) return t3;
                    {
                      const i3 = Number(n3),
                        s3 = String(i3);
                      if (i3 === 0 || i3 === -0) return i3;
                      if (s3.search(/[eE]/) !== -1) return e4.eNotation ? i3 : t3;
                      if (n3.indexOf('.') !== -1) return s3 === '0' || s3 === a2 || s3 === `${r2}${a2}` ? i3 : t3;
                      let l3 = o2 ? a2 : n3;
                      return o2 ? (l3 === s3 || r2 + l3 === s3 ? i3 : t3) : l3 === s3 || l3 === r2 + s3 ? i3 : t3;
                    }
                  }
                  return t3;
                }
                var i2;
              })(t2, n2))
          );
        }
        return t2 !== void 0 ? t2 : '';
      }
      const K = T.getMetaDataSymbol();
      function Q(t2, e2) {
        return tt(t2, e2);
      }
      function tt(t2, e2, n2) {
        let i2;
        const s2 = {};
        for (let r2 = 0; r2 < t2.length; r2++) {
          const o2 = t2[r2],
            a2 = et(o2);
          let l2 = '';
          if (((l2 = n2 === void 0 ? a2 : n2 + '.' + a2), a2 === e2.textNodeName))
            i2 === void 0 ? (i2 = o2[a2]) : (i2 += '' + o2[a2]);
          else {
            if (a2 === void 0) continue;
            if (o2[a2]) {
              let t3 = tt(o2[a2], e2, l2);
              const n3 = it(t3, e2);
              o2[K] !== void 0 && (t3[K] = o2[K]),
                o2[':@']
                  ? nt(t3, o2[':@'], l2, e2)
                  : Object.keys(t3).length !== 1 || t3[e2.textNodeName] === void 0 || e2.alwaysCreateTextNode
                  ? Object.keys(t3).length === 0 && (e2.alwaysCreateTextNode ? (t3[e2.textNodeName] = '') : (t3 = ''))
                  : (t3 = t3[e2.textNodeName]),
                s2[a2] !== void 0 && s2.hasOwnProperty(a2)
                  ? (Array.isArray(s2[a2]) || (s2[a2] = [s2[a2]]), s2[a2].push(t3))
                  : e2.isArray(a2, l2, n3)
                  ? (s2[a2] = [t3])
                  : (s2[a2] = t3);
            }
          }
        }
        return (
          typeof i2 == 'string'
            ? i2.length > 0 && (s2[e2.textNodeName] = i2)
            : i2 !== void 0 && (s2[e2.textNodeName] = i2),
          s2
        );
      }
      function et(t2) {
        const e2 = Object.keys(t2);
        for (let t3 = 0; t3 < e2.length; t3++) {
          const n2 = e2[t3];
          if (n2 !== ':@') return n2;
        }
      }
      function nt(t2, e2, n2, i2) {
        if (e2) {
          const s2 = Object.keys(e2),
            r2 = s2.length;
          for (let o2 = 0; o2 < r2; o2++) {
            const r3 = s2[o2];
            i2.isArray(r3, n2 + '.' + r3, true, true) ? (t2[r3] = [e2[r3]]) : (t2[r3] = e2[r3]);
          }
        }
      }
      function it(t2, e2) {
        const { textNodeName: n2 } = e2,
          i2 = Object.keys(t2).length;
        return i2 === 0 || !(i2 !== 1 || (!t2[n2] && typeof t2[n2] != 'boolean' && t2[n2] !== 0));
      }
      class st {
        constructor(t2) {
          (this.externalEntities = {}),
            (this.options = (function (t3) {
              return Object.assign({}, v, t3);
            })(t2));
        }
        parse(t2, e2) {
          if (typeof t2 == 'string');
          else {
            if (!t2.toString) throw new Error('XML data is accepted in String or Bytes[] form.');
            t2 = t2.toString();
          }
          if (e2) {
            e2 === true && (e2 = {});
            const n3 = a(t2, e2);
            if (n3 !== true) throw Error(`${n3.err.msg}:${n3.err.line}:${n3.err.col}`);
          }
          const n2 = new k(this.options);
          n2.addExternalEntities(this.externalEntities);
          const i2 = n2.parseXml(t2);
          return this.options.preserveOrder || i2 === void 0 ? i2 : Q(i2, this.options);
        }
        addEntity(t2, e2) {
          if (e2.indexOf('&') !== -1) throw new Error("Entity value can't have '&'");
          if (t2.indexOf('&') !== -1 || t2.indexOf(';') !== -1)
            throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
          if (e2 === '&') throw new Error("An entity with value '&' is not permitted");
          this.externalEntities[t2] = e2;
        }
        static getMetaDataSymbol() {
          return T.getMetaDataSymbol();
        }
      }
      function rt(t2, e2) {
        let n2 = '';
        return e2.format && e2.indentBy.length > 0 && (n2 = '\n'), ot(t2, e2, '', n2);
      }
      function ot(t2, e2, n2, i2) {
        let s2 = '',
          r2 = false;
        for (let o2 = 0; o2 < t2.length; o2++) {
          const a2 = t2[o2],
            l2 = at(a2);
          if (l2 === void 0) continue;
          let u2 = '';
          if (((u2 = n2.length === 0 ? l2 : `${n2}.${l2}`), l2 === e2.textNodeName)) {
            let t3 = a2[l2];
            ut(u2, e2) || ((t3 = e2.tagValueProcessor(l2, t3)), (t3 = ht(t3, e2))),
              r2 && (s2 += i2),
              (s2 += t3),
              (r2 = false);
            continue;
          }
          if (l2 === e2.cdataPropName) {
            r2 && (s2 += i2), (s2 += `<![CDATA[${a2[l2][0][e2.textNodeName]}]]>`), (r2 = false);
            continue;
          }
          if (l2 === e2.commentPropName) {
            (s2 += i2 + `<!--${a2[l2][0][e2.textNodeName]}-->`), (r2 = true);
            continue;
          }
          if (l2[0] === '?') {
            const t3 = lt(a2[':@'], e2),
              n3 = l2 === '?xml' ? '' : i2;
            let o3 = a2[l2][0][e2.textNodeName];
            (o3 = o3.length !== 0 ? ' ' + o3 : ''), (s2 += n3 + `<${l2}${o3}${t3}?>`), (r2 = true);
            continue;
          }
          let h2 = i2;
          h2 !== '' && (h2 += e2.indentBy);
          const d2 = i2 + `<${l2}${lt(a2[':@'], e2)}`,
            f2 = ot(a2[l2], e2, u2, h2);
          e2.unpairedTags.indexOf(l2) !== -1
            ? e2.suppressUnpairedNode
              ? (s2 += d2 + '>')
              : (s2 += d2 + '/>')
            : (f2 && f2.length !== 0) || !e2.suppressEmptyNode
            ? f2 && f2.endsWith('>')
              ? (s2 += d2 + `>${f2}${i2}</${l2}>`)
              : ((s2 += d2 + '>'),
                f2 && i2 !== '' && (f2.includes('/>') || f2.includes('</'))
                  ? (s2 += i2 + e2.indentBy + f2 + i2)
                  : (s2 += f2),
                (s2 += `</${l2}>`))
            : (s2 += d2 + '/>'),
            (r2 = true);
        }
        return s2;
      }
      function at(t2) {
        const e2 = Object.keys(t2);
        for (let n2 = 0; n2 < e2.length; n2++) {
          const i2 = e2[n2];
          if (t2.hasOwnProperty(i2) && i2 !== ':@') return i2;
        }
      }
      function lt(t2, e2) {
        let n2 = '';
        if (t2 && !e2.ignoreAttributes)
          for (let i2 in t2) {
            if (!t2.hasOwnProperty(i2)) continue;
            let s2 = e2.attributeValueProcessor(i2, t2[i2]);
            (s2 = ht(s2, e2)),
              s2 === true && e2.suppressBooleanAttributes
                ? (n2 += ` ${i2.substr(e2.attributeNamePrefix.length)}`)
                : (n2 += ` ${i2.substr(e2.attributeNamePrefix.length)}="${s2}"`);
          }
        return n2;
      }
      function ut(t2, e2) {
        let n2 = (t2 = t2.substr(0, t2.length - e2.textNodeName.length - 1)).substr(t2.lastIndexOf('.') + 1);
        for (let i2 in e2.stopNodes) if (e2.stopNodes[i2] === t2 || e2.stopNodes[i2] === '*.' + n2) return true;
        return false;
      }
      function ht(t2, e2) {
        if (t2 && t2.length > 0 && e2.processEntities)
          for (let n2 = 0; n2 < e2.entities.length; n2++) {
            const i2 = e2.entities[n2];
            t2 = t2.replace(i2.regex, i2.val);
          }
        return t2;
      }
      const dt = {
        attributeNamePrefix: '@_',
        attributesGroupName: false,
        textNodeName: '#text',
        ignoreAttributes: true,
        cdataPropName: false,
        format: false,
        indentBy: '  ',
        suppressEmptyNode: false,
        suppressUnpairedNode: true,
        suppressBooleanAttributes: true,
        tagValueProcessor: function (t2, e2) {
          return e2;
        },
        attributeValueProcessor: function (t2, e2) {
          return e2;
        },
        preserveOrder: false,
        commentPropName: false,
        unpairedTags: [],
        entities: [
          { regex: new RegExp('&', 'g'), val: '&amp;' },
          { regex: new RegExp('>', 'g'), val: '&gt;' },
          { regex: new RegExp('<', 'g'), val: '&lt;' },
          { regex: new RegExp("'", 'g'), val: '&apos;' },
          { regex: new RegExp('"', 'g'), val: '&quot;' },
        ],
        processEntities: true,
        stopNodes: [],
        oneListGroup: false,
      };
      function ft(t2) {
        (this.options = Object.assign({}, dt, t2)),
          this.options.ignoreAttributes === true || this.options.attributesGroupName
            ? (this.isAttribute = function () {
                return false;
              })
            : ((this.ignoreAttributesFn = _(this.options.ignoreAttributes)),
              (this.attrPrefixLen = this.options.attributeNamePrefix.length),
              (this.isAttribute = gt)),
          (this.processTextOrObjNode = ct),
          this.options.format
            ? ((this.indentate = pt), (this.tagEndChar = '>\n'), (this.newLine = '\n'))
            : ((this.indentate = function () {
                return '';
              }),
              (this.tagEndChar = '>'),
              (this.newLine = ''));
      }
      function ct(t2, e2, n2, i2) {
        const s2 = this.j2x(t2, n2 + 1, i2.concat(e2));
        return t2[this.options.textNodeName] !== void 0 && Object.keys(t2).length === 1
          ? this.buildTextValNode(t2[this.options.textNodeName], e2, s2.attrStr, n2)
          : this.buildObjectNode(s2.val, e2, s2.attrStr, n2);
      }
      function pt(t2) {
        return this.options.indentBy.repeat(t2);
      }
      function gt(t2) {
        return (
          !(!t2.startsWith(this.options.attributeNamePrefix) || t2 === this.options.textNodeName) &&
          t2.substr(this.attrPrefixLen)
        );
      }
      (ft.prototype.build = function (t2) {
        return this.options.preserveOrder
          ? rt(t2, this.options)
          : (Array.isArray(t2) &&
              this.options.arrayNodeName &&
              this.options.arrayNodeName.length > 1 &&
              (t2 = { [this.options.arrayNodeName]: t2 }),
            this.j2x(t2, 0, []).val);
      }),
        (ft.prototype.j2x = function (t2, e2, n2) {
          let i2 = '',
            s2 = '';
          const r2 = n2.join('.');
          for (let o2 in t2)
            if (Object.prototype.hasOwnProperty.call(t2, o2))
              if (t2[o2] === void 0) this.isAttribute(o2) && (s2 += '');
              else if (t2[o2] === null)
                this.isAttribute(o2) || o2 === this.options.cdataPropName
                  ? (s2 += '')
                  : o2[0] === '?'
                  ? (s2 += this.indentate(e2) + '<' + o2 + '?' + this.tagEndChar)
                  : (s2 += this.indentate(e2) + '<' + o2 + '/' + this.tagEndChar);
              else if (t2[o2] instanceof Date) s2 += this.buildTextValNode(t2[o2], o2, '', e2);
              else if (typeof t2[o2] != 'object') {
                const n3 = this.isAttribute(o2);
                if (n3 && !this.ignoreAttributesFn(n3, r2)) i2 += this.buildAttrPairStr(n3, '' + t2[o2]);
                else if (!n3)
                  if (o2 === this.options.textNodeName) {
                    let e3 = this.options.tagValueProcessor(o2, '' + t2[o2]);
                    s2 += this.replaceEntitiesValue(e3);
                  } else s2 += this.buildTextValNode(t2[o2], o2, '', e2);
              } else if (Array.isArray(t2[o2])) {
                const i3 = t2[o2].length;
                let r3 = '',
                  a2 = '';
                for (let l2 = 0; l2 < i3; l2++) {
                  const i4 = t2[o2][l2];
                  if (i4 === void 0);
                  else if (i4 === null)
                    o2[0] === '?'
                      ? (s2 += this.indentate(e2) + '<' + o2 + '?' + this.tagEndChar)
                      : (s2 += this.indentate(e2) + '<' + o2 + '/' + this.tagEndChar);
                  else if (typeof i4 == 'object')
                    if (this.options.oneListGroup) {
                      const t3 = this.j2x(i4, e2 + 1, n2.concat(o2));
                      (r3 += t3.val),
                        this.options.attributesGroupName &&
                          i4.hasOwnProperty(this.options.attributesGroupName) &&
                          (a2 += t3.attrStr);
                    } else r3 += this.processTextOrObjNode(i4, o2, e2, n2);
                  else if (this.options.oneListGroup) {
                    let t3 = this.options.tagValueProcessor(o2, i4);
                    (t3 = this.replaceEntitiesValue(t3)), (r3 += t3);
                  } else r3 += this.buildTextValNode(i4, o2, '', e2);
                }
                this.options.oneListGroup && (r3 = this.buildObjectNode(r3, o2, a2, e2)), (s2 += r3);
              } else if (this.options.attributesGroupName && o2 === this.options.attributesGroupName) {
                const e3 = Object.keys(t2[o2]),
                  n3 = e3.length;
                for (let s3 = 0; s3 < n3; s3++) i2 += this.buildAttrPairStr(e3[s3], '' + t2[o2][e3[s3]]);
              } else s2 += this.processTextOrObjNode(t2[o2], o2, e2, n2);
          return { attrStr: i2, val: s2 };
        }),
        (ft.prototype.buildAttrPairStr = function (t2, e2) {
          return (
            (e2 = this.options.attributeValueProcessor(t2, '' + e2)),
            (e2 = this.replaceEntitiesValue(e2)),
            this.options.suppressBooleanAttributes && e2 === 'true' ? ' ' + t2 : ' ' + t2 + '="' + e2 + '"'
          );
        }),
        (ft.prototype.buildObjectNode = function (t2, e2, n2, i2) {
          if (t2 === '')
            return e2[0] === '?'
              ? this.indentate(i2) + '<' + e2 + n2 + '?' + this.tagEndChar
              : this.indentate(i2) + '<' + e2 + n2 + this.closeTag(e2) + this.tagEndChar;
          {
            let s2 = '</' + e2 + this.tagEndChar,
              r2 = '';
            return (
              e2[0] === '?' && ((r2 = '?'), (s2 = '')),
              (!n2 && n2 !== '') || t2.indexOf('<') !== -1
                ? this.options.commentPropName !== false && e2 === this.options.commentPropName && r2.length === 0
                  ? this.indentate(i2) + `<!--${t2}-->` + this.newLine
                  : this.indentate(i2) + '<' + e2 + n2 + r2 + this.tagEndChar + t2 + this.indentate(i2) + s2
                : this.indentate(i2) + '<' + e2 + n2 + r2 + '>' + t2 + s2
            );
          }
        }),
        (ft.prototype.closeTag = function (t2) {
          let e2 = '';
          return (
            this.options.unpairedTags.indexOf(t2) !== -1
              ? this.options.suppressUnpairedNode || (e2 = '/')
              : (e2 = this.options.suppressEmptyNode ? '/' : `></${t2}`),
            e2
          );
        }),
        (ft.prototype.buildTextValNode = function (t2, e2, n2, i2) {
          if (this.options.cdataPropName !== false && e2 === this.options.cdataPropName)
            return this.indentate(i2) + `<![CDATA[${t2}]]>` + this.newLine;
          if (this.options.commentPropName !== false && e2 === this.options.commentPropName)
            return this.indentate(i2) + `<!--${t2}-->` + this.newLine;
          if (e2[0] === '?') return this.indentate(i2) + '<' + e2 + n2 + '?' + this.tagEndChar;
          {
            let s2 = this.options.tagValueProcessor(e2, t2);
            return (
              (s2 = this.replaceEntitiesValue(s2)),
              s2 === ''
                ? this.indentate(i2) + '<' + e2 + n2 + this.closeTag(e2) + this.tagEndChar
                : this.indentate(i2) + '<' + e2 + n2 + '>' + s2 + '</' + e2 + this.tagEndChar
            );
          }
        }),
        (ft.prototype.replaceEntitiesValue = function (t2) {
          if (t2 && t2.length > 0 && this.options.processEntities)
            for (let e2 = 0; e2 < this.options.entities.length; e2++) {
              const n2 = this.options.entities[e2];
              t2 = t2.replace(n2.regex, n2.val);
            }
          return t2;
        });
      const mt = { validate: a };
      module2.exports = e;
    })();
  },
});

// node_modules/@aws-sdk/xml-builder/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  'node_modules/@aws-sdk/xml-builder/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      XmlNode: () => XmlNode,
      XmlText: () => XmlText,
    });
    module2.exports = __toCommonJS(index_exports);
    function escapeAttribute(value) {
      return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    }
    __name(escapeAttribute, 'escapeAttribute');
    function escapeElement(value) {
      return value
        .replace(/&/g, '&amp;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&apos;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/\r/g, '&#x0D;')
        .replace(/\n/g, '&#x0A;')
        .replace(/\u0085/g, '&#x85;')
        .replace(/\u2028/, '&#x2028;');
    }
    __name(escapeElement, 'escapeElement');
    var _a;
    var XmlText =
      ((_a = class {
        constructor(value) {
          this.value = value;
        }
        toString() {
          return escapeElement('' + this.value);
        }
      }),
      (() => {
        __name(_a, 'XmlText');
      })(),
      _a);
    var _a2;
    var XmlNode =
      ((_a2 = class {
        constructor(name, children = []) {
          this.name = name;
          this.children = children;
        }
        attributes = {};
        static of(name, childText, withName) {
          const node = new _a2(name);
          if (childText !== void 0) {
            node.addChildNode(new XmlText(childText));
          }
          if (withName !== void 0) {
            node.withName(withName);
          }
          return node;
        }
        withName(name) {
          this.name = name;
          return this;
        }
        addAttribute(name, value) {
          this.attributes[name] = value;
          return this;
        }
        addChildNode(child) {
          this.children.push(child);
          return this;
        }
        removeAttribute(name) {
          delete this.attributes[name];
          return this;
        }
        n(name) {
          this.name = name;
          return this;
        }
        c(child) {
          this.children.push(child);
          return this;
        }
        a(name, value) {
          if (value != null) {
            this.attributes[name] = value;
          }
          return this;
        }
        cc(input, field, withName = field) {
          if (input[field] != null) {
            const node = _a2.of(field, input[field]).withName(withName);
            this.c(node);
          }
        }
        l(input, listName, memberName, valueProvider) {
          if (input[listName] != null) {
            const nodes = valueProvider();
            nodes.map((node) => {
              node.withName(memberName);
              this.c(node);
            });
          }
        }
        lc(input, listName, memberName, valueProvider) {
          if (input[listName] != null) {
            const nodes = valueProvider();
            const containerNode = new _a2(memberName);
            nodes.map((node) => {
              containerNode.c(node);
            });
            this.c(containerNode);
          }
        }
        toString() {
          const hasChildren = Boolean(this.children.length);
          let xmlText = `<${this.name}`;
          const attributes = this.attributes;
          for (const attributeName of Object.keys(attributes)) {
            const attribute = attributes[attributeName];
            if (attribute != null) {
              xmlText += ` ${attributeName}="${escapeAttribute('' + attribute)}"`;
            }
          }
          return (xmlText += !hasChildren
            ? '/>'
            : `>${this.children.map((c) => c.toString()).join('')}</${this.name}>`);
        }
      }),
      (() => {
        __name(_a2, 'XmlNode');
      })(),
      _a2);
  },
});

// node_modules/@aws-sdk/core/dist-cjs/submodules/protocols/index.js
var require_protocols3 = __commonJS({
  'node_modules/@aws-sdk/core/dist-cjs/submodules/protocols/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      AwsEc2QueryProtocol: () => AwsEc2QueryProtocol,
      AwsJson1_0Protocol: () => AwsJson1_0Protocol,
      AwsJson1_1Protocol: () => AwsJson1_1Protocol,
      AwsJsonRpcProtocol: () => AwsJsonRpcProtocol,
      AwsQueryProtocol: () => AwsQueryProtocol,
      AwsRestJsonProtocol: () => AwsRestJsonProtocol,
      AwsRestXmlProtocol: () => AwsRestXmlProtocol,
      AwsSmithyRpcV2CborProtocol: () => AwsSmithyRpcV2CborProtocol,
      JsonCodec: () => JsonCodec,
      JsonShapeDeserializer: () => JsonShapeDeserializer,
      JsonShapeSerializer: () => JsonShapeSerializer,
      XmlCodec: () => XmlCodec,
      XmlShapeDeserializer: () => XmlShapeDeserializer,
      XmlShapeSerializer: () => XmlShapeSerializer,
      _toBool: () => _toBool,
      _toNum: () => _toNum,
      _toStr: () => _toStr,
      awsExpectUnion: () => awsExpectUnion,
      loadRestJsonErrorCode: () => loadRestJsonErrorCode,
      loadRestXmlErrorCode: () => loadRestXmlErrorCode,
      parseJsonBody: () => parseJsonBody,
      parseJsonErrorBody: () => parseJsonErrorBody,
      parseXmlBody: () => parseXmlBody,
      parseXmlErrorBody: () => parseXmlErrorBody,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_cbor = require_cbor2();
    var import_schema2 = require_schema2();
    var import_schema = require_schema2();
    var import_util_body_length_browser = require_dist_cjs25();
    var _a;
    var ProtocolLib =
      ((_a = class {
        calculateContentLength(body, serdeContext) {
          var _a19;
          const bodyLengthCalculator =
            (_a19 = serdeContext == null ? void 0 : serdeContext.bodyLengthChecker) != null
              ? _a19
              : import_util_body_length_browser.calculateBodyLength;
          return String(bodyLengthCalculator(body));
        }
        resolveRestContentType(defaultContentType, inputSchema) {
          const members = inputSchema.getMemberSchemas();
          const httpPayloadMember = Object.values(members).find((m) => {
            return !!m.getMergedTraits().httpPayload;
          });
          if (httpPayloadMember) {
            const mediaType = httpPayloadMember.getMergedTraits().mediaType;
            if (mediaType) {
              return mediaType;
            } else if (httpPayloadMember.isStringSchema()) {
              return 'text/plain';
            } else if (httpPayloadMember.isBlobSchema()) {
              return 'application/octet-stream';
            } else {
              return defaultContentType;
            }
          } else if (!inputSchema.isUnitSchema()) {
            const hasBody = Object.values(members).find((m) => {
              const { httpQuery, httpQueryParams, httpHeader, httpLabel, httpPrefixHeaders } = m.getMergedTraits();
              const noPrefixHeaders = httpPrefixHeaders === void 0;
              return !httpQuery && !httpQueryParams && !httpHeader && !httpLabel && noPrefixHeaders;
            });
            if (hasBody) {
              return defaultContentType;
            }
          }
        }
        async getErrorSchemaOrThrowBaseException(
          errorIdentifier,
          defaultNamespace,
          response,
          dataObject,
          metadata,
          getErrorSchema
        ) {
          var _a19;
          let namespace = defaultNamespace;
          let errorName = errorIdentifier;
          if (errorIdentifier.includes('#')) {
            [namespace, errorName] = errorIdentifier.split('#');
          }
          const errorMetadata = {
            $metadata: metadata,
            $response: response,
            $fault: response.statusCode < 500 ? 'client' : 'server',
          };
          const registry = import_schema.TypeRegistry.for(namespace);
          try {
            const errorSchema =
              (_a19 = getErrorSchema == null ? void 0 : getErrorSchema(registry, errorName)) != null
                ? _a19
                : registry.getSchema(errorIdentifier);
            return { errorSchema, errorMetadata };
          } catch (e) {
            if (dataObject.Message) {
              dataObject.message = dataObject.Message;
            }
            const baseExceptionSchema = import_schema.TypeRegistry.for(
              'smithy.ts.sdk.synthetic.' + namespace
            ).getBaseException();
            if (baseExceptionSchema) {
              const ErrorCtor = baseExceptionSchema.ctor;
              throw Object.assign(new ErrorCtor({ name: errorName }), errorMetadata, dataObject);
            }
            throw Object.assign(new Error(errorName), errorMetadata, dataObject);
          }
        }
        setQueryCompatError(output, response) {
          var _a19;
          const queryErrorHeader = (_a19 = response.headers) == null ? void 0 : _a19['x-amzn-query-error'];
          if (output !== void 0 && queryErrorHeader != null) {
            const [Code, Type] = queryErrorHeader.split(';');
            const entries = Object.entries(output);
            const Error2 = {
              Code,
              Type,
            };
            Object.assign(output, Error2);
            for (const [k, v] of entries) {
              Error2[k] = v;
            }
            delete Error2.__type;
            output.Error = Error2;
          }
        }
        queryCompatOutput(queryCompatErrorData, errorData) {
          if (queryCompatErrorData.Error) {
            errorData.Error = queryCompatErrorData.Error;
          }
          if (queryCompatErrorData.Type) {
            errorData.Type = queryCompatErrorData.Type;
          }
          if (queryCompatErrorData.Code) {
            errorData.Code = queryCompatErrorData.Code;
          }
        }
      }),
      (() => {
        __name(_a, 'ProtocolLib');
      })(),
      _a);
    var _a2;
    var AwsSmithyRpcV2CborProtocol =
      ((_a2 = class extends import_cbor.SmithyRpcV2CborProtocol {
        awsQueryCompatible;
        mixin = new ProtocolLib();
        constructor({ defaultNamespace, awsQueryCompatible }) {
          super({ defaultNamespace });
          this.awsQueryCompatible = !!awsQueryCompatible;
        }
        async serializeRequest(operationSchema, input, context) {
          const request = await super.serializeRequest(operationSchema, input, context);
          if (this.awsQueryCompatible) {
            request.headers['x-amzn-query-mode'] = 'true';
          }
          return request;
        }
        async handleError(operationSchema, context, response, dataObject, metadata) {
          var _a19, _b, _c;
          if (this.awsQueryCompatible) {
            this.mixin.setQueryCompatError(dataObject, response);
          }
          const errorName =
            (_a19 = (0, import_cbor.loadSmithyRpcV2CborErrorCode)(response, dataObject)) != null ? _a19 : 'Unknown';
          const { errorSchema, errorMetadata } = await this.mixin.getErrorSchemaOrThrowBaseException(
            errorName,
            this.options.defaultNamespace,
            response,
            dataObject,
            metadata
          );
          const ns = import_schema2.NormalizedSchema.of(errorSchema);
          const message = (_c = (_b = dataObject.message) != null ? _b : dataObject.Message) != null ? _c : 'Unknown';
          const exception = new errorSchema.ctor(message);
          const output = {};
          for (const [name, member] of ns.structIterator()) {
            output[name] = this.deserializer.readValue(member, dataObject[name]);
          }
          if (this.awsQueryCompatible) {
            this.mixin.queryCompatOutput(dataObject, output);
          }
          throw Object.assign(
            exception,
            errorMetadata,
            {
              $fault: ns.getMergedTraits().error,
              message,
            },
            output
          );
        }
      }),
      (() => {
        __name(_a2, 'AwsSmithyRpcV2CborProtocol');
      })(),
      _a2);
    var _toStr = /* @__PURE__ */ __name((val) => {
      if (val == null) {
        return val;
      }
      if (typeof val === 'number' || typeof val === 'bigint') {
        const warning = new Error(`Received number ${val} where a string was expected.`);
        warning.name = 'Warning';
        console.warn(warning);
        return String(val);
      }
      if (typeof val === 'boolean') {
        const warning = new Error(`Received boolean ${val} where a string was expected.`);
        warning.name = 'Warning';
        console.warn(warning);
        return String(val);
      }
      return val;
    }, '_toStr');
    var _toBool = /* @__PURE__ */ __name((val) => {
      if (val == null) {
        return val;
      }
      if (typeof val === 'number') {
      }
      if (typeof val === 'string') {
        const lowercase = val.toLowerCase();
        if (val !== '' && lowercase !== 'false' && lowercase !== 'true') {
          const warning = new Error(`Received string "${val}" where a boolean was expected.`);
          warning.name = 'Warning';
          console.warn(warning);
        }
        return val !== '' && lowercase !== 'false';
      }
      return val;
    }, '_toBool');
    var _toNum = /* @__PURE__ */ __name((val) => {
      if (val == null) {
        return val;
      }
      if (typeof val === 'boolean') {
      }
      if (typeof val === 'string') {
        const num = Number(val);
        if (num.toString() !== val) {
          const warning = new Error(`Received string "${val}" where a number was expected.`);
          warning.name = 'Warning';
          console.warn(warning);
          return val;
        }
        return num;
      }
      return val;
    }, '_toNum');
    var import_protocols = require_protocols2();
    var import_schema5 = require_schema2();
    var _a3;
    var SerdeContextConfig =
      ((_a3 = class {
        serdeContext;
        setSerdeContext(serdeContext) {
          this.serdeContext = serdeContext;
        }
      }),
      (() => {
        __name(_a3, 'SerdeContextConfig');
      })(),
      _a3);
    var import_schema3 = require_schema2();
    var import_serde2 = require_serde2();
    var import_util_base64 = require_dist_cjs11();
    var import_serde = require_serde2();
    function jsonReviver(key, value, context) {
      if (context == null ? void 0 : context.source) {
        const numericString = context.source;
        if (typeof value === 'number') {
          if (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER || numericString !== String(value)) {
            const isFractional = numericString.includes('.');
            if (isFractional) {
              return new import_serde.NumericValue(numericString, 'bigDecimal');
            } else {
              return BigInt(numericString);
            }
          }
        }
      }
      return value;
    }
    __name(jsonReviver, 'jsonReviver');
    var import_smithy_client = require_dist_cjs27();
    var import_util_utf8 = require_dist_cjs10();
    var collectBodyString = /* @__PURE__ */ __name(
      (streamBody, context) =>
        (0, import_smithy_client.collectBody)(streamBody, context).then((body) => {
          var _a19;
          return ((_a19 = context == null ? void 0 : context.utf8Encoder) != null ? _a19 : import_util_utf8.toUtf8)(
            body
          );
        }),
      'collectBodyString'
    );
    var parseJsonBody = /* @__PURE__ */ __name(
      (streamBody, context) =>
        collectBodyString(streamBody, context).then((encoded) => {
          if (encoded.length) {
            try {
              return JSON.parse(encoded);
            } catch (e) {
              if ((e == null ? void 0 : e.name) === 'SyntaxError') {
                Object.defineProperty(e, '$responseBodyText', {
                  value: encoded,
                });
              }
              throw e;
            }
          }
          return {};
        }),
      'parseJsonBody'
    );
    var parseJsonErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
      var _a19;
      const value = await parseJsonBody(errorBody, context);
      value.message = (_a19 = value.message) != null ? _a19 : value.Message;
      return value;
    }, 'parseJsonErrorBody');
    var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {
      const findKey = /* @__PURE__ */ __name(
        (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()),
        'findKey'
      );
      const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === 'number') {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(',') >= 0) {
          cleanValue = cleanValue.split(',')[0];
        }
        if (cleanValue.indexOf(':') >= 0) {
          cleanValue = cleanValue.split(':')[0];
        }
        if (cleanValue.indexOf('#') >= 0) {
          cleanValue = cleanValue.split('#')[1];
        }
        return cleanValue;
      }, 'sanitizeErrorCode');
      const headerKey = findKey(output.headers, 'x-amzn-errortype');
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data && typeof data === 'object') {
        const codeKey = findKey(data, 'code');
        if (codeKey && data[codeKey] !== void 0) {
          return sanitizeErrorCode(data[codeKey]);
        }
        if (data['__type'] !== void 0) {
          return sanitizeErrorCode(data['__type']);
        }
      }
    }, 'loadRestJsonErrorCode');
    var _a4;
    var JsonShapeDeserializer =
      ((_a4 = class extends SerdeContextConfig {
        constructor(settings) {
          super();
          this.settings = settings;
        }
        async read(schema, data) {
          return this._read(
            schema,
            typeof data === 'string' ? JSON.parse(data, jsonReviver) : await parseJsonBody(data, this.serdeContext)
          );
        }
        readObject(schema, data) {
          return this._read(schema, data);
        }
        _read(schema, value) {
          var _a19, _b;
          const isObject = value !== null && typeof value === 'object';
          const ns = import_schema3.NormalizedSchema.of(schema);
          if (ns.isListSchema() && Array.isArray(value)) {
            const listMember = ns.getValueSchema();
            const out = [];
            const sparse = !!ns.getMergedTraits().sparse;
            for (const item of value) {
              if (sparse || item != null) {
                out.push(this._read(listMember, item));
              }
            }
            return out;
          } else if (ns.isMapSchema() && isObject) {
            const mapMember = ns.getValueSchema();
            const out = {};
            const sparse = !!ns.getMergedTraits().sparse;
            for (const [_k, _v] of Object.entries(value)) {
              if (sparse || _v != null) {
                out[_k] = this._read(mapMember, _v);
              }
            }
            return out;
          } else if (ns.isStructSchema() && isObject) {
            const out = {};
            for (const [memberName, memberSchema] of ns.structIterator()) {
              const fromKey = this.settings.jsonName
                ? (_a19 = memberSchema.getMergedTraits().jsonName) != null
                  ? _a19
                  : memberName
                : memberName;
              const deserializedValue = this._read(memberSchema, value[fromKey]);
              if (deserializedValue != null) {
                out[memberName] = deserializedValue;
              }
            }
            return out;
          }
          if (ns.isBlobSchema() && typeof value === 'string') {
            return (0, import_util_base64.fromBase64)(value);
          }
          const mediaType = ns.getMergedTraits().mediaType;
          if (ns.isStringSchema() && typeof value === 'string' && mediaType) {
            const isJson = mediaType === 'application/json' || mediaType.endsWith('+json');
            if (isJson) {
              return import_serde2.LazyJsonString.from(value);
            }
          }
          if (ns.isTimestampSchema()) {
            const options = this.settings.timestampFormat;
            const format = options.useTrait
              ? ns.getSchema() === import_schema3.SCHEMA.TIMESTAMP_DEFAULT
                ? options.default
                : (_b = ns.getSchema()) != null
                ? _b
                : options.default
              : options.default;
            switch (format) {
              case import_schema3.SCHEMA.TIMESTAMP_DATE_TIME:
                return (0, import_serde2.parseRfc3339DateTimeWithOffset)(value);
              case import_schema3.SCHEMA.TIMESTAMP_HTTP_DATE:
                return (0, import_serde2.parseRfc7231DateTime)(value);
              case import_schema3.SCHEMA.TIMESTAMP_EPOCH_SECONDS:
                return (0, import_serde2.parseEpochTimestamp)(value);
              default:
                console.warn('Missing timestamp format, parsing value with Date constructor:', value);
                return new Date(value);
            }
          }
          if (ns.isBigIntegerSchema() && (typeof value === 'number' || typeof value === 'string')) {
            return BigInt(value);
          }
          if (ns.isBigDecimalSchema() && value != void 0) {
            if (value instanceof import_serde2.NumericValue) {
              return value;
            }
            return new import_serde2.NumericValue(String(value), 'bigDecimal');
          }
          if (ns.isNumericSchema() && typeof value === 'string') {
            switch (value) {
              case 'Infinity':
                return Infinity;
              case '-Infinity':
                return -Infinity;
              case 'NaN':
                return NaN;
            }
          }
          return value;
        }
      }),
      (() => {
        __name(_a4, 'JsonShapeDeserializer');
      })(),
      _a4);
    var import_schema4 = require_schema2();
    var import_serde4 = require_serde2();
    var import_serde3 = require_serde2();
    var NUMERIC_CONTROL_CHAR = String.fromCharCode(925);
    var _a5;
    var JsonReplacer =
      ((_a5 = class {
        values = /* @__PURE__ */ new Map();
        counter = 0;
        stage = 0;
        createReplacer() {
          if (this.stage === 1) {
            throw new Error('@aws-sdk/core/protocols - JsonReplacer already created.');
          }
          if (this.stage === 2) {
            throw new Error('@aws-sdk/core/protocols - JsonReplacer exhausted.');
          }
          this.stage = 1;
          return (key, value) => {
            if (value instanceof import_serde3.NumericValue) {
              const v = `${NUMERIC_CONTROL_CHAR + 'nv' + this.counter++}_` + value.string;
              this.values.set(`"${v}"`, value.string);
              return v;
            }
            if (typeof value === 'bigint') {
              const s = value.toString();
              const v = `${NUMERIC_CONTROL_CHAR + 'b' + this.counter++}_` + s;
              this.values.set(`"${v}"`, s);
              return v;
            }
            return value;
          };
        }
        replaceInJson(json) {
          if (this.stage === 0) {
            throw new Error('@aws-sdk/core/protocols - JsonReplacer not created yet.');
          }
          if (this.stage === 2) {
            throw new Error('@aws-sdk/core/protocols - JsonReplacer exhausted.');
          }
          this.stage = 2;
          if (this.counter === 0) {
            return json;
          }
          for (const [key, value] of this.values) {
            json = json.replace(key, value);
          }
          return json;
        }
      }),
      (() => {
        __name(_a5, 'JsonReplacer');
      })(),
      _a5);
    var _a6;
    var JsonShapeSerializer =
      ((_a6 = class extends SerdeContextConfig {
        constructor(settings) {
          super();
          this.settings = settings;
        }
        buffer;
        rootSchema;
        write(schema, value) {
          this.rootSchema = import_schema4.NormalizedSchema.of(schema);
          this.buffer = this._write(this.rootSchema, value);
        }
        flush() {
          var _a19, _b;
          if (
            ((_a19 = this.rootSchema) == null ? void 0 : _a19.isStructSchema()) ||
            ((_b = this.rootSchema) == null ? void 0 : _b.isDocumentSchema())
          ) {
            const replacer = new JsonReplacer();
            return replacer.replaceInJson(JSON.stringify(this.buffer, replacer.createReplacer(), 0));
          }
          return this.buffer;
        }
        _write(schema, value, container) {
          var _a19, _b, _c, _d;
          const isObject = value !== null && typeof value === 'object';
          const ns = import_schema4.NormalizedSchema.of(schema);
          if (ns.isListSchema() && Array.isArray(value)) {
            const listMember = ns.getValueSchema();
            const out = [];
            const sparse = !!ns.getMergedTraits().sparse;
            for (const item of value) {
              if (sparse || item != null) {
                out.push(this._write(listMember, item));
              }
            }
            return out;
          } else if (ns.isMapSchema() && isObject) {
            const mapMember = ns.getValueSchema();
            const out = {};
            const sparse = !!ns.getMergedTraits().sparse;
            for (const [_k, _v] of Object.entries(value)) {
              if (sparse || _v != null) {
                out[_k] = this._write(mapMember, _v);
              }
            }
            return out;
          } else if (ns.isStructSchema() && isObject) {
            const out = {};
            for (const [memberName, memberSchema] of ns.structIterator()) {
              const targetKey = this.settings.jsonName
                ? (_a19 = memberSchema.getMergedTraits().jsonName) != null
                  ? _a19
                  : memberName
                : memberName;
              const serializableValue = this._write(memberSchema, value[memberName], ns);
              if (serializableValue !== void 0) {
                out[targetKey] = serializableValue;
              }
            }
            return out;
          }
          if (value === null && (container == null ? void 0 : container.isStructSchema())) {
            return void 0;
          }
          if (ns.isBlobSchema() && (value instanceof Uint8Array || typeof value === 'string')) {
            if (ns === this.rootSchema) {
              return value;
            }
            if (!((_b = this.serdeContext) == null ? void 0 : _b.base64Encoder)) {
              throw new Error('Missing base64Encoder in serdeContext');
            }
            return (_c = this.serdeContext) == null ? void 0 : _c.base64Encoder(value);
          }
          if (ns.isTimestampSchema() && value instanceof Date) {
            const options = this.settings.timestampFormat;
            const format = options.useTrait
              ? ns.getSchema() === import_schema4.SCHEMA.TIMESTAMP_DEFAULT
                ? options.default
                : (_d = ns.getSchema()) != null
                ? _d
                : options.default
              : options.default;
            switch (format) {
              case import_schema4.SCHEMA.TIMESTAMP_DATE_TIME:
                return value.toISOString().replace('.000Z', 'Z');
              case import_schema4.SCHEMA.TIMESTAMP_HTTP_DATE:
                return (0, import_serde4.dateToUtcString)(value);
              case import_schema4.SCHEMA.TIMESTAMP_EPOCH_SECONDS:
                return value.getTime() / 1e3;
              default:
                console.warn('Missing timestamp format, using epoch seconds', value);
                return value.getTime() / 1e3;
            }
          }
          if (ns.isNumericSchema() && typeof value === 'number') {
            if (Math.abs(value) === Infinity || isNaN(value)) {
              return String(value);
            }
          }
          if (ns.isStringSchema()) {
            if (typeof value === 'undefined' && ns.isIdempotencyToken()) {
              return (0, import_serde4.generateIdempotencyToken)();
            }
            const mediaType = ns.getMergedTraits().mediaType;
            if (typeof value === 'string' && mediaType) {
              const isJson = mediaType === 'application/json' || mediaType.endsWith('+json');
              if (isJson) {
                return import_serde4.LazyJsonString.from(value);
              }
            }
          }
          return value;
        }
      }),
      (() => {
        __name(_a6, 'JsonShapeSerializer');
      })(),
      _a6);
    var _a7;
    var JsonCodec =
      ((_a7 = class extends SerdeContextConfig {
        constructor(settings) {
          super();
          this.settings = settings;
        }
        createSerializer() {
          const serializer = new JsonShapeSerializer(this.settings);
          serializer.setSerdeContext(this.serdeContext);
          return serializer;
        }
        createDeserializer() {
          const deserializer = new JsonShapeDeserializer(this.settings);
          deserializer.setSerdeContext(this.serdeContext);
          return deserializer;
        }
      }),
      (() => {
        __name(_a7, 'JsonCodec');
      })(),
      _a7);
    var _a8;
    var AwsJsonRpcProtocol =
      ((_a8 = class extends import_protocols.RpcProtocol {
        serializer;
        deserializer;
        serviceTarget;
        codec;
        mixin = new ProtocolLib();
        awsQueryCompatible;
        constructor({ defaultNamespace, serviceTarget, awsQueryCompatible }) {
          super({
            defaultNamespace,
          });
          this.serviceTarget = serviceTarget;
          this.codec = new JsonCodec({
            timestampFormat: {
              useTrait: true,
              default: import_schema5.SCHEMA.TIMESTAMP_EPOCH_SECONDS,
            },
            jsonName: false,
          });
          this.serializer = this.codec.createSerializer();
          this.deserializer = this.codec.createDeserializer();
          this.awsQueryCompatible = !!awsQueryCompatible;
        }
        async serializeRequest(operationSchema, input, context) {
          const request = await super.serializeRequest(operationSchema, input, context);
          if (!request.path.endsWith('/')) {
            request.path += '/';
          }
          Object.assign(request.headers, {
            'content-type': `application/x-amz-json-${this.getJsonRpcVersion()}`,
            'x-amz-target': `${this.serviceTarget}.${import_schema5.NormalizedSchema.of(operationSchema).getName()}`,
          });
          if (this.awsQueryCompatible) {
            request.headers['x-amzn-query-mode'] = 'true';
          }
          if ((0, import_schema5.deref)(operationSchema.input) === 'unit' || !request.body) {
            request.body = '{}';
          }
          try {
            request.headers['content-length'] = this.mixin.calculateContentLength(request.body, this.serdeContext);
          } catch (e) {}
          return request;
        }
        getPayloadCodec() {
          return this.codec;
        }
        async handleError(operationSchema, context, response, dataObject, metadata) {
          var _a19, _b, _c, _d;
          if (this.awsQueryCompatible) {
            this.mixin.setQueryCompatError(dataObject, response);
          }
          const errorIdentifier = (_a19 = loadRestJsonErrorCode(response, dataObject)) != null ? _a19 : 'Unknown';
          const { errorSchema, errorMetadata } = await this.mixin.getErrorSchemaOrThrowBaseException(
            errorIdentifier,
            this.options.defaultNamespace,
            response,
            dataObject,
            metadata
          );
          const ns = import_schema5.NormalizedSchema.of(errorSchema);
          const message = (_c = (_b = dataObject.message) != null ? _b : dataObject.Message) != null ? _c : 'Unknown';
          const exception = new errorSchema.ctor(message);
          const output = {};
          for (const [name, member] of ns.structIterator()) {
            const target = (_d = member.getMergedTraits().jsonName) != null ? _d : name;
            output[name] = this.codec.createDeserializer().readObject(member, dataObject[target]);
          }
          if (this.awsQueryCompatible) {
            this.mixin.queryCompatOutput(dataObject, output);
          }
          throw Object.assign(
            exception,
            errorMetadata,
            {
              $fault: ns.getMergedTraits().error,
              message,
            },
            output
          );
        }
      }),
      (() => {
        __name(_a8, 'AwsJsonRpcProtocol');
      })(),
      _a8);
    var _a9;
    var AwsJson1_0Protocol =
      ((_a9 = class extends AwsJsonRpcProtocol {
        constructor({ defaultNamespace, serviceTarget, awsQueryCompatible }) {
          super({
            defaultNamespace,
            serviceTarget,
            awsQueryCompatible,
          });
        }
        getShapeId() {
          return 'aws.protocols#awsJson1_0';
        }
        getJsonRpcVersion() {
          return '1.0';
        }
        getDefaultContentType() {
          return 'application/x-amz-json-1.0';
        }
      }),
      (() => {
        __name(_a9, 'AwsJson1_0Protocol');
      })(),
      _a9);
    var _a10;
    var AwsJson1_1Protocol =
      ((_a10 = class extends AwsJsonRpcProtocol {
        constructor({ defaultNamespace, serviceTarget, awsQueryCompatible }) {
          super({
            defaultNamespace,
            serviceTarget,
            awsQueryCompatible,
          });
        }
        getShapeId() {
          return 'aws.protocols#awsJson1_1';
        }
        getJsonRpcVersion() {
          return '1.1';
        }
        getDefaultContentType() {
          return 'application/x-amz-json-1.1';
        }
      }),
      (() => {
        __name(_a10, 'AwsJson1_1Protocol');
      })(),
      _a10);
    var import_protocols2 = require_protocols2();
    var import_schema6 = require_schema2();
    var _a11;
    var AwsRestJsonProtocol =
      ((_a11 = class extends import_protocols2.HttpBindingProtocol {
        serializer;
        deserializer;
        codec;
        mixin = new ProtocolLib();
        constructor({ defaultNamespace }) {
          super({
            defaultNamespace,
          });
          const settings = {
            timestampFormat: {
              useTrait: true,
              default: import_schema6.SCHEMA.TIMESTAMP_EPOCH_SECONDS,
            },
            httpBindings: true,
            jsonName: true,
          };
          this.codec = new JsonCodec(settings);
          this.serializer = new import_protocols2.HttpInterceptingShapeSerializer(
            this.codec.createSerializer(),
            settings
          );
          this.deserializer = new import_protocols2.HttpInterceptingShapeDeserializer(
            this.codec.createDeserializer(),
            settings
          );
        }
        getShapeId() {
          return 'aws.protocols#restJson1';
        }
        getPayloadCodec() {
          return this.codec;
        }
        setSerdeContext(serdeContext) {
          this.codec.setSerdeContext(serdeContext);
          super.setSerdeContext(serdeContext);
        }
        async serializeRequest(operationSchema, input, context) {
          const request = await super.serializeRequest(operationSchema, input, context);
          const inputSchema = import_schema6.NormalizedSchema.of(operationSchema.input);
          if (!request.headers['content-type']) {
            const contentType = this.mixin.resolveRestContentType(this.getDefaultContentType(), inputSchema);
            if (contentType) {
              request.headers['content-type'] = contentType;
            }
          }
          if (request.headers['content-type'] && !request.body) {
            request.body = '{}';
          }
          if (request.body) {
            try {
              request.headers['content-length'] = this.mixin.calculateContentLength(request.body, this.serdeContext);
            } catch (e) {}
          }
          return request;
        }
        async handleError(operationSchema, context, response, dataObject, metadata) {
          var _a19, _b, _c, _d;
          const errorIdentifier = (_a19 = loadRestJsonErrorCode(response, dataObject)) != null ? _a19 : 'Unknown';
          const { errorSchema, errorMetadata } = await this.mixin.getErrorSchemaOrThrowBaseException(
            errorIdentifier,
            this.options.defaultNamespace,
            response,
            dataObject,
            metadata
          );
          const ns = import_schema6.NormalizedSchema.of(errorSchema);
          const message = (_c = (_b = dataObject.message) != null ? _b : dataObject.Message) != null ? _c : 'Unknown';
          const exception = new errorSchema.ctor(message);
          await this.deserializeHttpMessage(errorSchema, context, response, dataObject);
          const output = {};
          for (const [name, member] of ns.structIterator()) {
            const target = (_d = member.getMergedTraits().jsonName) != null ? _d : name;
            output[name] = this.codec.createDeserializer().readObject(member, dataObject[target]);
          }
          throw Object.assign(
            exception,
            errorMetadata,
            {
              $fault: ns.getMergedTraits().error,
              message,
            },
            output
          );
        }
        getDefaultContentType() {
          return 'application/json';
        }
      }),
      (() => {
        __name(_a11, 'AwsRestJsonProtocol');
      })(),
      _a11);
    var import_smithy_client2 = require_dist_cjs27();
    var awsExpectUnion = /* @__PURE__ */ __name((value) => {
      if (value == null) {
        return void 0;
      }
      if (typeof value === 'object' && '__type' in value) {
        delete value.__type;
      }
      return (0, import_smithy_client2.expectUnion)(value);
    }, 'awsExpectUnion');
    var import_protocols5 = require_protocols2();
    var import_schema9 = require_schema2();
    var import_protocols3 = require_protocols2();
    var import_schema7 = require_schema2();
    var import_smithy_client3 = require_dist_cjs27();
    var import_util_utf82 = require_dist_cjs10();
    var import_fast_xml_parser = require_fxp();
    var _a12;
    var XmlShapeDeserializer =
      ((_a12 = class extends SerdeContextConfig {
        constructor(settings) {
          super();
          this.settings = settings;
          this.stringDeserializer = new import_protocols3.FromStringShapeDeserializer(settings);
        }
        stringDeserializer;
        setSerdeContext(serdeContext) {
          this.serdeContext = serdeContext;
          this.stringDeserializer.setSerdeContext(serdeContext);
        }
        read(schema, bytes, key) {
          var _a19, _b;
          const ns = import_schema7.NormalizedSchema.of(schema);
          const memberSchemas = ns.getMemberSchemas();
          const isEventPayload =
            ns.isStructSchema() &&
            ns.isMemberSchema() &&
            !!Object.values(memberSchemas).find((memberNs) => {
              return !!memberNs.getMemberTraits().eventPayload;
            });
          if (isEventPayload) {
            const output = {};
            const memberName = Object.keys(memberSchemas)[0];
            const eventMemberSchema = memberSchemas[memberName];
            if (eventMemberSchema.isBlobSchema()) {
              output[memberName] = bytes;
            } else {
              output[memberName] = this.read(memberSchemas[memberName], bytes);
            }
            return output;
          }
          const xmlString = (
            (_b = (_a19 = this.serdeContext) == null ? void 0 : _a19.utf8Encoder) != null
              ? _b
              : import_util_utf82.toUtf8
          )(bytes);
          const parsedObject = this.parseXml(xmlString);
          return this.readSchema(schema, key ? parsedObject[key] : parsedObject);
        }
        readSchema(_schema, value) {
          var _a19, _b, _c, _d, _e, _f;
          const ns = import_schema7.NormalizedSchema.of(_schema);
          const traits = ns.getMergedTraits();
          if (ns.isListSchema() && !Array.isArray(value)) {
            return this.readSchema(ns, [value]);
          }
          if (value == null) {
            return value;
          }
          if (typeof value === 'object') {
            const sparse = !!traits.sparse;
            const flat = !!traits.xmlFlattened;
            if (ns.isListSchema()) {
              const listValue = ns.getValueSchema();
              const buffer2 = [];
              const sourceKey = (_a19 = listValue.getMergedTraits().xmlName) != null ? _a19 : 'member';
              const source = flat ? value : ((_b = value[0]) != null ? _b : value)[sourceKey];
              const sourceArray = Array.isArray(source) ? source : [source];
              for (const v of sourceArray) {
                if (v != null || sparse) {
                  buffer2.push(this.readSchema(listValue, v));
                }
              }
              return buffer2;
            }
            const buffer = {};
            if (ns.isMapSchema()) {
              const keyNs = ns.getKeySchema();
              const memberNs = ns.getValueSchema();
              let entries;
              if (flat) {
                entries = Array.isArray(value) ? value : [value];
              } else {
                entries = Array.isArray(value.entry) ? value.entry : [value.entry];
              }
              const keyProperty = (_c = keyNs.getMergedTraits().xmlName) != null ? _c : 'key';
              const valueProperty = (_d = memberNs.getMergedTraits().xmlName) != null ? _d : 'value';
              for (const entry of entries) {
                const key = entry[keyProperty];
                const value2 = entry[valueProperty];
                if (value2 != null || sparse) {
                  buffer[key] = this.readSchema(memberNs, value2);
                }
              }
              return buffer;
            }
            if (ns.isStructSchema()) {
              for (const [memberName, memberSchema] of ns.structIterator()) {
                const memberTraits = memberSchema.getMergedTraits();
                const xmlObjectKey = !memberTraits.httpPayload
                  ? (_e = memberSchema.getMemberTraits().xmlName) != null
                    ? _e
                    : memberName
                  : (_f = memberTraits.xmlName) != null
                  ? _f
                  : memberSchema.getName();
                if (value[xmlObjectKey] != null) {
                  buffer[memberName] = this.readSchema(memberSchema, value[xmlObjectKey]);
                }
              }
              return buffer;
            }
            if (ns.isDocumentSchema()) {
              return value;
            }
            throw new Error(`@aws-sdk/core/protocols - xml deserializer unhandled schema type for ${ns.getName(true)}`);
          }
          if (ns.isListSchema()) {
            return [];
          }
          if (ns.isMapSchema() || ns.isStructSchema()) {
            return {};
          }
          return this.stringDeserializer.read(ns, value);
        }
        parseXml(xml) {
          if (xml.length) {
            const parser = new import_fast_xml_parser.XMLParser({
              attributeNamePrefix: '',
              htmlEntities: true,
              ignoreAttributes: false,
              ignoreDeclaration: true,
              parseTagValue: false,
              trimValues: false,
              tagValueProcessor: /* @__PURE__ */ __name(
                (_, val) => (val.trim() === '' && val.includes('\n') ? '' : void 0),
                'tagValueProcessor'
              ),
            });
            parser.addEntity('#xD', '\r');
            parser.addEntity('#10', '\n');
            let parsedObj;
            try {
              parsedObj = parser.parse(xml, true);
            } catch (e) {
              if (e && typeof e === 'object') {
                Object.defineProperty(e, '$responseBodyText', {
                  value: xml,
                });
              }
              throw e;
            }
            const textNodeName = '#text';
            const key = Object.keys(parsedObj)[0];
            const parsedObjToReturn = parsedObj[key];
            if (parsedObjToReturn[textNodeName]) {
              parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
              delete parsedObjToReturn[textNodeName];
            }
            return (0, import_smithy_client3.getValueFromTextNode)(parsedObjToReturn);
          }
          return {};
        }
      }),
      (() => {
        __name(_a12, 'XmlShapeDeserializer');
      })(),
      _a12);
    var import_protocols4 = require_protocols2();
    var import_schema8 = require_schema2();
    var import_serde5 = require_serde2();
    var import_smithy_client4 = require_dist_cjs27();
    var import_util_base642 = require_dist_cjs11();
    var _a13;
    var QueryShapeSerializer =
      ((_a13 = class extends SerdeContextConfig {
        constructor(settings) {
          super();
          this.settings = settings;
        }
        buffer;
        write(schema, value, prefix = '') {
          var _a19, _b;
          if (this.buffer === void 0) {
            this.buffer = '';
          }
          const ns = import_schema8.NormalizedSchema.of(schema);
          if (prefix && !prefix.endsWith('.')) {
            prefix += '.';
          }
          if (ns.isBlobSchema()) {
            if (typeof value === 'string' || value instanceof Uint8Array) {
              this.writeKey(prefix);
              this.writeValue(
                ((_b = (_a19 = this.serdeContext) == null ? void 0 : _a19.base64Encoder) != null
                  ? _b
                  : import_util_base642.toBase64)(value)
              );
            }
          } else if (ns.isBooleanSchema() || ns.isNumericSchema() || ns.isStringSchema()) {
            if (value != null) {
              this.writeKey(prefix);
              this.writeValue(String(value));
            } else if (ns.isIdempotencyToken()) {
              this.writeKey(prefix);
              this.writeValue((0, import_serde5.generateIdempotencyToken)());
            }
          } else if (ns.isBigIntegerSchema()) {
            if (value != null) {
              this.writeKey(prefix);
              this.writeValue(String(value));
            }
          } else if (ns.isBigDecimalSchema()) {
            if (value != null) {
              this.writeKey(prefix);
              this.writeValue(value instanceof import_serde5.NumericValue ? value.string : String(value));
            }
          } else if (ns.isTimestampSchema()) {
            if (value instanceof Date) {
              this.writeKey(prefix);
              const format = (0, import_protocols4.determineTimestampFormat)(ns, this.settings);
              switch (format) {
                case import_schema8.SCHEMA.TIMESTAMP_DATE_TIME:
                  this.writeValue(value.toISOString().replace('.000Z', 'Z'));
                  break;
                case import_schema8.SCHEMA.TIMESTAMP_HTTP_DATE:
                  this.writeValue((0, import_smithy_client4.dateToUtcString)(value));
                  break;
                case import_schema8.SCHEMA.TIMESTAMP_EPOCH_SECONDS:
                  this.writeValue(String(value.getTime() / 1e3));
                  break;
              }
            }
          } else if (ns.isDocumentSchema()) {
            throw new Error(`@aws-sdk/core/protocols - QuerySerializer unsupported document type ${ns.getName(true)}`);
          } else if (ns.isListSchema()) {
            if (Array.isArray(value)) {
              if (value.length === 0) {
                if (this.settings.serializeEmptyLists) {
                  this.writeKey(prefix);
                  this.writeValue('');
                }
              } else {
                const member = ns.getValueSchema();
                const flat = this.settings.flattenLists || ns.getMergedTraits().xmlFlattened;
                let i = 1;
                for (const item of value) {
                  if (item == null) {
                    continue;
                  }
                  const suffix = this.getKey('member', member.getMergedTraits().xmlName);
                  const key = flat ? `${prefix}${i}` : `${prefix}${suffix}.${i}`;
                  this.write(member, item, key);
                  ++i;
                }
              }
            }
          } else if (ns.isMapSchema()) {
            if (value && typeof value === 'object') {
              const keySchema = ns.getKeySchema();
              const memberSchema = ns.getValueSchema();
              const flat = ns.getMergedTraits().xmlFlattened;
              let i = 1;
              for (const [k, v] of Object.entries(value)) {
                if (v == null) {
                  continue;
                }
                const keySuffix = this.getKey('key', keySchema.getMergedTraits().xmlName);
                const key = flat ? `${prefix}${i}.${keySuffix}` : `${prefix}entry.${i}.${keySuffix}`;
                const valueSuffix = this.getKey('value', memberSchema.getMergedTraits().xmlName);
                const valueKey = flat ? `${prefix}${i}.${valueSuffix}` : `${prefix}entry.${i}.${valueSuffix}`;
                this.write(keySchema, k, key);
                this.write(memberSchema, v, valueKey);
                ++i;
              }
            }
          } else if (ns.isStructSchema()) {
            if (value && typeof value === 'object') {
              for (const [memberName, member] of ns.structIterator()) {
                if (value[memberName] == null && !member.isIdempotencyToken()) {
                  continue;
                }
                const suffix = this.getKey(memberName, member.getMergedTraits().xmlName);
                const key = `${prefix}${suffix}`;
                this.write(member, value[memberName], key);
              }
            }
          } else if (ns.isUnitSchema()) {
          } else {
            throw new Error(`@aws-sdk/core/protocols - QuerySerializer unrecognized schema type ${ns.getName(true)}`);
          }
        }
        flush() {
          if (this.buffer === void 0) {
            throw new Error('@aws-sdk/core/protocols - QuerySerializer cannot flush with nothing written to buffer.');
          }
          const str = this.buffer;
          delete this.buffer;
          return str;
        }
        getKey(memberName, xmlName) {
          const key = xmlName != null ? xmlName : memberName;
          if (this.settings.capitalizeKeys) {
            return key[0].toUpperCase() + key.slice(1);
          }
          return key;
        }
        writeKey(key) {
          if (key.endsWith('.')) {
            key = key.slice(0, key.length - 1);
          }
          this.buffer += `&${(0, import_protocols4.extendedEncodeURIComponent)(key)}=`;
        }
        writeValue(value) {
          this.buffer += (0, import_protocols4.extendedEncodeURIComponent)(value);
        }
      }),
      (() => {
        __name(_a13, 'QueryShapeSerializer');
      })(),
      _a13);
    var _a14;
    var AwsQueryProtocol =
      ((_a14 = class extends import_protocols5.RpcProtocol {
        constructor(options) {
          super({
            defaultNamespace: options.defaultNamespace,
          });
          this.options = options;
          const settings = {
            timestampFormat: {
              useTrait: true,
              default: import_schema9.SCHEMA.TIMESTAMP_DATE_TIME,
            },
            httpBindings: false,
            xmlNamespace: options.xmlNamespace,
            serviceNamespace: options.defaultNamespace,
            serializeEmptyLists: true,
          };
          this.serializer = new QueryShapeSerializer(settings);
          this.deserializer = new XmlShapeDeserializer(settings);
        }
        serializer;
        deserializer;
        mixin = new ProtocolLib();
        getShapeId() {
          return 'aws.protocols#awsQuery';
        }
        setSerdeContext(serdeContext) {
          this.serializer.setSerdeContext(serdeContext);
          this.deserializer.setSerdeContext(serdeContext);
        }
        getPayloadCodec() {
          throw new Error('AWSQuery protocol has no payload codec.');
        }
        async serializeRequest(operationSchema, input, context) {
          var _a19;
          const request = await super.serializeRequest(operationSchema, input, context);
          if (!request.path.endsWith('/')) {
            request.path += '/';
          }
          Object.assign(request.headers, {
            'content-type': `application/x-www-form-urlencoded`,
          });
          if ((0, import_schema9.deref)(operationSchema.input) === 'unit' || !request.body) {
            request.body = '';
          }
          const action = (_a19 = operationSchema.name.split('#')[1]) != null ? _a19 : operationSchema.name;
          request.body = `Action=${action}&Version=${this.options.version}` + request.body;
          if (request.body.endsWith('&')) {
            request.body = request.body.slice(-1);
          }
          try {
            request.headers['content-length'] = this.mixin.calculateContentLength(request.body, this.serdeContext);
          } catch (e) {}
          return request;
        }
        async deserializeResponse(operationSchema, context, response) {
          var _a19;
          const deserializer = this.deserializer;
          const ns = import_schema9.NormalizedSchema.of(operationSchema.output);
          const dataObject = {};
          if (response.statusCode >= 300) {
            const bytes2 = await (0, import_protocols5.collectBody)(response.body, context);
            if (bytes2.byteLength > 0) {
              Object.assign(dataObject, await deserializer.read(import_schema9.SCHEMA.DOCUMENT, bytes2));
            }
            await this.handleError(operationSchema, context, response, dataObject, this.deserializeMetadata(response));
          }
          for (const header in response.headers) {
            const value = response.headers[header];
            delete response.headers[header];
            response.headers[header.toLowerCase()] = value;
          }
          const shortName = (_a19 = operationSchema.name.split('#')[1]) != null ? _a19 : operationSchema.name;
          const awsQueryResultKey = ns.isStructSchema() && this.useNestedResult() ? shortName + 'Result' : void 0;
          const bytes = await (0, import_protocols5.collectBody)(response.body, context);
          if (bytes.byteLength > 0) {
            Object.assign(dataObject, await deserializer.read(ns, bytes, awsQueryResultKey));
          }
          const output = __spreadValues(
            {
              $metadata: this.deserializeMetadata(response),
            },
            dataObject
          );
          return output;
        }
        useNestedResult() {
          return true;
        }
        async handleError(operationSchema, context, response, dataObject, metadata) {
          var _a19, _b, _c;
          const errorIdentifier = (_a19 = this.loadQueryErrorCode(response, dataObject)) != null ? _a19 : 'Unknown';
          const errorData = this.loadQueryError(dataObject);
          const { errorSchema, errorMetadata } = await this.mixin.getErrorSchemaOrThrowBaseException(
            errorIdentifier,
            this.options.defaultNamespace,
            response,
            errorData,
            metadata,
            (registry, errorName) =>
              registry.find((schema) => {
                var _a20;
                return (
                  ((_a20 = import_schema9.NormalizedSchema.of(schema).getMergedTraits().awsQueryError) == null
                    ? void 0
                    : _a20[0]) === errorName
                );
              })
          );
          const ns = import_schema9.NormalizedSchema.of(errorSchema);
          const message = this.loadQueryErrorMessage(dataObject);
          const exception = new errorSchema.ctor(message);
          const output = {};
          for (const [name, member] of ns.structIterator()) {
            const target = (_b = member.getMergedTraits().xmlName) != null ? _b : name;
            const value = (_c = errorData[target]) != null ? _c : dataObject[target];
            output[name] = this.deserializer.readSchema(member, value);
          }
          throw Object.assign(
            exception,
            errorMetadata,
            {
              $fault: ns.getMergedTraits().error,
              message,
            },
            output
          );
        }
        loadQueryErrorCode(output, data) {
          var _a19, _b, _c, _d, _e, _f;
          const code =
            (_f =
              (_e =
                (_d = (_b = (_a19 = data.Errors) == null ? void 0 : _a19[0]) == null ? void 0 : _b.Error) != null
                  ? _d
                  : (_c = data.Errors) == null
                  ? void 0
                  : _c.Error) != null
                ? _e
                : data.Error) == null
              ? void 0
              : _f.Code;
          if (code !== void 0) {
            return code;
          }
          if (output.statusCode == 404) {
            return 'NotFound';
          }
        }
        loadQueryError(data) {
          var _a19, _b, _c, _d, _e;
          return (_e =
            (_d = (_b = (_a19 = data.Errors) == null ? void 0 : _a19[0]) == null ? void 0 : _b.Error) != null
              ? _d
              : (_c = data.Errors) == null
              ? void 0
              : _c.Error) != null
            ? _e
            : data.Error;
        }
        loadQueryErrorMessage(data) {
          var _a19, _b, _c, _d;
          const errorData = this.loadQueryError(data);
          return (_d =
            (_c =
              (_b =
                (_a19 = errorData == null ? void 0 : errorData.message) != null
                  ? _a19
                  : errorData == null
                  ? void 0
                  : errorData.Message) != null
                ? _b
                : data.message) != null
              ? _c
              : data.Message) != null
            ? _d
            : 'Unknown';
        }
        getDefaultContentType() {
          return 'application/x-www-form-urlencoded';
        }
      }),
      (() => {
        __name(_a14, 'AwsQueryProtocol');
      })(),
      _a14);
    var _a15;
    var AwsEc2QueryProtocol =
      ((_a15 = class extends AwsQueryProtocol {
        constructor(options) {
          super(options);
          this.options = options;
          const ec2Settings = {
            capitalizeKeys: true,
            flattenLists: true,
            serializeEmptyLists: false,
          };
          Object.assign(this.serializer.settings, ec2Settings);
        }
        useNestedResult() {
          return false;
        }
      }),
      (() => {
        __name(_a15, 'AwsEc2QueryProtocol');
      })(),
      _a15);
    var import_protocols6 = require_protocols2();
    var import_schema11 = require_schema2();
    var import_smithy_client5 = require_dist_cjs27();
    var import_fast_xml_parser2 = require_fxp();
    var parseXmlBody = /* @__PURE__ */ __name(
      (streamBody, context) =>
        collectBodyString(streamBody, context).then((encoded) => {
          if (encoded.length) {
            const parser = new import_fast_xml_parser2.XMLParser({
              attributeNamePrefix: '',
              htmlEntities: true,
              ignoreAttributes: false,
              ignoreDeclaration: true,
              parseTagValue: false,
              trimValues: false,
              tagValueProcessor: /* @__PURE__ */ __name(
                (_, val) => (val.trim() === '' && val.includes('\n') ? '' : void 0),
                'tagValueProcessor'
              ),
            });
            parser.addEntity('#xD', '\r');
            parser.addEntity('#10', '\n');
            let parsedObj;
            try {
              parsedObj = parser.parse(encoded, true);
            } catch (e) {
              if (e && typeof e === 'object') {
                Object.defineProperty(e, '$responseBodyText', {
                  value: encoded,
                });
              }
              throw e;
            }
            const textNodeName = '#text';
            const key = Object.keys(parsedObj)[0];
            const parsedObjToReturn = parsedObj[key];
            if (parsedObjToReturn[textNodeName]) {
              parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
              delete parsedObjToReturn[textNodeName];
            }
            return (0, import_smithy_client5.getValueFromTextNode)(parsedObjToReturn);
          }
          return {};
        }),
      'parseXmlBody'
    );
    var parseXmlErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
      var _a19;
      const value = await parseXmlBody(errorBody, context);
      if (value.Error) {
        value.Error.message = (_a19 = value.Error.message) != null ? _a19 : value.Error.Message;
      }
      return value;
    }, 'parseXmlErrorBody');
    var loadRestXmlErrorCode = /* @__PURE__ */ __name((output, data) => {
      var _a19;
      if (((_a19 = data == null ? void 0 : data.Error) == null ? void 0 : _a19.Code) !== void 0) {
        return data.Error.Code;
      }
      if ((data == null ? void 0 : data.Code) !== void 0) {
        return data.Code;
      }
      if (output.statusCode == 404) {
        return 'NotFound';
      }
    }, 'loadRestXmlErrorCode');
    var import_xml_builder = require_dist_cjs28();
    var import_schema10 = require_schema2();
    var import_serde6 = require_serde2();
    var import_smithy_client6 = require_dist_cjs27();
    var import_util_base643 = require_dist_cjs11();
    var _a16;
    var XmlShapeSerializer =
      ((_a16 = class extends SerdeContextConfig {
        constructor(settings) {
          super();
          this.settings = settings;
        }
        stringBuffer;
        byteBuffer;
        buffer;
        write(schema, value) {
          var _a19, _b;
          const ns = import_schema10.NormalizedSchema.of(schema);
          if (ns.isStringSchema() && typeof value === 'string') {
            this.stringBuffer = value;
          } else if (ns.isBlobSchema()) {
            this.byteBuffer =
              'byteLength' in value
                ? value
                : ((_b = (_a19 = this.serdeContext) == null ? void 0 : _a19.base64Decoder) != null
                    ? _b
                    : import_util_base643.fromBase64)(value);
          } else {
            this.buffer = this.writeStruct(ns, value, void 0);
            const traits = ns.getMergedTraits();
            if (traits.httpPayload && !traits.xmlName) {
              this.buffer.withName(ns.getName());
            }
          }
        }
        flush() {
          var _a19;
          if (this.byteBuffer !== void 0) {
            const bytes = this.byteBuffer;
            delete this.byteBuffer;
            return bytes;
          }
          if (this.stringBuffer !== void 0) {
            const str = this.stringBuffer;
            delete this.stringBuffer;
            return str;
          }
          const buffer = this.buffer;
          if (this.settings.xmlNamespace) {
            if (!((_a19 = buffer == null ? void 0 : buffer.attributes) == null ? void 0 : _a19['xmlns'])) {
              buffer.addAttribute('xmlns', this.settings.xmlNamespace);
            }
          }
          delete this.buffer;
          return buffer.toString();
        }
        writeStruct(ns, value, parentXmlns) {
          var _a19, _b, _c, _d;
          const traits = ns.getMergedTraits();
          const name =
            ns.isMemberSchema() && !traits.httpPayload
              ? (_a19 = ns.getMemberTraits().xmlName) != null
                ? _a19
                : ns.getMemberName()
              : (_b = traits.xmlName) != null
              ? _b
              : ns.getName();
          if (!name || !ns.isStructSchema()) {
            throw new Error(
              `@aws-sdk/core/protocols - xml serializer, cannot write struct with empty name or non-struct, schema=${ns.getName(
                true
              )}.`
            );
          }
          const structXmlNode = import_xml_builder.XmlNode.of(name);
          const [xmlnsAttr, xmlns] = this.getXmlnsAttribute(ns, parentXmlns);
          for (const [memberName, memberSchema] of ns.structIterator()) {
            const val = value[memberName];
            if (val != null || memberSchema.isIdempotencyToken()) {
              if (memberSchema.getMergedTraits().xmlAttribute) {
                structXmlNode.addAttribute(
                  (_c = memberSchema.getMergedTraits().xmlName) != null ? _c : memberName,
                  this.writeSimple(memberSchema, val)
                );
                continue;
              }
              if (memberSchema.isListSchema()) {
                this.writeList(memberSchema, val, structXmlNode, xmlns);
              } else if (memberSchema.isMapSchema()) {
                this.writeMap(memberSchema, val, structXmlNode, xmlns);
              } else if (memberSchema.isStructSchema()) {
                structXmlNode.addChildNode(this.writeStruct(memberSchema, val, xmlns));
              } else {
                const memberNode = import_xml_builder.XmlNode.of(
                  (_d = memberSchema.getMergedTraits().xmlName) != null ? _d : memberSchema.getMemberName()
                );
                this.writeSimpleInto(memberSchema, val, memberNode, xmlns);
                structXmlNode.addChildNode(memberNode);
              }
            }
          }
          if (xmlns) {
            structXmlNode.addAttribute(xmlnsAttr, xmlns);
          }
          return structXmlNode;
        }
        writeList(listMember, array, container, parentXmlns) {
          var _a19;
          if (!listMember.isMemberSchema()) {
            throw new Error(
              `@aws-sdk/core/protocols - xml serializer, cannot write non-member list: ${listMember.getName(true)}`
            );
          }
          const listTraits = listMember.getMergedTraits();
          const listValueSchema = listMember.getValueSchema();
          const listValueTraits = listValueSchema.getMergedTraits();
          const sparse = !!listValueTraits.sparse;
          const flat = !!listTraits.xmlFlattened;
          const [xmlnsAttr, xmlns] = this.getXmlnsAttribute(listMember, parentXmlns);
          const writeItem = /* @__PURE__ */ __name((container2, value) => {
            var _a20, _b, _c, _d;
            if (listValueSchema.isListSchema()) {
              this.writeList(listValueSchema, Array.isArray(value) ? value : [value], container2, xmlns);
            } else if (listValueSchema.isMapSchema()) {
              this.writeMap(listValueSchema, value, container2, xmlns);
            } else if (listValueSchema.isStructSchema()) {
              const struct = this.writeStruct(listValueSchema, value, xmlns);
              container2.addChildNode(
                struct.withName(
                  flat
                    ? (_a20 = listTraits.xmlName) != null
                      ? _a20
                      : listMember.getMemberName()
                    : (_b = listValueTraits.xmlName) != null
                    ? _b
                    : 'member'
                )
              );
            } else {
              const listItemNode = import_xml_builder.XmlNode.of(
                flat
                  ? (_c = listTraits.xmlName) != null
                    ? _c
                    : listMember.getMemberName()
                  : (_d = listValueTraits.xmlName) != null
                  ? _d
                  : 'member'
              );
              this.writeSimpleInto(listValueSchema, value, listItemNode, xmlns);
              container2.addChildNode(listItemNode);
            }
          }, 'writeItem');
          if (flat) {
            for (const value of array) {
              if (sparse || value != null) {
                writeItem(container, value);
              }
            }
          } else {
            const listNode = import_xml_builder.XmlNode.of(
              (_a19 = listTraits.xmlName) != null ? _a19 : listMember.getMemberName()
            );
            if (xmlns) {
              listNode.addAttribute(xmlnsAttr, xmlns);
            }
            for (const value of array) {
              if (sparse || value != null) {
                writeItem(listNode, value);
              }
            }
            container.addChildNode(listNode);
          }
        }
        writeMap(mapMember, map, container, parentXmlns, containerIsMap = false) {
          var _a19, _b, _c, _d;
          if (!mapMember.isMemberSchema()) {
            throw new Error(
              `@aws-sdk/core/protocols - xml serializer, cannot write non-member map: ${mapMember.getName(true)}`
            );
          }
          const mapTraits = mapMember.getMergedTraits();
          const mapKeySchema = mapMember.getKeySchema();
          const mapKeyTraits = mapKeySchema.getMergedTraits();
          const keyTag = (_a19 = mapKeyTraits.xmlName) != null ? _a19 : 'key';
          const mapValueSchema = mapMember.getValueSchema();
          const mapValueTraits = mapValueSchema.getMergedTraits();
          const valueTag = (_b = mapValueTraits.xmlName) != null ? _b : 'value';
          const sparse = !!mapValueTraits.sparse;
          const flat = !!mapTraits.xmlFlattened;
          const [xmlnsAttr, xmlns] = this.getXmlnsAttribute(mapMember, parentXmlns);
          const addKeyValue = /* @__PURE__ */ __name((entry, key, val) => {
            const keyNode = import_xml_builder.XmlNode.of(keyTag, key);
            const [keyXmlnsAttr, keyXmlns] = this.getXmlnsAttribute(mapKeySchema, xmlns);
            if (keyXmlns) {
              keyNode.addAttribute(keyXmlnsAttr, keyXmlns);
            }
            entry.addChildNode(keyNode);
            let valueNode = import_xml_builder.XmlNode.of(valueTag);
            if (mapValueSchema.isListSchema()) {
              this.writeList(mapValueSchema, val, valueNode, xmlns);
            } else if (mapValueSchema.isMapSchema()) {
              this.writeMap(mapValueSchema, val, valueNode, xmlns, true);
            } else if (mapValueSchema.isStructSchema()) {
              valueNode = this.writeStruct(mapValueSchema, val, xmlns);
            } else {
              this.writeSimpleInto(mapValueSchema, val, valueNode, xmlns);
            }
            entry.addChildNode(valueNode);
          }, 'addKeyValue');
          if (flat) {
            for (const [key, val] of Object.entries(map)) {
              if (sparse || val != null) {
                const entry = import_xml_builder.XmlNode.of(
                  (_c = mapTraits.xmlName) != null ? _c : mapMember.getMemberName()
                );
                addKeyValue(entry, key, val);
                container.addChildNode(entry);
              }
            }
          } else {
            let mapNode;
            if (!containerIsMap) {
              mapNode = import_xml_builder.XmlNode.of(
                (_d = mapTraits.xmlName) != null ? _d : mapMember.getMemberName()
              );
              if (xmlns) {
                mapNode.addAttribute(xmlnsAttr, xmlns);
              }
              container.addChildNode(mapNode);
            }
            for (const [key, val] of Object.entries(map)) {
              if (sparse || val != null) {
                const entry = import_xml_builder.XmlNode.of('entry');
                addKeyValue(entry, key, val);
                (containerIsMap ? container : mapNode).addChildNode(entry);
              }
            }
          }
        }
        writeSimple(_schema, value) {
          var _a19, _b, _c;
          if (value === null) {
            throw new Error('@aws-sdk/core/protocols - (XML serializer) cannot write null value.');
          }
          const ns = import_schema10.NormalizedSchema.of(_schema);
          let nodeContents = null;
          if (value && typeof value === 'object') {
            if (ns.isBlobSchema()) {
              nodeContents = (
                (_b = (_a19 = this.serdeContext) == null ? void 0 : _a19.base64Encoder) != null
                  ? _b
                  : import_util_base643.toBase64
              )(value);
            } else if (ns.isTimestampSchema() && value instanceof Date) {
              const options = this.settings.timestampFormat;
              const format = options.useTrait
                ? ns.getSchema() === import_schema10.SCHEMA.TIMESTAMP_DEFAULT
                  ? options.default
                  : (_c = ns.getSchema()) != null
                  ? _c
                  : options.default
                : options.default;
              switch (format) {
                case import_schema10.SCHEMA.TIMESTAMP_DATE_TIME:
                  nodeContents = value.toISOString().replace('.000Z', 'Z');
                  break;
                case import_schema10.SCHEMA.TIMESTAMP_HTTP_DATE:
                  nodeContents = (0, import_smithy_client6.dateToUtcString)(value);
                  break;
                case import_schema10.SCHEMA.TIMESTAMP_EPOCH_SECONDS:
                  nodeContents = String(value.getTime() / 1e3);
                  break;
                default:
                  console.warn('Missing timestamp format, using http date', value);
                  nodeContents = (0, import_smithy_client6.dateToUtcString)(value);
                  break;
              }
            } else if (ns.isBigDecimalSchema() && value) {
              if (value instanceof import_serde6.NumericValue) {
                return value.string;
              }
              return String(value);
            } else if (ns.isMapSchema() || ns.isListSchema()) {
              throw new Error(
                '@aws-sdk/core/protocols - xml serializer, cannot call _write() on List/Map schema, call writeList or writeMap() instead.'
              );
            } else {
              throw new Error(
                `@aws-sdk/core/protocols - xml serializer, unhandled schema type for object value and schema: ${ns.getName(
                  true
                )}`
              );
            }
          }
          if (ns.isBooleanSchema() || ns.isNumericSchema() || ns.isBigIntegerSchema() || ns.isBigDecimalSchema()) {
            nodeContents = String(value);
          }
          if (ns.isStringSchema()) {
            if (value === void 0 && ns.isIdempotencyToken()) {
              nodeContents = (0, import_serde6.generateIdempotencyToken)();
            } else {
              nodeContents = String(value);
            }
          }
          if (nodeContents === null) {
            throw new Error(`Unhandled schema-value pair ${ns.getName(true)}=${value}`);
          }
          return nodeContents;
        }
        writeSimpleInto(_schema, value, into, parentXmlns) {
          const nodeContents = this.writeSimple(_schema, value);
          const ns = import_schema10.NormalizedSchema.of(_schema);
          const content = new import_xml_builder.XmlText(nodeContents);
          const [xmlnsAttr, xmlns] = this.getXmlnsAttribute(ns, parentXmlns);
          if (xmlns) {
            into.addAttribute(xmlnsAttr, xmlns);
          }
          into.addChildNode(content);
        }
        getXmlnsAttribute(ns, parentXmlns) {
          var _a19;
          const traits = ns.getMergedTraits();
          const [prefix, xmlns] = (_a19 = traits.xmlNamespace) != null ? _a19 : [];
          if (xmlns && xmlns !== parentXmlns) {
            return [prefix ? `xmlns:${prefix}` : 'xmlns', xmlns];
          }
          return [void 0, void 0];
        }
      }),
      (() => {
        __name(_a16, 'XmlShapeSerializer');
      })(),
      _a16);
    var _a17;
    var XmlCodec =
      ((_a17 = class extends SerdeContextConfig {
        constructor(settings) {
          super();
          this.settings = settings;
        }
        createSerializer() {
          const serializer = new XmlShapeSerializer(this.settings);
          serializer.setSerdeContext(this.serdeContext);
          return serializer;
        }
        createDeserializer() {
          const deserializer = new XmlShapeDeserializer(this.settings);
          deserializer.setSerdeContext(this.serdeContext);
          return deserializer;
        }
      }),
      (() => {
        __name(_a17, 'XmlCodec');
      })(),
      _a17);
    var _a18;
    var AwsRestXmlProtocol =
      ((_a18 = class extends import_protocols6.HttpBindingProtocol {
        codec;
        serializer;
        deserializer;
        mixin = new ProtocolLib();
        constructor(options) {
          super(options);
          const settings = {
            timestampFormat: {
              useTrait: true,
              default: import_schema11.SCHEMA.TIMESTAMP_DATE_TIME,
            },
            httpBindings: true,
            xmlNamespace: options.xmlNamespace,
            serviceNamespace: options.defaultNamespace,
          };
          this.codec = new XmlCodec(settings);
          this.serializer = new import_protocols6.HttpInterceptingShapeSerializer(
            this.codec.createSerializer(),
            settings
          );
          this.deserializer = new import_protocols6.HttpInterceptingShapeDeserializer(
            this.codec.createDeserializer(),
            settings
          );
        }
        getPayloadCodec() {
          return this.codec;
        }
        getShapeId() {
          return 'aws.protocols#restXml';
        }
        async serializeRequest(operationSchema, input, context) {
          const request = await super.serializeRequest(operationSchema, input, context);
          const inputSchema = import_schema11.NormalizedSchema.of(operationSchema.input);
          if (!request.headers['content-type']) {
            const contentType = this.mixin.resolveRestContentType(this.getDefaultContentType(), inputSchema);
            if (contentType) {
              request.headers['content-type'] = contentType;
            }
          }
          if (request.headers['content-type'] === this.getDefaultContentType()) {
            if (typeof request.body === 'string') {
              request.body = '<?xml version="1.0" encoding="UTF-8"?>' + request.body;
            }
          }
          if (request.body) {
            try {
              request.headers['content-length'] = this.mixin.calculateContentLength(request.body, this.serdeContext);
            } catch (e) {}
          }
          return request;
        }
        async deserializeResponse(operationSchema, context, response) {
          return super.deserializeResponse(operationSchema, context, response);
        }
        async handleError(operationSchema, context, response, dataObject, metadata) {
          var _a19, _b, _c, _d, _e, _f, _g, _h, _i, _j;
          const errorIdentifier = (_a19 = loadRestXmlErrorCode(response, dataObject)) != null ? _a19 : 'Unknown';
          const { errorSchema, errorMetadata } = await this.mixin.getErrorSchemaOrThrowBaseException(
            errorIdentifier,
            this.options.defaultNamespace,
            response,
            dataObject,
            metadata
          );
          const ns = import_schema11.NormalizedSchema.of(errorSchema);
          const message =
            (_g =
              (_f =
                (_e =
                  (_d = (_b = dataObject.Error) == null ? void 0 : _b.message) != null
                    ? _d
                    : (_c = dataObject.Error) == null
                    ? void 0
                    : _c.Message) != null
                  ? _e
                  : dataObject.message) != null
                ? _f
                : dataObject.Message) != null
              ? _g
              : 'Unknown';
          const exception = new errorSchema.ctor(message);
          await this.deserializeHttpMessage(errorSchema, context, response, dataObject);
          const output = {};
          for (const [name, member] of ns.structIterator()) {
            const target = (_h = member.getMergedTraits().xmlName) != null ? _h : name;
            const value =
              (_j = (_i = dataObject.Error) == null ? void 0 : _i[target]) != null ? _j : dataObject[target];
            output[name] = this.codec.createDeserializer().readSchema(member, value);
          }
          throw Object.assign(
            exception,
            errorMetadata,
            {
              $fault: ns.getMergedTraits().error,
              message,
            },
            output
          );
        }
        getDefaultContentType() {
          return 'application/xml';
        }
      }),
      (() => {
        __name(_a18, 'AwsRestXmlProtocol');
      })(),
      _a18);
  },
});

// node_modules/@aws-sdk/core/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  'node_modules/@aws-sdk/core/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_httpAuthSchemes(), exports);
    tslib_1.__exportStar(require_protocols3(), exports);
  },
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  'node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      DEFAULT_UA_APP_ID: () => DEFAULT_UA_APP_ID,
      getUserAgentMiddlewareOptions: () => getUserAgentMiddlewareOptions,
      getUserAgentPlugin: () => getUserAgentPlugin,
      resolveUserAgentConfig: () => resolveUserAgentConfig,
      userAgentMiddleware: () => userAgentMiddleware,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_core2 = require_dist_cjs18();
    var DEFAULT_UA_APP_ID = void 0;
    function isValidUserAgentAppId(appId) {
      if (appId === void 0) {
        return true;
      }
      return typeof appId === 'string' && appId.length <= 50;
    }
    __name(isValidUserAgentAppId, 'isValidUserAgentAppId');
    function resolveUserAgentConfig(input) {
      var _a;
      const normalizedAppIdProvider = (0, import_core2.normalizeProvider)(
        (_a = input.userAgentAppId) != null ? _a : DEFAULT_UA_APP_ID
      );
      const { customUserAgent } = input;
      return Object.assign(input, {
        customUserAgent: typeof customUserAgent === 'string' ? [[customUserAgent]] : customUserAgent,
        userAgentAppId: /* @__PURE__ */ __name(async () => {
          var _a2, _b;
          const appId = await normalizedAppIdProvider();
          if (!isValidUserAgentAppId(appId)) {
            const logger2 =
              ((_b = (_a2 = input.logger) == null ? void 0 : _a2.constructor) == null ? void 0 : _b.name) ===
                'NoOpLogger' || !input.logger
                ? console
                : input.logger;
            if (typeof appId !== 'string') {
              logger2 == null ? void 0 : logger2.warn('userAgentAppId must be a string or undefined.');
            } else if (appId.length > 50) {
              logger2 == null
                ? void 0
                : logger2.warn('The provided userAgentAppId exceeds the maximum length of 50 characters.');
            }
          }
          return appId;
        }, 'userAgentAppId'),
      });
    }
    __name(resolveUserAgentConfig, 'resolveUserAgentConfig');
    var import_util_endpoints = require_dist_cjs22();
    var import_protocol_http = require_dist_cjs2();
    var import_core22 = require_dist_cjs29();
    var ACCOUNT_ID_ENDPOINT_REGEX = /\d{12}\.ddb/;
    async function checkFeatures(context, config, args) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const request = args.request;
      if (
        ((_a = request == null ? void 0 : request.headers) == null ? void 0 : _a['smithy-protocol']) === 'rpc-v2-cbor'
      ) {
        (0, import_core22.setFeature)(context, 'PROTOCOL_RPC_V2_CBOR', 'M');
      }
      if (typeof config.retryStrategy === 'function') {
        const retryStrategy = await config.retryStrategy();
        if (typeof retryStrategy.acquireInitialRetryToken === 'function') {
          if (
            (_c = (_b = retryStrategy.constructor) == null ? void 0 : _b.name) == null
              ? void 0
              : _c.includes('Adaptive')
          ) {
            (0, import_core22.setFeature)(context, 'RETRY_MODE_ADAPTIVE', 'F');
          } else {
            (0, import_core22.setFeature)(context, 'RETRY_MODE_STANDARD', 'E');
          }
        } else {
          (0, import_core22.setFeature)(context, 'RETRY_MODE_LEGACY', 'D');
        }
      }
      if (typeof config.accountIdEndpointMode === 'function') {
        const endpointV2 = context.endpointV2;
        if (
          String((_d = endpointV2 == null ? void 0 : endpointV2.url) == null ? void 0 : _d.hostname).match(
            ACCOUNT_ID_ENDPOINT_REGEX
          )
        ) {
          (0, import_core22.setFeature)(context, 'ACCOUNT_ID_ENDPOINT', 'O');
        }
        switch (await ((_e = config.accountIdEndpointMode) == null ? void 0 : _e.call(config))) {
          case 'disabled':
            (0, import_core22.setFeature)(context, 'ACCOUNT_ID_MODE_DISABLED', 'Q');
            break;
          case 'preferred':
            (0, import_core22.setFeature)(context, 'ACCOUNT_ID_MODE_PREFERRED', 'P');
            break;
          case 'required':
            (0, import_core22.setFeature)(context, 'ACCOUNT_ID_MODE_REQUIRED', 'R');
            break;
        }
      }
      const identity =
        (_g = (_f = context.__smithy_context) == null ? void 0 : _f.selectedHttpAuthScheme) == null
          ? void 0
          : _g.identity;
      if (identity == null ? void 0 : identity.$source) {
        const credentials = identity;
        if (credentials.accountId) {
          (0, import_core22.setFeature)(context, 'RESOLVED_ACCOUNT_ID', 'T');
        }
        for (const [key, value] of Object.entries((_h = credentials.$source) != null ? _h : {})) {
          (0, import_core22.setFeature)(context, key, value);
        }
      }
    }
    __name(checkFeatures, 'checkFeatures');
    var USER_AGENT = 'user-agent';
    var X_AMZ_USER_AGENT = 'x-amz-user-agent';
    var SPACE = ' ';
    var UA_NAME_SEPARATOR = '/';
    var UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    var UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    var UA_ESCAPE_CHAR = '-';
    var BYTE_LIMIT = 1024;
    function encodeFeatures(features) {
      let buffer = '';
      for (const key in features) {
        const val = features[key];
        if (buffer.length + val.length + 1 <= BYTE_LIMIT) {
          if (buffer.length) {
            buffer += ',' + val;
          } else {
            buffer += val;
          }
          continue;
        }
        break;
      }
      return buffer;
    }
    __name(encodeFeatures, 'encodeFeatures');
    var userAgentMiddleware = /* @__PURE__ */ __name(
      (options) => (next, context) => async (args) => {
        var _a, _b, _c, _d;
        const { request } = args;
        if (!import_protocol_http.HttpRequest.isInstance(request)) {
          return next(args);
        }
        const { headers } = request;
        const userAgent =
          ((_a = context == null ? void 0 : context.userAgent) == null ? void 0 : _a.map(escapeUserAgent)) || [];
        const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
        await checkFeatures(context, options, args);
        const awsContext = context;
        defaultUserAgent.push(
          `m/${encodeFeatures(
            Object.assign(
              {},
              (_b = context.__smithy_context) == null ? void 0 : _b.features,
              (_c = awsContext.__aws_sdk_context) == null ? void 0 : _c.features
            )
          )}`
        );
        const customUserAgent =
          ((_d = options == null ? void 0 : options.customUserAgent) == null ? void 0 : _d.map(escapeUserAgent)) || [];
        const appId = await options.userAgentAppId();
        if (appId) {
          defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));
        }
        const prefix = (0, import_util_endpoints.getUserAgentPrefix)();
        const sdkUserAgentValue = (prefix ? [prefix] : [])
          .concat([...defaultUserAgent, ...userAgent, ...customUserAgent])
          .join(SPACE);
        const normalUAValue = [
          ...defaultUserAgent.filter((section) => section.startsWith('aws-sdk-')),
          ...customUserAgent,
        ].join(SPACE);
        if (options.runtime !== 'browser') {
          if (normalUAValue) {
            headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT]
              ? `${headers[USER_AGENT]} ${normalUAValue}`
              : normalUAValue;
          }
          headers[USER_AGENT] = sdkUserAgentValue;
        } else {
          headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
        }
        return next(
          __spreadProps(__spreadValues({}, args), {
            request,
          })
        );
      },
      'userAgentMiddleware'
    );
    var escapeUserAgent = /* @__PURE__ */ __name((userAgentPair) => {
      var _a;
      const name = userAgentPair[0]
        .split(UA_NAME_SEPARATOR)
        .map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR))
        .join(UA_NAME_SEPARATOR);
      const version = (_a = userAgentPair[1]) == null ? void 0 : _a.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === 'api') {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version]
        .filter((item) => item && item.length > 0)
        .reduce((acc, item, index) => {
          switch (index) {
            case 0:
              return item;
            case 1:
              return `${acc}/${item}`;
            default:
              return `${acc}#${item}`;
          }
        }, '');
    }, 'escapeUserAgent');
    var getUserAgentMiddlewareOptions = {
      name: 'getUserAgentMiddleware',
      step: 'build',
      priority: 'low',
      tags: ['SET_USER_AGENT', 'USER_AGENT'],
      override: true,
    };
    var getUserAgentPlugin = /* @__PURE__ */ __name(
      (config) => ({
        applyToStack: /* @__PURE__ */ __name((clientStack) => {
          clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
        }, 'applyToStack'),
      }),
      'getUserAgentPlugin'
    );
  },
});

// node_modules/@smithy/util-config-provider/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  'node_modules/@smithy/util-config-provider/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      SelectorType: () => SelectorType,
      booleanSelector: () => booleanSelector,
      numberSelector: () => numberSelector,
    });
    module2.exports = __toCommonJS(index_exports);
    var booleanSelector = /* @__PURE__ */ __name((obj, key, type) => {
      if (!(key in obj)) return void 0;
      if (obj[key] === 'true') return true;
      if (obj[key] === 'false') return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    }, 'booleanSelector');
    var numberSelector = /* @__PURE__ */ __name((obj, key, type) => {
      if (!(key in obj)) return void 0;
      const numberValue = parseInt(obj[key], 10);
      if (Number.isNaN(numberValue)) {
        throw new TypeError(`Cannot load ${type} '${key}'. Expected number, got '${obj[key]}'.`);
      }
      return numberValue;
    }, 'numberSelector');
    var SelectorType = /* @__PURE__ */ ((SelectorType2) => {
      SelectorType2['ENV'] = 'env';
      SelectorType2['CONFIG'] = 'shared config entry';
      return SelectorType2;
    })(SelectorType || {});
  },
});

// node_modules/@smithy/config-resolver/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  'node_modules/@smithy/config-resolver/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      CONFIG_USE_DUALSTACK_ENDPOINT: () => CONFIG_USE_DUALSTACK_ENDPOINT,
      CONFIG_USE_FIPS_ENDPOINT: () => CONFIG_USE_FIPS_ENDPOINT,
      DEFAULT_USE_DUALSTACK_ENDPOINT: () => DEFAULT_USE_DUALSTACK_ENDPOINT,
      DEFAULT_USE_FIPS_ENDPOINT: () => DEFAULT_USE_FIPS_ENDPOINT,
      ENV_USE_DUALSTACK_ENDPOINT: () => ENV_USE_DUALSTACK_ENDPOINT,
      ENV_USE_FIPS_ENDPOINT: () => ENV_USE_FIPS_ENDPOINT,
      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
      NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,
      NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,
      REGION_ENV_NAME: () => REGION_ENV_NAME,
      REGION_INI_NAME: () => REGION_INI_NAME,
      getRegionInfo: () => getRegionInfo,
      resolveCustomEndpointsConfig: () => resolveCustomEndpointsConfig,
      resolveEndpointsConfig: () => resolveEndpointsConfig,
      resolveRegionConfig: () => resolveRegionConfig,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_util_config_provider = require_dist_cjs31();
    var ENV_USE_DUALSTACK_ENDPOINT = 'AWS_USE_DUALSTACK_ENDPOINT';
    var CONFIG_USE_DUALSTACK_ENDPOINT = 'use_dualstack_endpoint';
    var DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    var NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: /* @__PURE__ */ __name(
        (env) =>
          (0, import_util_config_provider.booleanSelector)(
            env,
            ENV_USE_DUALSTACK_ENDPOINT,
            import_util_config_provider.SelectorType.ENV
          ),
        'environmentVariableSelector'
      ),
      configFileSelector: /* @__PURE__ */ __name(
        (profile) =>
          (0, import_util_config_provider.booleanSelector)(
            profile,
            CONFIG_USE_DUALSTACK_ENDPOINT,
            import_util_config_provider.SelectorType.CONFIG
          ),
        'configFileSelector'
      ),
      default: false,
    };
    var ENV_USE_FIPS_ENDPOINT = 'AWS_USE_FIPS_ENDPOINT';
    var CONFIG_USE_FIPS_ENDPOINT = 'use_fips_endpoint';
    var DEFAULT_USE_FIPS_ENDPOINT = false;
    var NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: /* @__PURE__ */ __name(
        (env) =>
          (0, import_util_config_provider.booleanSelector)(
            env,
            ENV_USE_FIPS_ENDPOINT,
            import_util_config_provider.SelectorType.ENV
          ),
        'environmentVariableSelector'
      ),
      configFileSelector: /* @__PURE__ */ __name(
        (profile) =>
          (0, import_util_config_provider.booleanSelector)(
            profile,
            CONFIG_USE_FIPS_ENDPOINT,
            import_util_config_provider.SelectorType.CONFIG
          ),
        'configFileSelector'
      ),
      default: false,
    };
    var import_util_middleware = require_dist_cjs6();
    var resolveCustomEndpointsConfig = /* @__PURE__ */ __name((input) => {
      const { tls, endpoint, urlParser, useDualstackEndpoint } = input;
      return Object.assign(input, {
        tls: tls != null ? tls : true,
        endpoint: (0, import_util_middleware.normalizeProvider)(
          typeof endpoint === 'string' ? urlParser(endpoint) : endpoint
        ),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, import_util_middleware.normalizeProvider)(
          useDualstackEndpoint != null ? useDualstackEndpoint : false
        ),
      });
    }, 'resolveCustomEndpointsConfig');
    var getEndpointFromRegion = /* @__PURE__ */ __name(async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error('Invalid region in client config');
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } =
        (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) != null ? _a : {};
      if (!hostname) {
        throw new Error('Cannot resolve hostname from client config');
      }
      return input.urlParser(`${tls ? 'https:' : 'http:'}//${hostname}`);
    }, 'getEndpointFromRegion');
    var resolveEndpointsConfig = /* @__PURE__ */ __name((input) => {
      var _a;
      const useDualstackEndpoint = (0, import_util_middleware.normalizeProvider)(
        (_a = input.useDualstackEndpoint) != null ? _a : false
      );
      const { endpoint, useFipsEndpoint, urlParser, tls } = input;
      return Object.assign(input, {
        tls: tls != null ? tls : true,
        endpoint: endpoint
          ? (0, import_util_middleware.normalizeProvider)(typeof endpoint === 'string' ? urlParser(endpoint) : endpoint)
          : () =>
              getEndpointFromRegion(
                __spreadProps(__spreadValues({}, input), { useDualstackEndpoint, useFipsEndpoint })
              ),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint,
      });
    }, 'resolveEndpointsConfig');
    var REGION_ENV_NAME = 'AWS_REGION';
    var REGION_INI_NAME = 'region';
    var NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: /* @__PURE__ */ __name((env) => env[REGION_ENV_NAME], 'environmentVariableSelector'),
      configFileSelector: /* @__PURE__ */ __name((profile) => profile[REGION_INI_NAME], 'configFileSelector'),
      default: /* @__PURE__ */ __name(() => {
        throw new Error('Region is missing');
      }, 'default'),
    };
    var NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: 'credentials',
    };
    var isFipsRegion = /* @__PURE__ */ __name(
      (region) => typeof region === 'string' && (region.startsWith('fips-') || region.endsWith('-fips')),
      'isFipsRegion'
    );
    var getRealRegion = /* @__PURE__ */ __name(
      (region) =>
        isFipsRegion(region)
          ? ['fips-aws-global', 'aws-fips'].includes(region)
            ? 'us-east-1'
            : region.replace(/fips-(dkr-|prod-)?|-fips/, '')
          : region,
      'getRealRegion'
    );
    var resolveRegionConfig = /* @__PURE__ */ __name((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error('Region is missing');
      }
      return Object.assign(input, {
        region: /* @__PURE__ */ __name(async () => {
          if (typeof region === 'string') {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        }, 'region'),
        useFipsEndpoint: /* @__PURE__ */ __name(async () => {
          const providedRegion = typeof region === 'string' ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== 'function' ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }, 'useFipsEndpoint'),
      });
    }, 'resolveRegionConfig');
    var getHostnameFromVariants = /* @__PURE__ */ __name((variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(
        ({ tags }) => useFipsEndpoint === tags.includes('fips') && useDualstackEndpoint === tags.includes('dualstack')
      )) == null
        ? void 0
        : _a.hostname;
    }, 'getHostnameFromVariants');
    var getResolvedHostname = /* @__PURE__ */ __name(
      (resolvedRegion, { regionHostname, partitionHostname }) =>
        regionHostname
          ? regionHostname
          : partitionHostname
          ? partitionHostname.replace('{region}', resolvedRegion)
          : void 0,
      'getResolvedHostname'
    );
    var getResolvedPartition = /* @__PURE__ */ __name((region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) != null
        ? _a
        : 'aws';
    }, 'getResolvedPartition');
    var getResolvedSigningRegion = /* @__PURE__ */ __name(
      (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
        if (signingRegion) {
          return signingRegion;
        } else if (useFipsEndpoint) {
          const regionRegexJs = regionRegex.replace('\\\\', '\\').replace(/^\^/g, '\\.').replace(/\$$/g, '\\.');
          const regionRegexmatchArray = hostname.match(regionRegexJs);
          if (regionRegexmatchArray) {
            return regionRegexmatchArray[0].slice(1, -1);
          }
        }
      },
      'getResolvedSigningRegion'
    );
    var getRegionInfo = /* @__PURE__ */ __name(
      (
        region,
        { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }
      ) => {
        var _a, _b, _c, _d, _e, _f;
        const partition = getResolvedPartition(region, { partitionHash });
        const resolvedRegion =
          region in regionHash
            ? region
            : (_b = (_a = partitionHash[partition]) == null ? void 0 : _a.endpoint) != null
            ? _b
            : region;
        const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
        const regionHostname = getHostnameFromVariants(
          (_c = regionHash[resolvedRegion]) == null ? void 0 : _c.variants,
          hostnameOptions
        );
        const partitionHostname = getHostnameFromVariants(
          (_d = partitionHash[partition]) == null ? void 0 : _d.variants,
          hostnameOptions
        );
        const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });
        if (hostname === void 0) {
          throw new Error(
            `Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`
          );
        }
        const signingRegion = getResolvedSigningRegion(hostname, {
          signingRegion: (_e = regionHash[resolvedRegion]) == null ? void 0 : _e.signingRegion,
          regionRegex: partitionHash[partition].regionRegex,
          useFipsEndpoint,
        });
        return __spreadValues(
          __spreadValues(
            {
              partition,
              signingService,
              hostname,
            },
            signingRegion && { signingRegion }
          ),
          ((_f = regionHash[resolvedRegion]) == null ? void 0 : _f.signingService) && {
            signingService: regionHash[resolvedRegion].signingService,
          }
        );
      },
      'getRegionInfo'
    );
  },
});

// node_modules/@smithy/eventstream-serde-config-resolver/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  'node_modules/@smithy/eventstream-serde-config-resolver/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      resolveEventStreamSerdeConfig: () => resolveEventStreamSerdeConfig,
    });
    module2.exports = __toCommonJS(index_exports);
    var resolveEventStreamSerdeConfig = /* @__PURE__ */ __name(
      (input) =>
        Object.assign(input, {
          eventStreamMarshaller: input.eventStreamSerdeProvider(input),
        }),
      'resolveEventStreamSerdeConfig'
    );
  },
});

// node_modules/@smithy/middleware-content-length/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  'node_modules/@smithy/middleware-content-length/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      contentLengthMiddleware: () => contentLengthMiddleware,
      contentLengthMiddlewareOptions: () => contentLengthMiddlewareOptions,
      getContentLengthPlugin: () => getContentLengthPlugin,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_protocol_http = require_dist_cjs2();
    var CONTENT_LENGTH_HEADER = 'content-length';
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (import_protocol_http.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (
            body &&
            Object.keys(headers)
              .map((str) => str.toLowerCase())
              .indexOf(CONTENT_LENGTH_HEADER) === -1
          ) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = __spreadProps(__spreadValues({}, request.headers), {
                [CONTENT_LENGTH_HEADER]: String(length),
              });
            } catch (error) {}
          }
        }
        return next(
          __spreadProps(__spreadValues({}, args), {
            request,
          })
        );
      };
    }
    __name(contentLengthMiddleware, 'contentLengthMiddleware');
    var contentLengthMiddlewareOptions = {
      step: 'build',
      tags: ['SET_CONTENT_LENGTH', 'CONTENT_LENGTH'],
      name: 'contentLengthMiddleware',
      override: true,
    };
    var getContentLengthPlugin = /* @__PURE__ */ __name(
      (options) => ({
        applyToStack: /* @__PURE__ */ __name((clientStack) => {
          clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
        }, 'applyToStack'),
      }),
      'getContentLengthPlugin'
    );
  },
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  'node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require('os');
    var path_1 = require('path');
    var homeDirCache = {};
    var getHomeDirCacheKey = () => {
      if (process && process.geteuid) {
        return `${process.geteuid()}`;
      }
      return 'DEFAULT';
    };
    var getHomeDir2 = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME) return HOME;
      if (USERPROFILE) return USERPROFILE;
      if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;
      const homeDirCacheKey = getHomeDirCacheKey();
      if (!homeDirCache[homeDirCacheKey]) homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();
      return homeDirCache[homeDirCacheKey];
    };
    exports.getHomeDir = getHomeDir2;
  },
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  'node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require('crypto');
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath2 = (id) => {
      const hasher = (0, crypto_1.createHash)('sha1');
      const cacheName = hasher.update(id).digest('hex');
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'sso', 'cache', `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath2;
  },
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  'node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require('fs');
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile2 = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, 'utf8');
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile2;
  },
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  'node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require('fs');
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {
        filePromisesHash[path] = readFile(path, 'utf8');
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  },
});

// node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  'node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (
      __copyProps2(target, mod, 'default'), secondTarget && __copyProps2(secondTarget, mod, 'default')
    );
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      CONFIG_PREFIX_SEPARATOR: () => CONFIG_PREFIX_SEPARATOR,
      DEFAULT_PROFILE: () => DEFAULT_PROFILE,
      ENV_PROFILE: () => ENV_PROFILE,
      getProfileName: () => getProfileName,
      loadSharedConfigFiles: () => loadSharedConfigFiles,
      loadSsoSessionData: () => loadSsoSessionData,
      parseKnownFiles: () => parseKnownFiles,
    });
    module2.exports = __toCommonJS(index_exports);
    __reExport(index_exports, require_getHomeDir(), module2.exports);
    var ENV_PROFILE = 'AWS_PROFILE';
    var DEFAULT_PROFILE = 'default';
    var getProfileName = /* @__PURE__ */ __name(
      (init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE,
      'getProfileName'
    );
    __reExport(index_exports, require_getSSOTokenFilepath(), module2.exports);
    __reExport(index_exports, require_getSSOTokenFromFile(), module2.exports);
    var import_types = require_dist_cjs();
    var getConfigData = /* @__PURE__ */ __name(
      (data) =>
        Object.entries(data)
          .filter(([key]) => {
            const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
            if (indexOfSeparator === -1) {
              return false;
            }
            return Object.values(import_types.IniSectionType).includes(key.substring(0, indexOfSeparator));
          })
          .reduce((acc, [key, value]) => {
            const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
            const updatedKey =
              key.substring(0, indexOfSeparator) === import_types.IniSectionType.PROFILE
                ? key.substring(indexOfSeparator + 1)
                : key;
            acc[updatedKey] = value;
            return acc;
          }, __spreadValues({}, data.default && { default: data.default })),
      'getConfigData'
    );
    var import_path = require('path');
    var import_getHomeDir = require_getHomeDir();
    var ENV_CONFIG_PATH = 'AWS_CONFIG_FILE';
    var getConfigFilepath = /* @__PURE__ */ __name(
      () =>
        process.env[ENV_CONFIG_PATH] || (0, import_path.join)((0, import_getHomeDir.getHomeDir)(), '.aws', 'config'),
      'getConfigFilepath'
    );
    var import_getHomeDir2 = require_getHomeDir();
    var ENV_CREDENTIALS_PATH = 'AWS_SHARED_CREDENTIALS_FILE';
    var getCredentialsFilepath = /* @__PURE__ */ __name(
      () =>
        process.env[ENV_CREDENTIALS_PATH] ||
        (0, import_path.join)((0, import_getHomeDir2.getHomeDir)(), '.aws', 'credentials'),
      'getCredentialsFilepath'
    );
    var import_getHomeDir3 = require_getHomeDir();
    var prefixKeyRegex = /^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/;
    var profileNameBlockList = ['__proto__', 'profile __proto__'];
    var parseIni = /* @__PURE__ */ __name((iniData) => {
      const map = {};
      let currentSection;
      let currentSubSection;
      for (const iniLine of iniData.split(/\r?\n/)) {
        const trimmedLine = iniLine.split(/(^|\s)[;#]/)[0].trim();
        const isSection = trimmedLine[0] === '[' && trimmedLine[trimmedLine.length - 1] === ']';
        if (isSection) {
          currentSection = void 0;
          currentSubSection = void 0;
          const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);
          const matches = prefixKeyRegex.exec(sectionName);
          if (matches) {
            const [, prefix, , name] = matches;
            if (Object.values(import_types.IniSectionType).includes(prefix)) {
              currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR);
            }
          } else {
            currentSection = sectionName;
          }
          if (profileNameBlockList.includes(sectionName)) {
            throw new Error(`Found invalid profile name "${sectionName}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = trimmedLine.indexOf('=');
          if (![0, -1].includes(indexOfEqualsSign)) {
            const [name, value] = [
              trimmedLine.substring(0, indexOfEqualsSign).trim(),
              trimmedLine.substring(indexOfEqualsSign + 1).trim(),
            ];
            if (value === '') {
              currentSubSection = name;
            } else {
              if (currentSubSection && iniLine.trimStart() === iniLine) {
                currentSubSection = void 0;
              }
              map[currentSection] = map[currentSection] || {};
              const key = currentSubSection ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR) : name;
              map[currentSection][key] = value;
            }
          }
        }
      }
      return map;
    }, 'parseIni');
    var import_slurpFile = require_slurpFile();
    var swallowError = /* @__PURE__ */ __name(() => ({}), 'swallowError');
    var CONFIG_PREFIX_SEPARATOR = '.';
    var loadSharedConfigFiles = /* @__PURE__ */ __name(async (init = {}) => {
      const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;
      const homeDir = (0, import_getHomeDir3.getHomeDir)();
      const relativeHomeDirPrefix = '~/';
      let resolvedFilepath = filepath;
      if (filepath.startsWith(relativeHomeDirPrefix)) {
        resolvedFilepath = (0, import_path.join)(homeDir, filepath.slice(2));
      }
      let resolvedConfigFilepath = configFilepath;
      if (configFilepath.startsWith(relativeHomeDirPrefix)) {
        resolvedConfigFilepath = (0, import_path.join)(homeDir, configFilepath.slice(2));
      }
      const parsedFiles = await Promise.all([
        (0, import_slurpFile.slurpFile)(resolvedConfigFilepath, {
          ignoreCache: init.ignoreCache,
        })
          .then(parseIni)
          .then(getConfigData)
          .catch(swallowError),
        (0, import_slurpFile.slurpFile)(resolvedFilepath, {
          ignoreCache: init.ignoreCache,
        })
          .then(parseIni)
          .catch(swallowError),
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1],
      };
    }, 'loadSharedConfigFiles');
    var getSsoSessionData = /* @__PURE__ */ __name(
      (data) =>
        Object.entries(data)
          .filter(([key]) => key.startsWith(import_types.IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR))
          .reduce(
            (acc, [key, value]) =>
              __spreadProps(__spreadValues({}, acc), {
                [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value,
              }),
            {}
          ),
      'getSsoSessionData'
    );
    var import_slurpFile2 = require_slurpFile();
    var swallowError2 = /* @__PURE__ */ __name(() => ({}), 'swallowError');
    var loadSsoSessionData = /* @__PURE__ */ __name(async (init = {}) => {
      var _a;
      return (0, import_slurpFile2.slurpFile)((_a = init.configFilepath) != null ? _a : getConfigFilepath())
        .then(parseIni)
        .then(getSsoSessionData)
        .catch(swallowError2);
    }, 'loadSsoSessionData');
    var mergeConfigFiles = /* @__PURE__ */ __name((...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    }, 'mergeConfigFiles');
    var parseKnownFiles = /* @__PURE__ */ __name(async (init) => {
      const parsedFiles = await loadSharedConfigFiles(init);
      return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);
    }, 'parseKnownFiles');
  },
});

// node_modules/@smithy/node-config-provider/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  'node_modules/@smithy/node-config-provider/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      loadConfig: () => loadConfig,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_property_provider = require_dist_cjs23();
    function getSelectorName(functionString) {
      var _a;
      try {
        const constants = new Set(Array.from((_a = functionString.match(/([A-Z_]){3,}/g)) != null ? _a : []));
        constants.delete('CONFIG');
        constants.delete('CONFIG_PREFIX_SEPARATOR');
        constants.delete('ENV');
        return [...constants].join(', ');
      } catch (e) {
        return functionString;
      }
    }
    __name(getSelectorName, 'getSelectorName');
    var fromEnv = /* @__PURE__ */ __name(
      (envVarSelector, options) => async () => {
        try {
          const config = envVarSelector(process.env, options);
          if (config === void 0) {
            throw new Error();
          }
          return config;
        } catch (e) {
          throw new import_property_provider.CredentialsProviderError(
            e.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`,
            { logger: options == null ? void 0 : options.logger }
          );
        }
      },
      'fromEnv'
    );
    var import_shared_ini_file_loader = require_dist_cjs35();
    var fromSharedConfigFiles = /* @__PURE__ */ __name((configSelector, _a = {}) => {
      var _b = _a,
        { preferredFile = 'config' } = _b,
        init = __objRest(_b, ['preferredFile']);
      return async () => {
        const profile = (0, import_shared_ini_file_loader.getProfileName)(init);
        const { configFile, credentialsFile } = await (0, import_shared_ini_file_loader.loadSharedConfigFiles)(init);
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile =
          preferredFile === 'config'
            ? __spreadValues(__spreadValues({}, profileFromCredentials), profileFromConfig)
            : __spreadValues(__spreadValues({}, profileFromConfig), profileFromCredentials);
        try {
          const cfgFile = preferredFile === 'config' ? configFile : credentialsFile;
          const configValue = configSelector(mergedProfile, cfgFile);
          if (configValue === void 0) {
            throw new Error();
          }
          return configValue;
        } catch (e) {
          throw new import_property_provider.CredentialsProviderError(
            e.message ||
              `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`,
            { logger: init.logger }
          );
        }
      };
    }, 'fromSharedConfigFiles');
    var isFunction = /* @__PURE__ */ __name((func) => typeof func === 'function', 'isFunction');
    var fromStatic = /* @__PURE__ */ __name(
      (defaultValue) =>
        isFunction(defaultValue)
          ? async () => await defaultValue()
          : (0, import_property_provider.fromStatic)(defaultValue),
      'fromStatic'
    );
    var loadConfig = /* @__PURE__ */ __name(
      ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => {
        const { signingName, logger: logger2 } = configuration;
        const envOptions = { signingName, logger: logger2 };
        return (0, import_property_provider.memoize)(
          (0, import_property_provider.chain)(
            fromEnv(environmentVariableSelector, envOptions),
            fromSharedConfigFiles(configFileSelector, configuration),
            fromStatic(defaultValue)
          )
        );
      },
      'loadConfig'
    );
  },
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js
var require_getEndpointUrlConfig = __commonJS({
  'node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointUrlConfig = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs35();
    var ENV_ENDPOINT_URL = 'AWS_ENDPOINT_URL';
    var CONFIG_ENDPOINT_URL = 'endpoint_url';
    var getEndpointUrlConfig = (serviceId) => ({
      environmentVariableSelector: (env) => {
        const serviceSuffixParts = serviceId.split(' ').map((w) => w.toUpperCase());
        const serviceEndpointUrl = env[[ENV_ENDPOINT_URL, ...serviceSuffixParts].join('_')];
        if (serviceEndpointUrl) return serviceEndpointUrl;
        const endpointUrl = env[ENV_ENDPOINT_URL];
        if (endpointUrl) return endpointUrl;
        return void 0;
      },
      configFileSelector: (profile, config) => {
        if (config && profile.services) {
          const servicesSection =
            config[['services', profile.services].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
          if (servicesSection) {
            const servicePrefixParts = serviceId.split(' ').map((w) => w.toLowerCase());
            const endpointUrl2 =
              servicesSection[
                [servicePrefixParts.join('_'), CONFIG_ENDPOINT_URL].join(
                  shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR
                )
              ];
            if (endpointUrl2) return endpointUrl2;
          }
        }
        const endpointUrl = profile[CONFIG_ENDPOINT_URL];
        if (endpointUrl) return endpointUrl;
        return void 0;
      },
      default: void 0,
    });
    exports.getEndpointUrlConfig = getEndpointUrlConfig;
  },
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js
var require_getEndpointFromConfig = __commonJS({
  'node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointFromConfig = void 0;
    var node_config_provider_1 = require_dist_cjs36();
    var getEndpointUrlConfig_1 = require_getEndpointUrlConfig();
    var getEndpointFromConfig = async (serviceId) =>
      (0, node_config_provider_1.loadConfig)(
        (0, getEndpointUrlConfig_1.getEndpointUrlConfig)(serviceId !== null && serviceId !== void 0 ? serviceId : '')
      )();
    exports.getEndpointFromConfig = getEndpointFromConfig;
  },
});

// node_modules/@smithy/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  'node_modules/@smithy/middleware-endpoint/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      endpointMiddleware: () => endpointMiddleware,
      endpointMiddlewareOptions: () => endpointMiddlewareOptions,
      getEndpointFromInstructions: () => getEndpointFromInstructions,
      getEndpointPlugin: () => getEndpointPlugin,
      resolveEndpointConfig: () => resolveEndpointConfig,
      resolveEndpointRequiredConfig: () => resolveEndpointRequiredConfig,
      resolveParams: () => resolveParams,
      toEndpointV1: () => toEndpointV1,
    });
    module2.exports = __toCommonJS(index_exports);
    var resolveParamsForS3 = /* @__PURE__ */ __name(async (endpointParams) => {
      const bucket = (endpointParams == null ? void 0 : endpointParams.Bucket) || '';
      if (typeof endpointParams.Bucket === 'string') {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent('#')).replace(/\?/g, encodeURIComponent('?'));
      }
      if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error('Path-style addressing cannot be used with ARN buckets');
        }
      } else if (
        !isDnsCompatibleBucketName(bucket) ||
        (bucket.indexOf('.') !== -1 && !String(endpointParams.Endpoint).startsWith('http:')) ||
        bucket.toLowerCase() !== bucket ||
        bucket.length < 3
      ) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    }, 'resolveParamsForS3');
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    var isDnsCompatibleBucketName = /* @__PURE__ */ __name(
      (bucketName) =>
        DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName),
      'isDnsCompatibleBucketName'
    );
    var isArnBucketName = /* @__PURE__ */ __name((bucketName) => {
      const [arn, partition, service, , , bucket] = bucketName.split(':');
      const isArn = arn === 'arn' && bucketName.split(':').length >= 6;
      const isValidArn = Boolean(isArn && partition && service && bucket);
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return isValidArn;
    }, 'isArnBucketName');
    var createConfigValueProvider = /* @__PURE__ */ __name((configKey, canonicalEndpointParamKey, config) => {
      const configProvider = /* @__PURE__ */ __name(async () => {
        var _a;
        const configValue = (_a = config[configKey]) != null ? _a : config[canonicalEndpointParamKey];
        if (typeof configValue === 'function') {
          return configValue();
        }
        return configValue;
      }, 'configProvider');
      if (configKey === 'credentialScope' || canonicalEndpointParamKey === 'CredentialScope') {
        return async () => {
          var _a;
          const credentials =
            typeof config.credentials === 'function' ? await config.credentials() : config.credentials;
          const configValue =
            (_a = credentials == null ? void 0 : credentials.credentialScope) != null
              ? _a
              : credentials == null
              ? void 0
              : credentials.CredentialScope;
          return configValue;
        };
      }
      if (configKey === 'accountId' || canonicalEndpointParamKey === 'AccountId') {
        return async () => {
          var _a;
          const credentials =
            typeof config.credentials === 'function' ? await config.credentials() : config.credentials;
          const configValue =
            (_a = credentials == null ? void 0 : credentials.accountId) != null
              ? _a
              : credentials == null
              ? void 0
              : credentials.AccountId;
          return configValue;
        };
      }
      if (configKey === 'endpoint' || canonicalEndpointParamKey === 'endpoint') {
        return async () => {
          if (config.isCustomEndpoint === false) {
            return void 0;
          }
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === 'object') {
            if ('url' in endpoint) {
              return endpoint.url.href;
            }
            if ('hostname' in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ':' + port : ''}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    }, 'createConfigValueProvider');
    var import_getEndpointFromConfig = require_getEndpointFromConfig();
    var import_url_parser = require_dist_cjs21();
    var toEndpointV1 = /* @__PURE__ */ __name((endpoint) => {
      if (typeof endpoint === 'object') {
        if ('url' in endpoint) {
          return (0, import_url_parser.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, import_url_parser.parseUrl)(endpoint);
    }, 'toEndpointV1');
    var getEndpointFromInstructions = /* @__PURE__ */ __name(
      async (commandInput, instructionsSupplier, clientConfig, context) => {
        if (!clientConfig.isCustomEndpoint) {
          let endpointFromConfig;
          if (clientConfig.serviceConfiguredEndpoint) {
            endpointFromConfig = await clientConfig.serviceConfiguredEndpoint();
          } else {
            endpointFromConfig = await (0, import_getEndpointFromConfig.getEndpointFromConfig)(clientConfig.serviceId);
          }
          if (endpointFromConfig) {
            clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));
            clientConfig.isCustomEndpoint = true;
          }
        }
        const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
        if (typeof clientConfig.endpointProvider !== 'function') {
          throw new Error('config.endpointProvider is not set.');
        }
        const endpoint = clientConfig.endpointProvider(endpointParams, context);
        return endpoint;
      },
      'getEndpointFromInstructions'
    );
    var resolveParams = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions =
        ((_a = instructionsSupplier == null ? void 0 : instructionsSupplier.getEndpointParameterInstructions) == null
          ? void 0
          : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case 'staticContextParams':
            endpointParams[name] = instruction.value;
            break;
          case 'contextParams':
            endpointParams[name] = commandInput[instruction.name];
            break;
          case 'clientContextParams':
          case 'builtInParams':
            endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();
            break;
          case 'operationContextParams':
            endpointParams[name] = instruction.get(commandInput);
            break;
          default:
            throw new Error('Unrecognized endpoint parameter instruction: ' + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === 's3') {
        await resolveParamsForS3(endpointParams);
      }
      return endpointParams;
    }, 'resolveParams');
    var import_core2 = require_dist_cjs18();
    var import_util_middleware = require_dist_cjs6();
    var endpointMiddleware = /* @__PURE__ */ __name(({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b, _c;
        if (config.isCustomEndpoint) {
          (0, import_core2.setFeature)(context, 'ENDPOINT_OVERRIDE', 'N');
        }
        const endpoint = await getEndpointFromInstructions(
          args.input,
          {
            getEndpointParameterInstructions() {
              return instructions;
            },
          },
          __spreadValues({}, config),
          context
        );
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) == null ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) == null ? void 0 : _b[0];
        if (authScheme) {
          context['signing_region'] = authScheme.signingRegion;
          context['signing_service'] = authScheme.signingName;
          const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
          const httpAuthOption =
            (_c = smithyContext == null ? void 0 : smithyContext.selectedHttpAuthScheme) == null
              ? void 0
              : _c.httpAuthOption;
          if (httpAuthOption) {
            httpAuthOption.signingProperties = Object.assign(
              httpAuthOption.signingProperties || {},
              {
                signing_region: authScheme.signingRegion,
                signingRegion: authScheme.signingRegion,
                signing_service: authScheme.signingName,
                signingName: authScheme.signingName,
                signingRegionSet: authScheme.signingRegionSet,
              },
              authScheme.properties
            );
          }
        }
        return next(__spreadValues({}, args));
      };
    }, 'endpointMiddleware');
    var import_middleware_serde = require_dist_cjs7();
    var endpointMiddlewareOptions = {
      step: 'serialize',
      tags: ['ENDPOINT_PARAMETERS', 'ENDPOINT_V2', 'ENDPOINT'],
      name: 'endpointV2Middleware',
      override: true,
      relation: 'before',
      toMiddleware: import_middleware_serde.serializerMiddlewareOption.name,
    };
    var getEndpointPlugin = /* @__PURE__ */ __name(
      (config, instructions) => ({
        applyToStack: /* @__PURE__ */ __name((clientStack) => {
          clientStack.addRelativeTo(
            endpointMiddleware({
              config,
              instructions,
            }),
            endpointMiddlewareOptions
          );
        }, 'applyToStack'),
      }),
      'getEndpointPlugin'
    );
    var import_getEndpointFromConfig2 = require_getEndpointFromConfig();
    var resolveEndpointConfig = /* @__PURE__ */ __name((input) => {
      var _a;
      const tls = (_a = input.tls) != null ? _a : true;
      const { endpoint, useDualstackEndpoint, useFipsEndpoint } = input;
      const customEndpointProvider =
        endpoint != null
          ? async () => toEndpointV1(await (0, import_util_middleware.normalizeProvider)(endpoint)())
          : void 0;
      const isCustomEndpoint = !!endpoint;
      const resolvedConfig = Object.assign(input, {
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, import_util_middleware.normalizeProvider)(
          useDualstackEndpoint != null ? useDualstackEndpoint : false
        ),
        useFipsEndpoint: (0, import_util_middleware.normalizeProvider)(
          useFipsEndpoint != null ? useFipsEndpoint : false
        ),
      });
      let configuredEndpointPromise = void 0;
      resolvedConfig.serviceConfiguredEndpoint = async () => {
        if (input.serviceId && !configuredEndpointPromise) {
          configuredEndpointPromise = (0, import_getEndpointFromConfig2.getEndpointFromConfig)(input.serviceId);
        }
        return configuredEndpointPromise;
      };
      return resolvedConfig;
    }, 'resolveEndpointConfig');
    var resolveEndpointRequiredConfig = /* @__PURE__ */ __name((input) => {
      const { endpoint } = input;
      if (endpoint === void 0) {
        input.endpoint = async () => {
          throw new Error(
            '@smithy/middleware-endpoint: (default endpointRuleSet) endpoint is not set - you must configure an endpoint.'
          );
        };
      }
      return input;
    }, 'resolveEndpointRequiredConfig');
  },
});

// node_modules/@smithy/service-error-classification/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  'node_modules/@smithy/service-error-classification/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      isBrowserNetworkError: () => isBrowserNetworkError,
      isClockSkewCorrectedError: () => isClockSkewCorrectedError,
      isClockSkewError: () => isClockSkewError,
      isRetryableByTrait: () => isRetryableByTrait,
      isServerError: () => isServerError,
      isThrottlingError: () => isThrottlingError,
      isTransientError: () => isTransientError,
    });
    module2.exports = __toCommonJS(index_exports);
    var CLOCK_SKEW_ERROR_CODES = [
      'AuthFailure',
      'InvalidSignatureException',
      'RequestExpired',
      'RequestInTheFuture',
      'RequestTimeTooSkewed',
      'SignatureDoesNotMatch',
    ];
    var THROTTLING_ERROR_CODES = [
      'BandwidthLimitExceeded',
      'EC2ThrottledException',
      'LimitExceededException',
      'PriorRequestNotComplete',
      'ProvisionedThroughputExceededException',
      'RequestLimitExceeded',
      'RequestThrottled',
      'RequestThrottledException',
      'SlowDown',
      'ThrottledException',
      'Throttling',
      'ThrottlingException',
      'TooManyRequestsException',
      'TransactionInProgressException',
    ];
    var TRANSIENT_ERROR_CODES = ['TimeoutError', 'RequestTimeout', 'RequestTimeoutException'];
    var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    var NODEJS_TIMEOUT_ERROR_CODES = ['ECONNRESET', 'ECONNREFUSED', 'EPIPE', 'ETIMEDOUT'];
    var NODEJS_NETWORK_ERROR_CODES = ['EHOSTUNREACH', 'ENETUNREACH', 'ENOTFOUND'];
    var isRetryableByTrait = /* @__PURE__ */ __name((error) => error.$retryable !== void 0, 'isRetryableByTrait');
    var isClockSkewError = /* @__PURE__ */ __name(
      (error) => CLOCK_SKEW_ERROR_CODES.includes(error.name),
      'isClockSkewError'
    );
    var isClockSkewCorrectedError = /* @__PURE__ */ __name((error) => {
      var _a;
      return (_a = error.$metadata) == null ? void 0 : _a.clockSkewCorrected;
    }, 'isClockSkewCorrectedError');
    var isBrowserNetworkError = /* @__PURE__ */ __name((error) => {
      const errorMessages = /* @__PURE__ */ new Set([
        'Failed to fetch',
        'NetworkError when attempting to fetch resource',
        'The Internet connection appears to be offline',
        'Load failed',
        'Network request failed',
      ]);
      const isValid = error && error instanceof TypeError;
      if (!isValid) {
        return false;
      }
      return errorMessages.has(error.message);
    }, 'isBrowserNetworkError');
    var isThrottlingError = /* @__PURE__ */ __name((error) => {
      var _a, _b;
      return (
        ((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) === 429 ||
        THROTTLING_ERROR_CODES.includes(error.name) ||
        ((_b = error.$retryable) == null ? void 0 : _b.throttling) == true
      );
    }, 'isThrottlingError');
    var isTransientError = /* @__PURE__ */ __name((error, depth = 0) => {
      var _a;
      return (
        isClockSkewCorrectedError(error) ||
        TRANSIENT_ERROR_CODES.includes(error.name) ||
        NODEJS_TIMEOUT_ERROR_CODES.includes((error == null ? void 0 : error.code) || '') ||
        NODEJS_NETWORK_ERROR_CODES.includes((error == null ? void 0 : error.code) || '') ||
        TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) || 0) ||
        isBrowserNetworkError(error) ||
        (error.cause !== void 0 && depth <= 10 && isTransientError(error.cause, depth + 1))
      );
    }, 'isTransientError');
    var isServerError = /* @__PURE__ */ __name((error) => {
      var _a;
      if (((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {
          return true;
        }
        return false;
      }
      return false;
    }, 'isServerError');
  },
});

// node_modules/@smithy/util-retry/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  'node_modules/@smithy/util-retry/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
      ConfiguredRetryStrategy: () => ConfiguredRetryStrategy,
      DEFAULT_MAX_ATTEMPTS: () => DEFAULT_MAX_ATTEMPTS,
      DEFAULT_RETRY_DELAY_BASE: () => DEFAULT_RETRY_DELAY_BASE,
      DEFAULT_RETRY_MODE: () => DEFAULT_RETRY_MODE,
      DefaultRateLimiter: () => DefaultRateLimiter,
      INITIAL_RETRY_TOKENS: () => INITIAL_RETRY_TOKENS,
      INVOCATION_ID_HEADER: () => INVOCATION_ID_HEADER,
      MAXIMUM_RETRY_DELAY: () => MAXIMUM_RETRY_DELAY,
      NO_RETRY_INCREMENT: () => NO_RETRY_INCREMENT,
      REQUEST_HEADER: () => REQUEST_HEADER,
      RETRY_COST: () => RETRY_COST,
      RETRY_MODES: () => RETRY_MODES,
      StandardRetryStrategy: () => StandardRetryStrategy,
      THROTTLING_RETRY_DELAY_BASE: () => THROTTLING_RETRY_DELAY_BASE,
      TIMEOUT_RETRY_COST: () => TIMEOUT_RETRY_COST,
    });
    module2.exports = __toCommonJS(index_exports);
    var RETRY_MODES = /* @__PURE__ */ ((RETRY_MODES2) => {
      RETRY_MODES2['STANDARD'] = 'standard';
      RETRY_MODES2['ADAPTIVE'] = 'adaptive';
      return RETRY_MODES2;
    })(RETRY_MODES || {});
    var DEFAULT_MAX_ATTEMPTS = 3;
    var DEFAULT_RETRY_MODE = 'standard';
    var import_service_error_classification = require_dist_cjs38();
    var _a;
    var DefaultRateLimiter =
      ((_a = class {
        constructor(options) {
          var _a5, _b, _c, _d, _e;
          this.currentCapacity = 0;
          this.enabled = false;
          this.lastMaxRate = 0;
          this.measuredTxRate = 0;
          this.requestCount = 0;
          this.lastTimestamp = 0;
          this.timeWindow = 0;
          this.beta = (_a5 = options == null ? void 0 : options.beta) != null ? _a5 : 0.7;
          this.minCapacity = (_b = options == null ? void 0 : options.minCapacity) != null ? _b : 1;
          this.minFillRate = (_c = options == null ? void 0 : options.minFillRate) != null ? _c : 0.5;
          this.scaleConstant = (_d = options == null ? void 0 : options.scaleConstant) != null ? _d : 0.4;
          this.smooth = (_e = options == null ? void 0 : options.smooth) != null ? _e : 0.8;
          const currentTimeInSeconds = this.getCurrentTimeInSeconds();
          this.lastThrottleTime = currentTimeInSeconds;
          this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
          this.fillRate = this.minFillRate;
          this.maxCapacity = this.minCapacity;
        }
        getCurrentTimeInSeconds() {
          return Date.now() / 1e3;
        }
        async getSendToken() {
          return this.acquireTokenBucket(1);
        }
        async acquireTokenBucket(amount) {
          if (!this.enabled) {
            return;
          }
          this.refillTokenBucket();
          if (amount > this.currentCapacity) {
            const delay = ((amount - this.currentCapacity) / this.fillRate) * 1e3;
            await new Promise((resolve) => _a.setTimeoutFn(resolve, delay));
          }
          this.currentCapacity = this.currentCapacity - amount;
        }
        refillTokenBucket() {
          const timestamp = this.getCurrentTimeInSeconds();
          if (!this.lastTimestamp) {
            this.lastTimestamp = timestamp;
            return;
          }
          const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
          this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
          this.lastTimestamp = timestamp;
        }
        updateClientSendingRate(response) {
          let calculatedRate;
          this.updateMeasuredRate();
          if ((0, import_service_error_classification.isThrottlingError)(response)) {
            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
            this.lastMaxRate = rateToUse;
            this.calculateTimeWindow();
            this.lastThrottleTime = this.getCurrentTimeInSeconds();
            calculatedRate = this.cubicThrottle(rateToUse);
            this.enableTokenBucket();
          } else {
            this.calculateTimeWindow();
            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
          }
          const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
          this.updateTokenBucketRate(newRate);
        }
        calculateTimeWindow() {
          this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));
        }
        cubicThrottle(rateToUse) {
          return this.getPrecise(rateToUse * this.beta);
        }
        cubicSuccess(timestamp) {
          return this.getPrecise(
            this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate
          );
        }
        enableTokenBucket() {
          this.enabled = true;
        }
        updateTokenBucketRate(newRate) {
          this.refillTokenBucket();
          this.fillRate = Math.max(newRate, this.minFillRate);
          this.maxCapacity = Math.max(newRate, this.minCapacity);
          this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
        }
        updateMeasuredRate() {
          const t = this.getCurrentTimeInSeconds();
          const timeBucket = Math.floor(t * 2) / 2;
          this.requestCount++;
          if (timeBucket > this.lastTxRateBucket) {
            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
            this.requestCount = 0;
            this.lastTxRateBucket = timeBucket;
          }
        }
        getPrecise(num) {
          return parseFloat(num.toFixed(8));
        }
      }),
      (() => {
        __name(_a, 'DefaultRateLimiter');
      })(),
      (() => {
        _a.setTimeoutFn = setTimeout;
      })(),
      _a);
    var DEFAULT_RETRY_DELAY_BASE = 100;
    var MAXIMUM_RETRY_DELAY = 20 * 1e3;
    var THROTTLING_RETRY_DELAY_BASE = 500;
    var INITIAL_RETRY_TOKENS = 500;
    var RETRY_COST = 5;
    var TIMEOUT_RETRY_COST = 10;
    var NO_RETRY_INCREMENT = 1;
    var INVOCATION_ID_HEADER = 'amz-sdk-invocation-id';
    var REQUEST_HEADER = 'amz-sdk-request';
    var getDefaultRetryBackoffStrategy = /* @__PURE__ */ __name(() => {
      let delayBase = DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = /* @__PURE__ */ __name((attempts) => {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      }, 'computeNextBackoffDelay');
      const setDelayBase = /* @__PURE__ */ __name((delay) => {
        delayBase = delay;
      }, 'setDelayBase');
      return {
        computeNextBackoffDelay,
        setDelayBase,
      };
    }, 'getDefaultRetryBackoffStrategy');
    var createDefaultRetryToken = /* @__PURE__ */ __name(({ retryDelay, retryCount, retryCost }) => {
      const getRetryCount = /* @__PURE__ */ __name(() => retryCount, 'getRetryCount');
      const getRetryDelay = /* @__PURE__ */ __name(() => Math.min(MAXIMUM_RETRY_DELAY, retryDelay), 'getRetryDelay');
      const getRetryCost = /* @__PURE__ */ __name(() => retryCost, 'getRetryCost');
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost,
      };
    }, 'createDefaultRetryToken');
    var _a2;
    var StandardRetryStrategy =
      ((_a2 = class {
        constructor(maxAttempts) {
          this.maxAttempts = maxAttempts;
          this.mode = 'standard';
          this.capacity = INITIAL_RETRY_TOKENS;
          this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
          this.maxAttemptsProvider = typeof maxAttempts === 'function' ? maxAttempts : async () => maxAttempts;
        }
        async acquireInitialRetryToken(retryTokenScope) {
          return createDefaultRetryToken({
            retryDelay: DEFAULT_RETRY_DELAY_BASE,
            retryCount: 0,
          });
        }
        async refreshRetryTokenForRetry(token, errorInfo) {
          const maxAttempts = await this.getMaxAttempts();
          if (this.shouldRetry(token, errorInfo, maxAttempts)) {
            const errorType = errorInfo.errorType;
            this.retryBackoffStrategy.setDelayBase(
              errorType === 'THROTTLING' ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE
            );
            const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
            const retryDelay = errorInfo.retryAfterHint
              ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType)
              : delayFromErrorType;
            const capacityCost = this.getCapacityCost(errorType);
            this.capacity -= capacityCost;
            return createDefaultRetryToken({
              retryDelay,
              retryCount: token.getRetryCount() + 1,
              retryCost: capacityCost,
            });
          }
          throw new Error('No retry token available');
        }
        recordSuccess(token) {
          var _a5;
          this.capacity = Math.max(
            INITIAL_RETRY_TOKENS,
            this.capacity + ((_a5 = token.getRetryCost()) != null ? _a5 : NO_RETRY_INCREMENT)
          );
        }
        getCapacity() {
          return this.capacity;
        }
        async getMaxAttempts() {
          try {
            return await this.maxAttemptsProvider();
          } catch (error) {
            console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
            return DEFAULT_MAX_ATTEMPTS;
          }
        }
        shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
          const attempts = tokenToRenew.getRetryCount() + 1;
          return (
            attempts < maxAttempts &&
            this.capacity >= this.getCapacityCost(errorInfo.errorType) &&
            this.isRetryableError(errorInfo.errorType)
          );
        }
        getCapacityCost(errorType) {
          return errorType === 'TRANSIENT' ? TIMEOUT_RETRY_COST : RETRY_COST;
        }
        isRetryableError(errorType) {
          return errorType === 'THROTTLING' || errorType === 'TRANSIENT';
        }
      }),
      (() => {
        __name(_a2, 'StandardRetryStrategy');
      })(),
      _a2);
    var _a3;
    var AdaptiveRetryStrategy =
      ((_a3 = class {
        constructor(maxAttemptsProvider, options) {
          this.maxAttemptsProvider = maxAttemptsProvider;
          this.mode = 'adaptive';
          const { rateLimiter } = options != null ? options : {};
          this.rateLimiter = rateLimiter != null ? rateLimiter : new DefaultRateLimiter();
          this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
        }
        async acquireInitialRetryToken(retryTokenScope) {
          await this.rateLimiter.getSendToken();
          return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
        }
        async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
          this.rateLimiter.updateClientSendingRate(errorInfo);
          return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        }
        recordSuccess(token) {
          this.rateLimiter.updateClientSendingRate({});
          this.standardRetryStrategy.recordSuccess(token);
        }
      }),
      (() => {
        __name(_a3, 'AdaptiveRetryStrategy');
      })(),
      _a3);
    var _a4;
    var ConfiguredRetryStrategy =
      ((_a4 = class extends StandardRetryStrategy {
        constructor(maxAttempts, computeNextBackoffDelay = DEFAULT_RETRY_DELAY_BASE) {
          super(typeof maxAttempts === 'function' ? maxAttempts : async () => maxAttempts);
          if (typeof computeNextBackoffDelay === 'number') {
            this.computeNextBackoffDelay = () => computeNextBackoffDelay;
          } else {
            this.computeNextBackoffDelay = computeNextBackoffDelay;
          }
        }
        async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
          const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
          token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
          return token;
        }
      }),
      (() => {
        __name(_a4, 'ConfiguredRetryStrategy');
      })(),
      _a4);
  },
});

// node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js
var require_isStreamingPayload = __commonJS({
  'node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isStreamingPayload = void 0;
    var stream_1 = require('stream');
    var isStreamingPayload = (request) =>
      (request === null || request === void 0 ? void 0 : request.body) instanceof stream_1.Readable ||
      (typeof ReadableStream !== 'undefined' &&
        (request === null || request === void 0 ? void 0 : request.body) instanceof ReadableStream);
    exports.isStreamingPayload = isStreamingPayload;
  },
});

// node_modules/@smithy/middleware-retry/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  'node_modules/@smithy/middleware-retry/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
      CONFIG_MAX_ATTEMPTS: () => CONFIG_MAX_ATTEMPTS,
      CONFIG_RETRY_MODE: () => CONFIG_RETRY_MODE,
      ENV_MAX_ATTEMPTS: () => ENV_MAX_ATTEMPTS,
      ENV_RETRY_MODE: () => ENV_RETRY_MODE,
      NODE_MAX_ATTEMPT_CONFIG_OPTIONS: () => NODE_MAX_ATTEMPT_CONFIG_OPTIONS,
      NODE_RETRY_MODE_CONFIG_OPTIONS: () => NODE_RETRY_MODE_CONFIG_OPTIONS,
      StandardRetryStrategy: () => StandardRetryStrategy,
      defaultDelayDecider: () => defaultDelayDecider,
      defaultRetryDecider: () => defaultRetryDecider,
      getOmitRetryHeadersPlugin: () => getOmitRetryHeadersPlugin,
      getRetryAfterHint: () => getRetryAfterHint,
      getRetryPlugin: () => getRetryPlugin,
      omitRetryHeadersMiddleware: () => omitRetryHeadersMiddleware,
      omitRetryHeadersMiddlewareOptions: () => omitRetryHeadersMiddlewareOptions,
      resolveRetryConfig: () => resolveRetryConfig,
      retryMiddleware: () => retryMiddleware,
      retryMiddlewareOptions: () => retryMiddlewareOptions,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_protocol_http = require_dist_cjs2();
    var import_uuid = require_dist();
    var import_util_retry = require_dist_cjs39();
    var getDefaultRetryQuota = /* @__PURE__ */ __name((initialRetryTokens, options) => {
      var _a3, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement =
        (_a3 = options == null ? void 0 : options.noRetryIncrement) != null
          ? _a3
          : import_util_retry.NO_RETRY_INCREMENT;
      const retryCost = (_b = options == null ? void 0 : options.retryCost) != null ? _b : import_util_retry.RETRY_COST;
      const timeoutRetryCost =
        (_c = options == null ? void 0 : options.timeoutRetryCost) != null ? _c : import_util_retry.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = /* @__PURE__ */ __name(
        (error) => (error.name === 'TimeoutError' ? timeoutRetryCost : retryCost),
        'getCapacityAmount'
      );
      const hasRetryTokens = /* @__PURE__ */ __name(
        (error) => getCapacityAmount(error) <= availableCapacity,
        'hasRetryTokens'
      );
      const retrieveRetryTokens = /* @__PURE__ */ __name((error) => {
        if (!hasRetryTokens(error)) {
          throw new Error('No retry token available');
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      }, 'retrieveRetryTokens');
      const releaseRetryTokens = /* @__PURE__ */ __name((capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount != null ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      }, 'releaseRetryTokens');
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens,
      });
    }, 'getDefaultRetryQuota');
    var defaultDelayDecider = /* @__PURE__ */ __name(
      (delayBase, attempts) =>
        Math.floor(Math.min(import_util_retry.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase)),
      'defaultDelayDecider'
    );
    var import_service_error_classification = require_dist_cjs38();
    var defaultRetryDecider = /* @__PURE__ */ __name((error) => {
      if (!error) {
        return false;
      }
      return (
        (0, import_service_error_classification.isRetryableByTrait)(error) ||
        (0, import_service_error_classification.isClockSkewError)(error) ||
        (0, import_service_error_classification.isThrottlingError)(error) ||
        (0, import_service_error_classification.isTransientError)(error)
      );
    }, 'defaultRetryDecider');
    var asSdkError = /* @__PURE__ */ __name((error) => {
      if (error instanceof Error) return error;
      if (error instanceof Object) return Object.assign(new Error(), error);
      if (typeof error === 'string') return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    }, 'asSdkError');
    var _a;
    var StandardRetryStrategy =
      ((_a = class {
        constructor(maxAttemptsProvider, options) {
          var _a3, _b, _c;
          this.maxAttemptsProvider = maxAttemptsProvider;
          this.mode = import_util_retry.RETRY_MODES.STANDARD;
          this.retryDecider =
            (_a3 = options == null ? void 0 : options.retryDecider) != null ? _a3 : defaultRetryDecider;
          this.delayDecider = (_b = options == null ? void 0 : options.delayDecider) != null ? _b : defaultDelayDecider;
          this.retryQuota =
            (_c = options == null ? void 0 : options.retryQuota) != null
              ? _c
              : getDefaultRetryQuota(import_util_retry.INITIAL_RETRY_TOKENS);
        }
        shouldRetry(error, attempts, maxAttempts) {
          return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
        }
        async getMaxAttempts() {
          let maxAttempts;
          try {
            maxAttempts = await this.maxAttemptsProvider();
          } catch (error) {
            maxAttempts = import_util_retry.DEFAULT_MAX_ATTEMPTS;
          }
          return maxAttempts;
        }
        async retry(next, args, options) {
          let retryTokenAmount;
          let attempts = 0;
          let totalDelay = 0;
          const maxAttempts = await this.getMaxAttempts();
          const { request } = args;
          if (import_protocol_http.HttpRequest.isInstance(request)) {
            request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
          }
          while (true) {
            try {
              if (import_protocol_http.HttpRequest.isInstance(request)) {
                request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
              }
              if (options == null ? void 0 : options.beforeRequest) {
                await options.beforeRequest();
              }
              const { response, output } = await next(args);
              if (options == null ? void 0 : options.afterRequest) {
                options.afterRequest(response);
              }
              this.retryQuota.releaseRetryTokens(retryTokenAmount);
              output.$metadata.attempts = attempts + 1;
              output.$metadata.totalRetryDelay = totalDelay;
              return { response, output };
            } catch (e) {
              const err = asSdkError(e);
              attempts++;
              if (this.shouldRetry(err, attempts, maxAttempts)) {
                retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
                const delayFromDecider = this.delayDecider(
                  (0, import_service_error_classification.isThrottlingError)(err)
                    ? import_util_retry.THROTTLING_RETRY_DELAY_BASE
                    : import_util_retry.DEFAULT_RETRY_DELAY_BASE,
                  attempts
                );
                const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
                const delay = Math.max(delayFromResponse || 0, delayFromDecider);
                totalDelay += delay;
                await new Promise((resolve) => setTimeout(resolve, delay));
                continue;
              }
              if (!err.$metadata) {
                err.$metadata = {};
              }
              err.$metadata.attempts = attempts;
              err.$metadata.totalRetryDelay = totalDelay;
              throw err;
            }
          }
        }
      }),
      (() => {
        __name(_a, 'StandardRetryStrategy');
      })(),
      _a);
    var getDelayFromRetryAfterHeader = /* @__PURE__ */ __name((response) => {
      if (!import_protocol_http.HttpResponse.isInstance(response)) return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === 'retry-after');
      if (!retryAfterHeaderName) return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds)) return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    }, 'getDelayFromRetryAfterHeader');
    var _a2;
    var AdaptiveRetryStrategy =
      ((_a2 = class extends StandardRetryStrategy {
        constructor(maxAttemptsProvider, options) {
          const _a3 = options != null ? options : {},
            { rateLimiter } = _a3,
            superOptions = __objRest(_a3, ['rateLimiter']);
          super(maxAttemptsProvider, superOptions);
          this.rateLimiter = rateLimiter != null ? rateLimiter : new import_util_retry.DefaultRateLimiter();
          this.mode = import_util_retry.RETRY_MODES.ADAPTIVE;
        }
        async retry(next, args) {
          return super.retry(next, args, {
            beforeRequest: /* @__PURE__ */ __name(async () => {
              return this.rateLimiter.getSendToken();
            }, 'beforeRequest'),
            afterRequest: /* @__PURE__ */ __name((response) => {
              this.rateLimiter.updateClientSendingRate(response);
            }, 'afterRequest'),
          });
        }
      }),
      (() => {
        __name(_a2, 'AdaptiveRetryStrategy');
      })(),
      _a2);
    var import_util_middleware = require_dist_cjs6();
    var ENV_MAX_ATTEMPTS = 'AWS_MAX_ATTEMPTS';
    var CONFIG_MAX_ATTEMPTS = 'max_attempts';
    var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: /* @__PURE__ */ __name((env) => {
        const value = env[ENV_MAX_ATTEMPTS];
        if (!value) return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      }, 'environmentVariableSelector'),
      configFileSelector: /* @__PURE__ */ __name((profile) => {
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value) return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      }, 'configFileSelector'),
      default: import_util_retry.DEFAULT_MAX_ATTEMPTS,
    };
    var resolveRetryConfig = /* @__PURE__ */ __name((input) => {
      const { retryStrategy, retryMode: _retryMode, maxAttempts: _maxAttempts } = input;
      const maxAttempts = (0, import_util_middleware.normalizeProvider)(
        _maxAttempts != null ? _maxAttempts : import_util_retry.DEFAULT_MAX_ATTEMPTS
      );
      return Object.assign(input, {
        maxAttempts,
        retryStrategy: /* @__PURE__ */ __name(async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, import_util_middleware.normalizeProvider)(_retryMode)();
          if (retryMode === import_util_retry.RETRY_MODES.ADAPTIVE) {
            return new import_util_retry.AdaptiveRetryStrategy(maxAttempts);
          }
          return new import_util_retry.StandardRetryStrategy(maxAttempts);
        }, 'retryStrategy'),
      });
    }, 'resolveRetryConfig');
    var ENV_RETRY_MODE = 'AWS_RETRY_MODE';
    var CONFIG_RETRY_MODE = 'retry_mode';
    var NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: /* @__PURE__ */ __name((env) => env[ENV_RETRY_MODE], 'environmentVariableSelector'),
      configFileSelector: /* @__PURE__ */ __name((profile) => profile[CONFIG_RETRY_MODE], 'configFileSelector'),
      default: import_util_retry.DEFAULT_RETRY_MODE,
    };
    var omitRetryHeadersMiddleware = /* @__PURE__ */ __name(
      () => (next) => async (args) => {
        const { request } = args;
        if (import_protocol_http.HttpRequest.isInstance(request)) {
          delete request.headers[import_util_retry.INVOCATION_ID_HEADER];
          delete request.headers[import_util_retry.REQUEST_HEADER];
        }
        return next(args);
      },
      'omitRetryHeadersMiddleware'
    );
    var omitRetryHeadersMiddlewareOptions = {
      name: 'omitRetryHeadersMiddleware',
      tags: ['RETRY', 'HEADERS', 'OMIT_RETRY_HEADERS'],
      relation: 'before',
      toMiddleware: 'awsAuthMiddleware',
      override: true,
    };
    var getOmitRetryHeadersPlugin = /* @__PURE__ */ __name(
      (options) => ({
        applyToStack: /* @__PURE__ */ __name((clientStack) => {
          clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
        }, 'applyToStack'),
      }),
      'getOmitRetryHeadersPlugin'
    );
    var import_smithy_client = require_dist_cjs27();
    var import_isStreamingPayload = require_isStreamingPayload();
    var retryMiddleware = /* @__PURE__ */ __name(
      (options) => (next, context) => async (args) => {
        var _a3;
        let retryStrategy = await options.retryStrategy();
        const maxAttempts = await options.maxAttempts();
        if (isRetryStrategyV2(retryStrategy)) {
          retryStrategy = retryStrategy;
          let retryToken = await retryStrategy.acquireInitialRetryToken(context['partition_id']);
          let lastError = new Error();
          let attempts = 0;
          let totalRetryDelay = 0;
          const { request } = args;
          const isRequest = import_protocol_http.HttpRequest.isInstance(request);
          if (isRequest) {
            request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
          }
          while (true) {
            try {
              if (isRequest) {
                request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
              }
              const { response, output } = await next(args);
              retryStrategy.recordSuccess(retryToken);
              output.$metadata.attempts = attempts + 1;
              output.$metadata.totalRetryDelay = totalRetryDelay;
              return { response, output };
            } catch (e) {
              const retryErrorInfo = getRetryErrorInfo(e);
              lastError = asSdkError(e);
              if (isRequest && (0, import_isStreamingPayload.isStreamingPayload)(request)) {
                (_a3 = context.logger instanceof import_smithy_client.NoOpLogger ? console : context.logger) == null
                  ? void 0
                  : _a3.warn('An error was encountered in a non-retryable streaming request.');
                throw lastError;
              }
              try {
                retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
              } catch (refreshError) {
                if (!lastError.$metadata) {
                  lastError.$metadata = {};
                }
                lastError.$metadata.attempts = attempts + 1;
                lastError.$metadata.totalRetryDelay = totalRetryDelay;
                throw lastError;
              }
              attempts = retryToken.getRetryCount();
              const delay = retryToken.getRetryDelay();
              totalRetryDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
            }
          }
        } else {
          retryStrategy = retryStrategy;
          if (retryStrategy == null ? void 0 : retryStrategy.mode)
            context.userAgent = [...(context.userAgent || []), ['cfg/retry-mode', retryStrategy.mode]];
          return retryStrategy.retry(next, args);
        }
      },
      'retryMiddleware'
    );
    var isRetryStrategyV2 = /* @__PURE__ */ __name(
      (retryStrategy) =>
        typeof retryStrategy.acquireInitialRetryToken !== 'undefined' &&
        typeof retryStrategy.refreshRetryTokenForRetry !== 'undefined' &&
        typeof retryStrategy.recordSuccess !== 'undefined',
      'isRetryStrategyV2'
    );
    var getRetryErrorInfo = /* @__PURE__ */ __name((error) => {
      const errorInfo = {
        error,
        errorType: getRetryErrorType(error),
      };
      const retryAfterHint = getRetryAfterHint(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    }, 'getRetryErrorInfo');
    var getRetryErrorType = /* @__PURE__ */ __name((error) => {
      if ((0, import_service_error_classification.isThrottlingError)(error)) return 'THROTTLING';
      if ((0, import_service_error_classification.isTransientError)(error)) return 'TRANSIENT';
      if ((0, import_service_error_classification.isServerError)(error)) return 'SERVER_ERROR';
      return 'CLIENT_ERROR';
    }, 'getRetryErrorType');
    var retryMiddlewareOptions = {
      name: 'retryMiddleware',
      tags: ['RETRY'],
      step: 'finalizeRequest',
      priority: 'high',
      override: true,
    };
    var getRetryPlugin = /* @__PURE__ */ __name(
      (options) => ({
        applyToStack: /* @__PURE__ */ __name((clientStack) => {
          clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
        }, 'applyToStack'),
      }),
      'getRetryPlugin'
    );
    var getRetryAfterHint = /* @__PURE__ */ __name((response) => {
      if (!import_protocol_http.HttpResponse.isInstance(response)) return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === 'retry-after');
      if (!retryAfterHeaderName) return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds)) return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    }, 'getRetryAfterHint');
  },
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider = __commonJS({
  'node_modules/@aws-sdk/client-lambda/dist-cjs/auth/httpAuthSchemeProvider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveHttpAuthSchemeConfig =
      exports.defaultLambdaHttpAuthSchemeProvider =
      exports.defaultLambdaHttpAuthSchemeParametersProvider =
        void 0;
    var core_1 = require_dist_cjs29();
    var util_middleware_1 = require_dist_cjs6();
    var defaultLambdaHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region:
          (await (0, util_middleware_1.normalizeProvider)(config.region)()) ||
          (() => {
            throw new Error('expected `region` to be configured for `aws.auth#sigv4`');
          })(),
      };
    };
    exports.defaultLambdaHttpAuthSchemeParametersProvider = defaultLambdaHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: 'aws.auth#sigv4',
        signingProperties: {
          name: 'lambda',
          region: authParameters.region,
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context,
          },
        }),
      };
    }
    var defaultLambdaHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultLambdaHttpAuthSchemeProvider = defaultLambdaHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config) => {
      var _a;
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return Object.assign(config_0, {
        authSchemePreference: (0, util_middleware_1.normalizeProvider)(
          (_a = config.authSchemePreference) != null ? _a : []
        ),
      });
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  },
});

// node_modules/@aws-sdk/client-lambda/package.json
var require_package = __commonJS({
  'node_modules/@aws-sdk/client-lambda/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-lambda',
      description: 'AWS SDK for JavaScript Lambda Client for Node.js, Browser and React Native',
      version: '3.883.0',
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'node ../../scripts/compilation/inline client-lambda',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:include:deps': 'lerna run --scope $npm_package_name --include-dependencies build',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
        'extract:docs': 'api-extractor run --local',
        'generate:client': 'node ../../scripts/generate-clients/single-service --solo lambda',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '5.2.0',
        '@aws-crypto/sha256-js': '5.2.0',
        '@aws-sdk/core': '3.883.0',
        '@aws-sdk/credential-provider-node': '3.883.0',
        '@aws-sdk/middleware-host-header': '3.873.0',
        '@aws-sdk/middleware-logger': '3.876.0',
        '@aws-sdk/middleware-recursion-detection': '3.873.0',
        '@aws-sdk/middleware-user-agent': '3.883.0',
        '@aws-sdk/region-config-resolver': '3.873.0',
        '@aws-sdk/types': '3.862.0',
        '@aws-sdk/util-endpoints': '3.879.0',
        '@aws-sdk/util-user-agent-browser': '3.873.0',
        '@aws-sdk/util-user-agent-node': '3.883.0',
        '@smithy/config-resolver': '^4.1.5',
        '@smithy/core': '^3.9.2',
        '@smithy/eventstream-serde-browser': '^4.0.5',
        '@smithy/eventstream-serde-config-resolver': '^4.1.3',
        '@smithy/eventstream-serde-node': '^4.0.5',
        '@smithy/fetch-http-handler': '^5.1.1',
        '@smithy/hash-node': '^4.0.5',
        '@smithy/invalid-dependency': '^4.0.5',
        '@smithy/middleware-content-length': '^4.0.5',
        '@smithy/middleware-endpoint': '^4.1.21',
        '@smithy/middleware-retry': '^4.1.22',
        '@smithy/middleware-serde': '^4.0.9',
        '@smithy/middleware-stack': '^4.0.5',
        '@smithy/node-config-provider': '^4.1.4',
        '@smithy/node-http-handler': '^4.1.1',
        '@smithy/protocol-http': '^5.1.3',
        '@smithy/smithy-client': '^4.5.2',
        '@smithy/types': '^4.3.2',
        '@smithy/url-parser': '^4.0.5',
        '@smithy/util-base64': '^4.0.0',
        '@smithy/util-body-length-browser': '^4.0.0',
        '@smithy/util-body-length-node': '^4.0.0',
        '@smithy/util-defaults-mode-browser': '^4.0.29',
        '@smithy/util-defaults-mode-node': '^4.0.29',
        '@smithy/util-endpoints': '^3.0.7',
        '@smithy/util-middleware': '^4.0.5',
        '@smithy/util-retry': '^4.0.7',
        '@smithy/util-stream': '^4.2.4',
        '@smithy/util-utf8': '^4.0.0',
        '@smithy/util-waiter': '^4.0.7',
        tslib: '^2.6.2',
      },
      devDependencies: {
        '@tsconfig/node18': '18.2.4',
        '@types/node': '^18.19.69',
        concurrently: '7.0.0',
        'downlevel-dts': '0.10.1',
        rimraf: '3.0.2',
        typescript: '~5.8.3',
      },
      engines: {
        node: '>=18.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*/**'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage: 'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-lambda',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-lambda',
      },
    };
  },
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      ENV_ACCOUNT_ID: () => ENV_ACCOUNT_ID,
      ENV_CREDENTIAL_SCOPE: () => ENV_CREDENTIAL_SCOPE,
      ENV_EXPIRATION: () => ENV_EXPIRATION,
      ENV_KEY: () => ENV_KEY,
      ENV_SECRET: () => ENV_SECRET,
      ENV_SESSION: () => ENV_SESSION,
      fromEnv: () => fromEnv,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_client = require_client2();
    var import_property_provider = require_dist_cjs23();
    var ENV_KEY = 'AWS_ACCESS_KEY_ID';
    var ENV_SECRET = 'AWS_SECRET_ACCESS_KEY';
    var ENV_SESSION = 'AWS_SESSION_TOKEN';
    var ENV_EXPIRATION = 'AWS_CREDENTIAL_EXPIRATION';
    var ENV_CREDENTIAL_SCOPE = 'AWS_CREDENTIAL_SCOPE';
    var ENV_ACCOUNT_ID = 'AWS_ACCOUNT_ID';
    var fromEnv = /* @__PURE__ */ __name(
      (init) => async () => {
        var _a;
        (_a = init == null ? void 0 : init.logger) == null
          ? void 0
          : _a.debug('@aws-sdk/credential-provider-env - fromEnv');
        const accessKeyId = process.env[ENV_KEY];
        const secretAccessKey = process.env[ENV_SECRET];
        const sessionToken = process.env[ENV_SESSION];
        const expiry = process.env[ENV_EXPIRATION];
        const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];
        const accountId = process.env[ENV_ACCOUNT_ID];
        if (accessKeyId && secretAccessKey) {
          const credentials = __spreadValues(
            __spreadValues(
              __spreadValues(
                __spreadValues(
                  {
                    accessKeyId,
                    secretAccessKey,
                  },
                  sessionToken && { sessionToken }
                ),
                expiry && { expiration: new Date(expiry) }
              ),
              credentialScope && { credentialScope }
            ),
            accountId && { accountId }
          );
          (0, import_client.setCredentialFeature)(credentials, 'CREDENTIALS_ENV_VARS', 'g');
          return credentials;
        }
        throw new import_property_provider.CredentialsProviderError(
          'Unable to find environment variable credentials.',
          { logger: init == null ? void 0 : init.logger }
        );
      },
      'fromEnv'
    );
  },
});

// node_modules/@smithy/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  'node_modules/@smithy/credential-provider-imds/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      DEFAULT_MAX_RETRIES: () => DEFAULT_MAX_RETRIES,
      DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT,
      ENV_CMDS_AUTH_TOKEN: () => ENV_CMDS_AUTH_TOKEN,
      ENV_CMDS_FULL_URI: () => ENV_CMDS_FULL_URI,
      ENV_CMDS_RELATIVE_URI: () => ENV_CMDS_RELATIVE_URI,
      Endpoint: () => Endpoint,
      fromContainerMetadata: () => fromContainerMetadata,
      fromInstanceMetadata: () => fromInstanceMetadata,
      getInstanceMetadataEndpoint: () => getInstanceMetadataEndpoint,
      httpRequest: () => httpRequest,
      providerConfigFromInit: () => providerConfigFromInit,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_url = require('url');
    var import_property_provider = require_dist_cjs23();
    var import_buffer = require('buffer');
    var import_http = require('http');
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a2;
        const req = (0, import_http.request)(
          __spreadProps(
            __spreadValues(
              {
                method: 'GET',
              },
              options
            ),
            {
              hostname: (_a2 = options.hostname) == null ? void 0 : _a2.replace(/^\[(.+)\]$/, '$1'),
            }
          )
        );
        req.on('error', (err) => {
          reject(
            Object.assign(
              new import_property_provider.ProviderError('Unable to connect to instance metadata service'),
              err
            )
          );
          req.destroy();
        });
        req.on('timeout', () => {
          reject(new import_property_provider.ProviderError('TimeoutError from instance metadata service'));
          req.destroy();
        });
        req.on('response', (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(
              Object.assign(
                new import_property_provider.ProviderError('Error response received from instance metadata service'),
                { statusCode }
              )
            );
            req.destroy();
          }
          const chunks = [];
          res.on('data', (chunk) => {
            chunks.push(chunk);
          });
          res.on('end', () => {
            resolve(import_buffer.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    __name(httpRequest, 'httpRequest');
    var isImdsCredentials = /* @__PURE__ */ __name(
      (arg) =>
        Boolean(arg) &&
        typeof arg === 'object' &&
        typeof arg.AccessKeyId === 'string' &&
        typeof arg.SecretAccessKey === 'string' &&
        typeof arg.Token === 'string' &&
        typeof arg.Expiration === 'string',
      'isImdsCredentials'
    );
    var fromImdsCredentials = /* @__PURE__ */ __name(
      (creds) =>
        __spreadValues(
          {
            accessKeyId: creds.AccessKeyId,
            secretAccessKey: creds.SecretAccessKey,
            sessionToken: creds.Token,
            expiration: new Date(creds.Expiration),
          },
          creds.AccountId && { accountId: creds.AccountId }
        ),
      'fromImdsCredentials'
    );
    var DEFAULT_TIMEOUT = 1e3;
    var DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = /* @__PURE__ */ __name(
      ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT }) => ({ maxRetries, timeout }),
      'providerConfigFromInit'
    );
    var retry = /* @__PURE__ */ __name((toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    }, 'retry');
    var ENV_CMDS_FULL_URI = 'AWS_CONTAINER_CREDENTIALS_FULL_URI';
    var ENV_CMDS_RELATIVE_URI = 'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI';
    var ENV_CMDS_AUTH_TOKEN = 'AWS_CONTAINER_AUTHORIZATION_TOKEN';
    var fromContainerMetadata = /* @__PURE__ */ __name((init = {}) => {
      const { timeout, maxRetries } = providerConfigFromInit(init);
      return () =>
        retry(async () => {
          const requestOptions = await getCmdsUri({ logger: init.logger });
          const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
          if (!isImdsCredentials(credsResponse)) {
            throw new import_property_provider.CredentialsProviderError(
              'Invalid response received from instance metadata service.',
              {
                logger: init.logger,
              }
            );
          }
          return fromImdsCredentials(credsResponse);
        }, maxRetries);
    }, 'fromContainerMetadata');
    var requestFromEcsImds = /* @__PURE__ */ __name(async (timeout, options) => {
      if (process.env[ENV_CMDS_AUTH_TOKEN]) {
        options.headers = __spreadProps(__spreadValues({}, options.headers), {
          Authorization: process.env[ENV_CMDS_AUTH_TOKEN],
        });
      }
      const buffer = await httpRequest(
        __spreadProps(__spreadValues({}, options), {
          timeout,
        })
      );
      return buffer.toString();
    }, 'requestFromEcsImds');
    var CMDS_IP = '169.254.170.2';
    var GREENGRASS_HOSTS = {
      localhost: true,
      '127.0.0.1': true,
    };
    var GREENGRASS_PROTOCOLS = {
      'http:': true,
      'https:': true,
    };
    var getCmdsUri = /* @__PURE__ */ __name(async ({ logger: logger2 }) => {
      if (process.env[ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[ENV_CMDS_RELATIVE_URI],
        };
      }
      if (process.env[ENV_CMDS_FULL_URI]) {
        const parsed = (0, import_url.parse)(process.env[ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new import_property_provider.CredentialsProviderError(
            `${parsed.hostname} is not a valid container metadata service hostname`,
            {
              tryNextLink: false,
              logger: logger2,
            }
          );
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new import_property_provider.CredentialsProviderError(
            `${parsed.protocol} is not a valid container metadata service protocol`,
            {
              tryNextLink: false,
              logger: logger2,
            }
          );
        }
        return __spreadProps(__spreadValues({}, parsed), {
          port: parsed.port ? parseInt(parsed.port, 10) : void 0,
        });
      }
      throw new import_property_provider.CredentialsProviderError(
        `The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment variable is set`,
        {
          tryNextLink: false,
          logger: logger2,
        }
      );
    }, 'getCmdsUri');
    var _a;
    var InstanceMetadataV1FallbackError =
      ((_a = class extends import_property_provider.CredentialsProviderError {
        constructor(message, tryNextLink = true) {
          super(message, tryNextLink);
          this.tryNextLink = tryNextLink;
          this.name = 'InstanceMetadataV1FallbackError';
          Object.setPrototypeOf(this, _a.prototype);
        }
      }),
      (() => {
        __name(_a, 'InstanceMetadataV1FallbackError');
      })(),
      _a);
    var import_node_config_provider = require_dist_cjs36();
    var import_url_parser = require_dist_cjs21();
    var Endpoint = /* @__PURE__ */ ((Endpoint2) => {
      Endpoint2['IPv4'] = 'http://169.254.169.254';
      Endpoint2['IPv6'] = 'http://[fd00:ec2::254]';
      return Endpoint2;
    })(Endpoint || {});
    var ENV_ENDPOINT_NAME = 'AWS_EC2_METADATA_SERVICE_ENDPOINT';
    var CONFIG_ENDPOINT_NAME = 'ec2_metadata_service_endpoint';
    var ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: /* @__PURE__ */ __name(
        (env) => env[ENV_ENDPOINT_NAME],
        'environmentVariableSelector'
      ),
      configFileSelector: /* @__PURE__ */ __name((profile) => profile[CONFIG_ENDPOINT_NAME], 'configFileSelector'),
      default: void 0,
    };
    var EndpointMode = /* @__PURE__ */ ((EndpointMode2) => {
      EndpointMode2['IPv4'] = 'IPv4';
      EndpointMode2['IPv6'] = 'IPv6';
      return EndpointMode2;
    })(EndpointMode || {});
    var ENV_ENDPOINT_MODE_NAME = 'AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE';
    var CONFIG_ENDPOINT_MODE_NAME = 'ec2_metadata_service_endpoint_mode';
    var ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: /* @__PURE__ */ __name(
        (env) => env[ENV_ENDPOINT_MODE_NAME],
        'environmentVariableSelector'
      ),
      configFileSelector: /* @__PURE__ */ __name((profile) => profile[CONFIG_ENDPOINT_MODE_NAME], 'configFileSelector'),
      default: 'IPv4',
    };
    var getInstanceMetadataEndpoint = /* @__PURE__ */ __name(
      async () =>
        (0, import_url_parser.parseUrl)((await getFromEndpointConfig()) || (await getFromEndpointModeConfig())),
      'getInstanceMetadataEndpoint'
    );
    var getFromEndpointConfig = /* @__PURE__ */ __name(
      async () => (0, import_node_config_provider.loadConfig)(ENDPOINT_CONFIG_OPTIONS)(),
      'getFromEndpointConfig'
    );
    var getFromEndpointModeConfig = /* @__PURE__ */ __name(async () => {
      const endpointMode = await (0, import_node_config_provider.loadConfig)(ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case 'IPv4':
          return 'http://169.254.169.254';
        case 'IPv6':
          return 'http://[fd00:ec2::254]';
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode)}`);
      }
    }, 'getFromEndpointModeConfig');
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = 'https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html';
    var getExtendedInstanceMetadataCredentials = /* @__PURE__ */ __name((credentials, logger2) => {
      var _a2;
      const refreshInterval =
        STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +
        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger2.warn(
        `Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(
          newExpiration
        )}.
For more information, please visit: ` + STATIC_STABILITY_DOC_URL
      );
      const originalExpiration = (_a2 = credentials.originalExpiration) != null ? _a2 : credentials.expiration;
      return __spreadProps(
        __spreadValues(__spreadValues({}, credentials), originalExpiration ? { originalExpiration } : {}),
        {
          expiration: newExpiration,
        }
      );
    }, 'getExtendedInstanceMetadataCredentials');
    var staticStabilityProvider = /* @__PURE__ */ __name((provider, options = {}) => {
      const logger2 = (options == null ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = getExtendedInstanceMetadataCredentials(credentials, logger2);
          }
        } catch (e) {
          if (pastCredentials) {
            logger2.warn('Credential renew failed: ', e);
            credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger2);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    }, 'staticStabilityProvider');
    var IMDS_PATH = '/latest/meta-data/iam/security-credentials/';
    var IMDS_TOKEN_PATH = '/latest/api/token';
    var AWS_EC2_METADATA_V1_DISABLED = 'AWS_EC2_METADATA_V1_DISABLED';
    var PROFILE_AWS_EC2_METADATA_V1_DISABLED = 'ec2_metadata_v1_disabled';
    var X_AWS_EC2_METADATA_TOKEN = 'x-aws-ec2-metadata-token';
    var fromInstanceMetadata = /* @__PURE__ */ __name(
      (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger }),
      'fromInstanceMetadata'
    );
    var getInstanceMetadataProvider = /* @__PURE__ */ __name((init = {}) => {
      let disableFetchToken = false;
      const { logger: logger2, profile } = init;
      const { timeout, maxRetries } = providerConfigFromInit(init);
      const getCredentials = /* @__PURE__ */ __name(async (maxRetries2, options) => {
        var _a2;
        const isImdsV1Fallback =
          disableFetchToken || ((_a2 = options.headers) == null ? void 0 : _a2[X_AWS_EC2_METADATA_TOKEN]) == null;
        if (isImdsV1Fallback) {
          let fallbackBlockedFromProfile = false;
          let fallbackBlockedFromProcessEnv = false;
          const configValue = await (0, import_node_config_provider.loadConfig)(
            {
              environmentVariableSelector: /* @__PURE__ */ __name((env) => {
                const envValue = env[AWS_EC2_METADATA_V1_DISABLED];
                fallbackBlockedFromProcessEnv = !!envValue && envValue !== 'false';
                if (envValue === void 0) {
                  throw new import_property_provider.CredentialsProviderError(
                    `${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`,
                    { logger: init.logger }
                  );
                }
                return fallbackBlockedFromProcessEnv;
              }, 'environmentVariableSelector'),
              configFileSelector: /* @__PURE__ */ __name((profile2) => {
                const profileValue = profile2[PROFILE_AWS_EC2_METADATA_V1_DISABLED];
                fallbackBlockedFromProfile = !!profileValue && profileValue !== 'false';
                return fallbackBlockedFromProfile;
              }, 'configFileSelector'),
              default: false,
            },
            {
              profile,
            }
          )();
          if (init.ec2MetadataV1Disabled || configValue) {
            const causes = [];
            if (init.ec2MetadataV1Disabled)
              causes.push('credential provider initialization (runtime option ec2MetadataV1Disabled)');
            if (fallbackBlockedFromProfile)
              causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);
            if (fallbackBlockedFromProcessEnv)
              causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);
            throw new InstanceMetadataV1FallbackError(
              `AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(
                ', '
              )}].`
            );
          }
        }
        const imdsProfile = (
          await retry(async () => {
            let profile2;
            try {
              profile2 = await getProfile(options);
            } catch (err) {
              if (err.statusCode === 401) {
                disableFetchToken = false;
              }
              throw err;
            }
            return profile2;
          }, maxRetries2)
        ).trim();
        return retry(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(imdsProfile, options, init);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      }, 'getCredentials');
      return async () => {
        const endpoint = await getInstanceMetadataEndpoint();
        if (disableFetchToken) {
          logger2 == null ? void 0 : logger2.debug('AWS SDK Instance Metadata', 'using v1 fallback (no token fetch)');
          return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), { timeout }));
        } else {
          let token;
          try {
            token = (await getMetadataToken(__spreadProps(__spreadValues({}, endpoint), { timeout }))).toString();
          } catch (error) {
            if ((error == null ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: 'EC2 Metadata token request returned error',
              });
            } else if (error.message === 'TimeoutError' || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            logger2 == null ? void 0 : logger2.debug('AWS SDK Instance Metadata', 'using v1 fallback (initial)');
            return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), { timeout }));
          }
          return getCredentials(
            maxRetries,
            __spreadProps(__spreadValues({}, endpoint), {
              headers: {
                [X_AWS_EC2_METADATA_TOKEN]: token,
              },
              timeout,
            })
          );
        }
      };
    }, 'getInstanceMetadataProvider');
    var getMetadataToken = /* @__PURE__ */ __name(
      async (options) =>
        httpRequest(
          __spreadProps(__spreadValues({}, options), {
            path: IMDS_TOKEN_PATH,
            method: 'PUT',
            headers: {
              'x-aws-ec2-metadata-token-ttl-seconds': '21600',
            },
          })
        ),
      'getMetadataToken'
    );
    var getProfile = /* @__PURE__ */ __name(
      async (options) =>
        (await httpRequest(__spreadProps(__spreadValues({}, options), { path: IMDS_PATH }))).toString(),
      'getProfile'
    );
    var getCredentialsFromProfile = /* @__PURE__ */ __name(async (profile, options, init) => {
      const credentialsResponse = JSON.parse(
        (
          await httpRequest(
            __spreadProps(__spreadValues({}, options), {
              path: IMDS_PATH + profile,
            })
          )
        ).toString()
      );
      if (!isImdsCredentials(credentialsResponse)) {
        throw new import_property_provider.CredentialsProviderError(
          'Invalid response received from instance metadata service.',
          {
            logger: init.logger,
          }
        );
      }
      return fromImdsCredentials(credentialsResponse);
    }, 'getCredentialsFromProfile');
  },
});

// node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/checkUrl.js
var require_checkUrl = __commonJS({
  'node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/checkUrl.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.checkUrl = void 0;
    var property_provider_1 = require_dist_cjs23();
    var ECS_CONTAINER_HOST = '169.254.170.2';
    var EKS_CONTAINER_HOST_IPv4 = '169.254.170.23';
    var EKS_CONTAINER_HOST_IPv6 = '[fd00:ec2::23]';
    var checkUrl = (url, logger2) => {
      if (url.protocol === 'https:') {
        return;
      }
      if (
        url.hostname === ECS_CONTAINER_HOST ||
        url.hostname === EKS_CONTAINER_HOST_IPv4 ||
        url.hostname === EKS_CONTAINER_HOST_IPv6
      ) {
        return;
      }
      if (url.hostname.includes('[')) {
        if (url.hostname === '[::1]' || url.hostname === '[0000:0000:0000:0000:0000:0000:0000:0001]') {
          return;
        }
      } else {
        if (url.hostname === 'localhost') {
          return;
        }
        const ipComponents = url.hostname.split('.');
        const inRange = (component) => {
          const num = parseInt(component, 10);
          return 0 <= num && num <= 255;
        };
        if (
          ipComponents[0] === '127' &&
          inRange(ipComponents[1]) &&
          inRange(ipComponents[2]) &&
          inRange(ipComponents[3]) &&
          ipComponents.length === 4
        ) {
          return;
        }
      }
      throw new property_provider_1.CredentialsProviderError(
        `URL not accepted. It must either be HTTPS or match one of the following:
  - loopback CIDR 127.0.0.0/8 or [::1/128]
  - ECS container host 169.254.170.2
  - EKS container host 169.254.170.23 or [fd00:ec2::23]`,
        { logger: logger2 }
      );
    };
    exports.checkUrl = checkUrl;
  },
});

// node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/requestHelpers.js
var require_requestHelpers = __commonJS({
  'node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/requestHelpers.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createGetRequest = createGetRequest;
    exports.getCredentials = getCredentials;
    var property_provider_1 = require_dist_cjs23();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs27();
    var util_stream_1 = require_dist_cjs17();
    function createGetRequest(url) {
      return new protocol_http_1.HttpRequest({
        protocol: url.protocol,
        hostname: url.hostname,
        port: Number(url.port),
        path: url.pathname,
        query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {
          acc[k] = v;
          return acc;
        }, {}),
        fragment: url.hash,
      });
    }
    async function getCredentials(response, logger2) {
      const stream = (0, util_stream_1.sdkStreamMixin)(response.body);
      const str = await stream.transformToString();
      if (response.statusCode === 200) {
        const parsed = JSON.parse(str);
        if (
          typeof parsed.AccessKeyId !== 'string' ||
          typeof parsed.SecretAccessKey !== 'string' ||
          typeof parsed.Token !== 'string' ||
          typeof parsed.Expiration !== 'string'
        ) {
          throw new property_provider_1.CredentialsProviderError(
            'HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }',
            { logger: logger2 }
          );
        }
        return {
          accessKeyId: parsed.AccessKeyId,
          secretAccessKey: parsed.SecretAccessKey,
          sessionToken: parsed.Token,
          expiration: (0, smithy_client_1.parseRfc3339DateTime)(parsed.Expiration),
        };
      }
      if (response.statusCode >= 400 && response.statusCode < 500) {
        let parsedBody = {};
        try {
          parsedBody = JSON.parse(str);
        } catch (e) {}
        throw Object.assign(
          new property_provider_1.CredentialsProviderError(`Server responded with status: ${response.statusCode}`, {
            logger: logger2,
          }),
          {
            Code: parsedBody.Code,
            Message: parsedBody.Message,
          }
        );
      }
      throw new property_provider_1.CredentialsProviderError(`Server responded with status: ${response.statusCode}`, {
        logger: logger2,
      });
    }
  },
});

// node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/retry-wrapper.js
var require_retry_wrapper = __commonJS({
  'node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/retry-wrapper.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.retryWrapper = void 0;
    var retryWrapper = (toRetry, maxRetries, delayMs) => {
      return async () => {
        for (let i = 0; i < maxRetries; ++i) {
          try {
            return await toRetry();
          } catch (e) {
            await new Promise((resolve) => setTimeout(resolve, delayMs));
          }
        }
        return await toRetry();
      };
    };
    exports.retryWrapper = retryWrapper;
  },
});

// node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/fromHttp.js
var require_fromHttp = __commonJS({
  'node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/fromHttp.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromHttp = void 0;
    var tslib_1 = require_tslib();
    var client_1 = require_client2();
    var node_http_handler_1 = require_dist_cjs14();
    var property_provider_1 = require_dist_cjs23();
    var promises_1 = tslib_1.__importDefault(require('fs/promises'));
    var checkUrl_1 = require_checkUrl();
    var requestHelpers_1 = require_requestHelpers();
    var retry_wrapper_1 = require_retry_wrapper();
    var AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = 'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI';
    var DEFAULT_LINK_LOCAL_HOST = 'http://169.254.170.2';
    var AWS_CONTAINER_CREDENTIALS_FULL_URI = 'AWS_CONTAINER_CREDENTIALS_FULL_URI';
    var AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = 'AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE';
    var AWS_CONTAINER_AUTHORIZATION_TOKEN = 'AWS_CONTAINER_AUTHORIZATION_TOKEN';
    var fromHttp = (options = {}) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
      (_a = options.logger) == null ? void 0 : _a.debug('@aws-sdk/credential-provider-http - fromHttp');
      let host;
      const relative =
        (_b = options.awsContainerCredentialsRelativeUri) != null
          ? _b
          : process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];
      const full =
        (_c = options.awsContainerCredentialsFullUri) != null ? _c : process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];
      const token =
        (_d = options.awsContainerAuthorizationToken) != null ? _d : process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];
      const tokenFile =
        (_e = options.awsContainerAuthorizationTokenFile) != null
          ? _e
          : process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];
      const warn =
        ((_g = (_f = options.logger) == null ? void 0 : _f.constructor) == null ? void 0 : _g.name) === 'NoOpLogger' ||
        !((_h = options.logger) == null ? void 0 : _h.warn)
          ? console.warn
          : options.logger.warn.bind(options.logger);
      if (relative && full) {
        warn(
          '@aws-sdk/credential-provider-http: you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.'
        );
        warn('awsContainerCredentialsFullUri will take precedence.');
      }
      if (token && tokenFile) {
        warn(
          '@aws-sdk/credential-provider-http: you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.'
        );
        warn('awsContainerAuthorizationToken will take precedence.');
      }
      if (full) {
        host = full;
      } else if (relative) {
        host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;
      } else {
        throw new property_provider_1.CredentialsProviderError(
          `No HTTP credential provider host provided.
Set AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`,
          { logger: options.logger }
        );
      }
      const url = new URL(host);
      (0, checkUrl_1.checkUrl)(url, options.logger);
      const requestHandler = new node_http_handler_1.NodeHttpHandler({
        requestTimeout: (_i = options.timeout) != null ? _i : 1e3,
        connectionTimeout: (_j = options.timeout) != null ? _j : 1e3,
      });
      return (0, retry_wrapper_1.retryWrapper)(
        async () => {
          const request = (0, requestHelpers_1.createGetRequest)(url);
          if (token) {
            request.headers.Authorization = token;
          } else if (tokenFile) {
            request.headers.Authorization = (await promises_1.default.readFile(tokenFile)).toString();
          }
          try {
            const result = await requestHandler.handle(request);
            return (0, requestHelpers_1.getCredentials)(result.response).then((creds) =>
              (0, client_1.setCredentialFeature)(creds, 'CREDENTIALS_HTTP', 'z')
            );
          } catch (e) {
            throw new property_provider_1.CredentialsProviderError(String(e), { logger: options.logger });
          }
        },
        (_k = options.maxRetries) != null ? _k : 3,
        (_l = options.timeout) != null ? _l : 1e3
      );
    };
    exports.fromHttp = fromHttp;
  },
});

// node_modules/@aws-sdk/credential-provider-http/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-http/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromHttp = void 0;
    var fromHttp_1 = require_fromHttp();
    Object.defineProperty(exports, 'fromHttp', {
      enumerable: true,
      get: function () {
        return fromHttp_1.fromHttp;
      },
    });
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider2 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveHttpAuthSchemeConfig =
      exports.defaultSSOHttpAuthSchemeProvider =
      exports.defaultSSOHttpAuthSchemeParametersProvider =
        void 0;
    var core_1 = require_dist_cjs29();
    var util_middleware_1 = require_dist_cjs6();
    var defaultSSOHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region:
          (await (0, util_middleware_1.normalizeProvider)(config.region)()) ||
          (() => {
            throw new Error('expected `region` to be configured for `aws.auth#sigv4`');
          })(),
      };
    };
    exports.defaultSSOHttpAuthSchemeParametersProvider = defaultSSOHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: 'aws.auth#sigv4',
        signingProperties: {
          name: 'awsssoportal',
          region: authParameters.region,
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context,
          },
        }),
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: 'smithy.api#noAuth',
      };
    }
    var defaultSSOHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case 'GetRoleCredentials': {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case 'ListAccountRoles': {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case 'ListAccounts': {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case 'Logout': {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultSSOHttpAuthSchemeProvider = defaultSSOHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config) => {
      var _a;
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return Object.assign(config_0, {
        authSchemePreference: (0, util_middleware_1.normalizeProvider)(
          (_a = config.authSchemePreference) != null ? _a : []
        ),
      });
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  },
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package2 = __commonJS({
  'node_modules/@aws-sdk/client-sso/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-sso',
      description: 'AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native',
      version: '3.883.0',
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'node ../../scripts/compilation/inline client-sso',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:include:deps': 'lerna run --scope $npm_package_name --include-dependencies build',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
        'extract:docs': 'api-extractor run --local',
        'generate:client': 'node ../../scripts/generate-clients/single-service --solo sso',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '5.2.0',
        '@aws-crypto/sha256-js': '5.2.0',
        '@aws-sdk/core': '3.883.0',
        '@aws-sdk/middleware-host-header': '3.873.0',
        '@aws-sdk/middleware-logger': '3.876.0',
        '@aws-sdk/middleware-recursion-detection': '3.873.0',
        '@aws-sdk/middleware-user-agent': '3.883.0',
        '@aws-sdk/region-config-resolver': '3.873.0',
        '@aws-sdk/types': '3.862.0',
        '@aws-sdk/util-endpoints': '3.879.0',
        '@aws-sdk/util-user-agent-browser': '3.873.0',
        '@aws-sdk/util-user-agent-node': '3.883.0',
        '@smithy/config-resolver': '^4.1.5',
        '@smithy/core': '^3.9.2',
        '@smithy/fetch-http-handler': '^5.1.1',
        '@smithy/hash-node': '^4.0.5',
        '@smithy/invalid-dependency': '^4.0.5',
        '@smithy/middleware-content-length': '^4.0.5',
        '@smithy/middleware-endpoint': '^4.1.21',
        '@smithy/middleware-retry': '^4.1.22',
        '@smithy/middleware-serde': '^4.0.9',
        '@smithy/middleware-stack': '^4.0.5',
        '@smithy/node-config-provider': '^4.1.4',
        '@smithy/node-http-handler': '^4.1.1',
        '@smithy/protocol-http': '^5.1.3',
        '@smithy/smithy-client': '^4.5.2',
        '@smithy/types': '^4.3.2',
        '@smithy/url-parser': '^4.0.5',
        '@smithy/util-base64': '^4.0.0',
        '@smithy/util-body-length-browser': '^4.0.0',
        '@smithy/util-body-length-node': '^4.0.0',
        '@smithy/util-defaults-mode-browser': '^4.0.29',
        '@smithy/util-defaults-mode-node': '^4.0.29',
        '@smithy/util-endpoints': '^3.0.7',
        '@smithy/util-middleware': '^4.0.5',
        '@smithy/util-retry': '^4.0.7',
        '@smithy/util-utf8': '^4.0.0',
        tslib: '^2.6.2',
      },
      devDependencies: {
        '@tsconfig/node18': '18.2.4',
        '@types/node': '^18.19.69',
        concurrently: '7.0.0',
        'downlevel-dts': '0.10.1',
        rimraf: '3.0.2',
        typescript: '~5.8.3',
      },
      engines: {
        node: '>=18.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*/**'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage: 'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-sso',
      },
    };
  },
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  'node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      NODE_APP_ID_CONFIG_OPTIONS: () => NODE_APP_ID_CONFIG_OPTIONS,
      UA_APP_ID_ENV_NAME: () => UA_APP_ID_ENV_NAME,
      UA_APP_ID_INI_NAME: () => UA_APP_ID_INI_NAME,
      createDefaultUserAgentProvider: () => createDefaultUserAgentProvider,
      crtAvailability: () => crtAvailability,
      defaultUserAgent: () => defaultUserAgent,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_os = require('os');
    var import_process = require('process');
    var crtAvailability = {
      isCrtAvailable: false,
    };
    var isCrtAvailable = /* @__PURE__ */ __name(() => {
      if (crtAvailability.isCrtAvailable) {
        return ['md/crt-avail'];
      }
      return null;
    }, 'isCrtAvailable');
    var createDefaultUserAgentProvider = /* @__PURE__ */ __name(({ serviceId, clientVersion }) => {
      return async (config) => {
        var _a;
        const sections = [
          ['aws-sdk-js', clientVersion],
          ['ua', '2.1'],
          [`os/${(0, import_os.platform)()}`, (0, import_os.release)()],
          ['lang/js'],
          ['md/nodejs', `${import_process.versions.node}`],
        ];
        const crtAvailable = isCrtAvailable();
        if (crtAvailable) {
          sections.push(crtAvailable);
        }
        if (serviceId) {
          sections.push([`api/${serviceId}`, clientVersion]);
        }
        if (import_process.env.AWS_EXECUTION_ENV) {
          sections.push([`exec-env/${import_process.env.AWS_EXECUTION_ENV}`]);
        }
        const appId = await ((_a = config == null ? void 0 : config.userAgentAppId) == null ? void 0 : _a.call(config));
        const resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        return resolvedUserAgent;
      };
    }, 'createDefaultUserAgentProvider');
    var defaultUserAgent = createDefaultUserAgentProvider;
    var import_middleware_user_agent = require_dist_cjs30();
    var UA_APP_ID_ENV_NAME = 'AWS_SDK_UA_APP_ID';
    var UA_APP_ID_INI_NAME = 'sdk_ua_app_id';
    var UA_APP_ID_INI_NAME_DEPRECATED = 'sdk-ua-app-id';
    var NODE_APP_ID_CONFIG_OPTIONS = {
      environmentVariableSelector: /* @__PURE__ */ __name(
        (env2) => env2[UA_APP_ID_ENV_NAME],
        'environmentVariableSelector'
      ),
      configFileSelector: /* @__PURE__ */ __name((profile) => {
        var _a;
        return (_a = profile[UA_APP_ID_INI_NAME]) != null ? _a : profile[UA_APP_ID_INI_NAME_DEPRECATED];
      }, 'configFileSelector'),
      default: import_middleware_user_agent.DEFAULT_UA_APP_ID,
    };
  },
});

// node_modules/@smithy/hash-node/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  'node_modules/@smithy/hash-node/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      Hash: () => Hash,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_util_buffer_from = require_dist_cjs9();
    var import_util_utf8 = require_dist_cjs10();
    var import_buffer = require('buffer');
    var import_crypto = require('crypto');
    var _a;
    var Hash =
      ((_a = class {
        constructor(algorithmIdentifier, secret) {
          this.algorithmIdentifier = algorithmIdentifier;
          this.secret = secret;
          this.reset();
        }
        update(toHash, encoding) {
          this.hash.update((0, import_util_utf8.toUint8Array)(castSourceData(toHash, encoding)));
        }
        digest() {
          return Promise.resolve(this.hash.digest());
        }
        reset() {
          this.hash = this.secret
            ? (0, import_crypto.createHmac)(this.algorithmIdentifier, castSourceData(this.secret))
            : (0, import_crypto.createHash)(this.algorithmIdentifier);
        }
      }),
      (() => {
        __name(_a, 'Hash');
      })(),
      _a);
    function castSourceData(toCast, encoding) {
      if (import_buffer.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === 'string') {
        return (0, import_util_buffer_from.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, import_util_buffer_from.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(toCast);
    }
    __name(castSourceData, 'castSourceData');
  },
});

// node_modules/@smithy/util-body-length-node/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  'node_modules/@smithy/util-body-length-node/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      calculateBodyLength: () => calculateBodyLength,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_fs = require('fs');
    var calculateBodyLength = /* @__PURE__ */ __name((body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === 'string') {
        return Buffer.byteLength(body);
      } else if (typeof body.byteLength === 'number') {
        return body.byteLength;
      } else if (typeof body.size === 'number') {
        return body.size;
      } else if (typeof body.start === 'number' && typeof body.end === 'number') {
        return body.end + 1 - body.start;
      } else if (typeof body.path === 'string' || Buffer.isBuffer(body.path)) {
        return (0, import_fs.lstatSync)(body.path).size;
      } else if (typeof body.fd === 'number') {
        return (0, import_fs.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    }, 'calculateBodyLength');
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ruleSet = void 0;
    var u = 'required';
    var v = 'fn';
    var w = 'argv';
    var x = 'ref';
    var a = true;
    var b = 'isSet';
    var c = 'booleanEquals';
    var d = 'error';
    var e = 'endpoint';
    var f = 'tree';
    var g = 'PartitionResult';
    var h = 'getAttr';
    var i = { [u]: false, type: 'String' };
    var j = { [u]: true, default: false, type: 'Boolean' };
    var k = { [x]: 'Endpoint' };
    var l = { [v]: c, [w]: [{ [x]: 'UseFIPS' }, true] };
    var m = { [v]: c, [w]: [{ [x]: 'UseDualStack' }, true] };
    var n = {};
    var o = { [v]: h, [w]: [{ [x]: g }, 'supportsFIPS'] };
    var p = { [x]: g };
    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, 'supportsDualStack'] }] };
    var r = [l];
    var s = [m];
    var t = [{ [x]: 'Region' }];
    var _data = {
      version: '1.0',
      parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i },
      rules: [
        {
          conditions: [{ [v]: b, [w]: [k] }],
          rules: [
            { conditions: r, error: 'Invalid Configuration: FIPS and custom endpoint are not supported', type: d },
            { conditions: s, error: 'Invalid Configuration: Dualstack and custom endpoint are not supported', type: d },
            { endpoint: { url: k, properties: n, headers: n }, type: e },
          ],
          type: f,
        },
        {
          conditions: [{ [v]: b, [w]: t }],
          rules: [
            {
              conditions: [{ [v]: 'aws.partition', [w]: t, assign: g }],
              rules: [
                {
                  conditions: [l, m],
                  rules: [
                    {
                      conditions: [{ [v]: c, [w]: [a, o] }, q],
                      rules: [
                        {
                          endpoint: {
                            url: 'https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}',
                            properties: n,
                            headers: n,
                          },
                          type: e,
                        },
                      ],
                      type: f,
                    },
                    {
                      error: 'FIPS and DualStack are enabled, but this partition does not support one or both',
                      type: d,
                    },
                  ],
                  type: f,
                },
                {
                  conditions: r,
                  rules: [
                    {
                      conditions: [{ [v]: c, [w]: [o, a] }],
                      rules: [
                        {
                          conditions: [{ [v]: 'stringEquals', [w]: [{ [v]: h, [w]: [p, 'name'] }, 'aws-us-gov'] }],
                          endpoint: { url: 'https://portal.sso.{Region}.amazonaws.com', properties: n, headers: n },
                          type: e,
                        },
                        {
                          endpoint: {
                            url: 'https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}',
                            properties: n,
                            headers: n,
                          },
                          type: e,
                        },
                      ],
                      type: f,
                    },
                    { error: 'FIPS is enabled but this partition does not support FIPS', type: d },
                  ],
                  type: f,
                },
                {
                  conditions: s,
                  rules: [
                    {
                      conditions: [q],
                      rules: [
                        {
                          endpoint: {
                            url: 'https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}',
                            properties: n,
                            headers: n,
                          },
                          type: e,
                        },
                      ],
                      type: f,
                    },
                    { error: 'DualStack is enabled but this partition does not support DualStack', type: d },
                  ],
                  type: f,
                },
                {
                  endpoint: {
                    url: 'https://portal.sso.{Region}.{PartitionResult#dnsSuffix}',
                    properties: n,
                    headers: n,
                  },
                  type: e,
                },
              ],
              type: f,
            },
          ],
          type: f,
        },
        { error: 'Invalid Configuration: Missing Region', type: d },
      ],
    };
    exports.ruleSet = _data;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs22();
    var util_endpoints_2 = require_dist_cjs19();
    var ruleset_1 = require_ruleset();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ['Endpoint', 'Region', 'UseDualStack', 'UseFIPS'],
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () =>
        (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
          endpointParams,
          logger: context.logger,
        })
      );
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = require_dist_cjs29();
    var core_2 = require_dist_cjs18();
    var smithy_client_1 = require_dist_cjs27();
    var url_parser_1 = require_dist_cjs21();
    var util_base64_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs10();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider2();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
      return {
        apiVersion: '2019-06-10',
        base64Decoder: (_a = config == null ? void 0 : config.base64Decoder) != null ? _a : util_base64_1.fromBase64,
        base64Encoder: (_b = config == null ? void 0 : config.base64Encoder) != null ? _b : util_base64_1.toBase64,
        disableHostPrefix: (_c = config == null ? void 0 : config.disableHostPrefix) != null ? _c : false,
        endpointProvider:
          (_d = config == null ? void 0 : config.endpointProvider) != null
            ? _d
            : endpointResolver_1.defaultEndpointResolver,
        extensions: (_e = config == null ? void 0 : config.extensions) != null ? _e : [],
        httpAuthSchemeProvider:
          (_f = config == null ? void 0 : config.httpAuthSchemeProvider) != null
            ? _f
            : httpAuthSchemeProvider_1.defaultSSOHttpAuthSchemeProvider,
        httpAuthSchemes:
          (_g = config == null ? void 0 : config.httpAuthSchemes) != null
            ? _g
            : [
                {
                  schemeId: 'aws.auth#sigv4',
                  identityProvider: (ipc) => ipc.getIdentityProvider('aws.auth#sigv4'),
                  signer: new core_1.AwsSdkSigV4Signer(),
                },
                {
                  schemeId: 'smithy.api#noAuth',
                  identityProvider: (ipc) => ipc.getIdentityProvider('smithy.api#noAuth') || (async () => ({})),
                  signer: new core_2.NoAuthSigner(),
                },
              ],
        logger: (_h = config == null ? void 0 : config.logger) != null ? _h : new smithy_client_1.NoOpLogger(),
        serviceId: (_i = config == null ? void 0 : config.serviceId) != null ? _i : 'SSO',
        urlParser: (_j = config == null ? void 0 : config.urlParser) != null ? _j : url_parser_1.parseUrl,
        utf8Decoder: (_k = config == null ? void 0 : config.utf8Decoder) != null ? _k : util_utf8_1.fromUtf8,
        utf8Encoder: (_l = config == null ? void 0 : config.utf8Encoder) != null ? _l : util_utf8_1.toUtf8,
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  'node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js'(exports, module2) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (
      (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),
      __copyProps2(
        isNodeMode || !mod || !mod.__esModule
          ? __defProp2(target, 'default', { value: mod, enumerable: true })
          : target,
        mod
      )
    );
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      resolveDefaultsModeConfig: () => resolveDefaultsModeConfig,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_config_resolver = require_dist_cjs32();
    var import_node_config_provider = require_dist_cjs36();
    var import_property_provider = require_dist_cjs23();
    var AWS_EXECUTION_ENV = 'AWS_EXECUTION_ENV';
    var AWS_REGION_ENV = 'AWS_REGION';
    var AWS_DEFAULT_REGION_ENV = 'AWS_DEFAULT_REGION';
    var ENV_IMDS_DISABLED = 'AWS_EC2_METADATA_DISABLED';
    var DEFAULTS_MODE_OPTIONS = ['in-region', 'cross-region', 'mobile', 'standard', 'legacy'];
    var IMDS_REGION_PATH = '/latest/meta-data/placement/region';
    var AWS_DEFAULTS_MODE_ENV = 'AWS_DEFAULTS_MODE';
    var AWS_DEFAULTS_MODE_CONFIG = 'defaults_mode';
    var NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: /* @__PURE__ */ __name((env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      }, 'environmentVariableSelector'),
      configFileSelector: /* @__PURE__ */ __name((profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      }, 'configFileSelector'),
      default: 'legacy',
    };
    var resolveDefaultsModeConfig = /* @__PURE__ */ __name(
      ({
        region = (0, import_node_config_provider.loadConfig)(import_config_resolver.NODE_REGION_CONFIG_OPTIONS),
        defaultsMode = (0, import_node_config_provider.loadConfig)(NODE_DEFAULTS_MODE_CONFIG_OPTIONS),
      } = {}) =>
        (0, import_property_provider.memoize)(async () => {
          const mode = typeof defaultsMode === 'function' ? await defaultsMode() : defaultsMode;
          switch (mode == null ? void 0 : mode.toLowerCase()) {
            case 'auto':
              return resolveNodeDefaultsModeAuto(region);
            case 'in-region':
            case 'cross-region':
            case 'mobile':
            case 'standard':
            case 'legacy':
              return Promise.resolve(mode == null ? void 0 : mode.toLocaleLowerCase());
            case void 0:
              return Promise.resolve('legacy');
            default:
              throw new Error(
                `Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(', ')}, got ${mode}`
              );
          }
        }),
      'resolveDefaultsModeConfig'
    );
    var resolveNodeDefaultsModeAuto = /* @__PURE__ */ __name(async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === 'function' ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return 'standard';
        }
        if (resolvedRegion === inferredRegion) {
          return 'in-region';
        } else {
          return 'cross-region';
        }
      }
      return 'standard';
    }, 'resolveNodeDefaultsModeAuto');
    var inferPhysicalRegion = /* @__PURE__ */ __name(async () => {
      var _a;
      if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[AWS_REGION_ENV]) != null ? _a : process.env[AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[ENV_IMDS_DISABLED]) {
        try {
          const { getInstanceMetadataEndpoint, httpRequest } = await Promise.resolve().then(() =>
            __toESM2(require_dist_cjs42())
          );
          const endpoint = await getInstanceMetadataEndpoint();
          return (
            await httpRequest(__spreadProps(__spreadValues({}, endpoint), { path: IMDS_REGION_PATH }))
          ).toString();
        } catch (e) {}
      }
    }, 'inferPhysicalRegion');
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var core_1 = require_dist_cjs29();
    var util_user_agent_node_1 = require_dist_cjs44();
    var config_resolver_1 = require_dist_cjs32();
    var hash_node_1 = require_dist_cjs45();
    var middleware_retry_1 = require_dist_cjs40();
    var node_config_provider_1 = require_dist_cjs36();
    var node_http_handler_1 = require_dist_cjs14();
    var util_body_length_node_1 = require_dist_cjs46();
    var util_retry_1 = require_dist_cjs39();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs27();
    var util_defaults_mode_node_1 = require_dist_cjs47();
    var smithy_client_2 = require_dist_cjs27();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      const loaderConfig = {
        profile: config == null ? void 0 : config.profile,
        logger: clientSharedValues.logger,
      };
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: 'node',
        defaultsMode,
        authSchemePreference:
          (_a = config == null ? void 0 : config.authSchemePreference) != null
            ? _a
            : (0, node_config_provider_1.loadConfig)(core_1.NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, loaderConfig),
        bodyLengthChecker:
          (_b = config == null ? void 0 : config.bodyLengthChecker) != null
            ? _b
            : util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider:
          (_c = config == null ? void 0 : config.defaultUserAgentProvider) != null
            ? _c
            : (0, util_user_agent_node_1.createDefaultUserAgentProvider)({
                serviceId: clientSharedValues.serviceId,
                clientVersion: package_json_1.default.version,
              }),
        maxAttempts:
          (_d = config == null ? void 0 : config.maxAttempts) != null
            ? _d
            : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
        region:
          (_e = config == null ? void 0 : config.region) != null
            ? _e
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
                __spreadValues(__spreadValues({}, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS), loaderConfig)
              ),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(
          (_f = config == null ? void 0 : config.requestHandler) != null ? _f : defaultConfigProvider
        ),
        retryMode:
          (_g = config == null ? void 0 : config.retryMode) != null
            ? _g
            : (0, node_config_provider_1.loadConfig)(
                __spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
                  default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE,
                }),
                config
              ),
        sha256: (_h = config == null ? void 0 : config.sha256) != null ? _h : hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (_i = config == null ? void 0 : config.streamCollector) != null ? _i : node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (_j = config == null ? void 0 : config.useDualstackEndpoint) != null
            ? _j
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,
                loaderConfig
              ),
        useFipsEndpoint:
          (_k = config == null ? void 0 : config.useFipsEndpoint) != null
            ? _k
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,
                loaderConfig
              ),
        userAgentAppId:
          (_l = config == null ? void 0 : config.userAgentAppId) != null
            ? _l
            : (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, loaderConfig),
      });
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  'node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
      REGION_ENV_NAME: () => REGION_ENV_NAME,
      REGION_INI_NAME: () => REGION_INI_NAME,
      getAwsRegionExtensionConfiguration: () => getAwsRegionExtensionConfiguration,
      resolveAwsRegionExtensionConfiguration: () => resolveAwsRegionExtensionConfiguration,
      resolveRegionConfig: () => resolveRegionConfig,
    });
    module2.exports = __toCommonJS(index_exports);
    var getAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return {
        setRegion(region) {
          runtimeConfig.region = region;
        },
        region() {
          return runtimeConfig.region;
        },
      };
    }, 'getAwsRegionExtensionConfiguration');
    var resolveAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((awsRegionExtensionConfiguration) => {
      return {
        region: awsRegionExtensionConfiguration.region(),
      };
    }, 'resolveAwsRegionExtensionConfiguration');
    var REGION_ENV_NAME = 'AWS_REGION';
    var REGION_INI_NAME = 'region';
    var NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: /* @__PURE__ */ __name((env) => env[REGION_ENV_NAME], 'environmentVariableSelector'),
      configFileSelector: /* @__PURE__ */ __name((profile) => profile[REGION_INI_NAME], 'configFileSelector'),
      default: /* @__PURE__ */ __name(() => {
        throw new Error('Region is missing');
      }, 'default'),
    };
    var NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: 'credentials',
    };
    var isFipsRegion = /* @__PURE__ */ __name(
      (region) => typeof region === 'string' && (region.startsWith('fips-') || region.endsWith('-fips')),
      'isFipsRegion'
    );
    var getRealRegion = /* @__PURE__ */ __name(
      (region) =>
        isFipsRegion(region)
          ? ['fips-aws-global', 'aws-fips'].includes(region)
            ? 'us-east-1'
            : region.replace(/fips-(dkr-|prod-)?|-fips/, '')
          : region,
      'getRealRegion'
    );
    var resolveRegionConfig = /* @__PURE__ */ __name((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error('Region is missing');
      }
      return Object.assign(input, {
        region: /* @__PURE__ */ __name(async () => {
          if (typeof region === 'string') {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        }, 'region'),
        useFipsEndpoint: /* @__PURE__ */ __name(async () => {
          const providedRegion = typeof region === 'string' ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== 'function' ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }, 'useFipsEndpoint'),
      });
    }, 'resolveRegionConfig');
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      GetRoleCredentialsCommand: () => GetRoleCredentialsCommand,
      GetRoleCredentialsRequestFilterSensitiveLog: () => GetRoleCredentialsRequestFilterSensitiveLog,
      GetRoleCredentialsResponseFilterSensitiveLog: () => GetRoleCredentialsResponseFilterSensitiveLog,
      InvalidRequestException: () => InvalidRequestException,
      ListAccountRolesCommand: () => ListAccountRolesCommand,
      ListAccountRolesRequestFilterSensitiveLog: () => ListAccountRolesRequestFilterSensitiveLog,
      ListAccountsCommand: () => ListAccountsCommand,
      ListAccountsRequestFilterSensitiveLog: () => ListAccountsRequestFilterSensitiveLog,
      LogoutCommand: () => LogoutCommand,
      LogoutRequestFilterSensitiveLog: () => LogoutRequestFilterSensitiveLog,
      ResourceNotFoundException: () => ResourceNotFoundException,
      RoleCredentialsFilterSensitiveLog: () => RoleCredentialsFilterSensitiveLog,
      SSO: () => SSO,
      SSOClient: () => SSOClient,
      SSOServiceException: () => SSOServiceException,
      TooManyRequestsException: () => TooManyRequestsException,
      UnauthorizedException: () => UnauthorizedException,
      __Client: () => import_smithy_client.Client,
      paginateListAccountRoles: () => paginateListAccountRoles,
      paginateListAccounts: () => paginateListAccounts,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_middleware_host_header = require_dist_cjs3();
    var import_middleware_logger = require_dist_cjs4();
    var import_middleware_recursion_detection = require_dist_cjs5();
    var import_middleware_user_agent = require_dist_cjs30();
    var import_config_resolver = require_dist_cjs32();
    var import_core2 = require_dist_cjs18();
    var import_middleware_content_length = require_dist_cjs34();
    var import_middleware_endpoint = require_dist_cjs37();
    var import_middleware_retry = require_dist_cjs40();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider2();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      var _a12, _b;
      return Object.assign(options, {
        useDualstackEndpoint: (_a12 = options.useDualstackEndpoint) != null ? _a12 : false,
        useFipsEndpoint: (_b = options.useFipsEndpoint) != null ? _b : false,
        defaultSigningName: 'awsssoportal',
      });
    }, 'resolveClientEndpointParameters');
    var commonParams = {
      UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
      Endpoint: { type: 'builtInParams', name: 'endpoint' },
      Region: { type: 'builtInParams', name: 'region' },
      UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
    };
    var import_runtimeConfig = require_runtimeConfig();
    var import_region_config_resolver = require_dist_cjs48();
    var import_protocol_http = require_dist_cjs2();
    var import_smithy_client = require_dist_cjs27();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        },
      };
    }, 'getHttpAuthExtensionConfiguration');
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
      };
    }, 'resolveHttpAuthRuntimeConfig');
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign(
        (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig),
        (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig),
        (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig),
        getHttpAuthExtensionConfiguration(runtimeConfig)
      );
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(
        runtimeConfig,
        (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
        (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        resolveHttpAuthRuntimeConfig(extensionConfiguration)
      );
    }, 'resolveRuntimeExtensions');
    var _a;
    var SSOClient =
      ((_a = class extends import_smithy_client.Client {
        config;
        constructor(...[configuration]) {
          const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
          super(_config_0);
          this.initConfig = _config_0;
          const _config_1 = resolveClientEndpointParameters(_config_0);
          const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
          const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
          const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
          const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
          const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
          const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
          const _config_8 = resolveRuntimeExtensions(
            _config_7,
            (configuration == null ? void 0 : configuration.extensions) || []
          );
          this.config = _config_8;
          this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
          this.middlewareStack.use(
            (0, import_core2.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
              httpAuthSchemeParametersProvider:
                import_httpAuthSchemeProvider.defaultSSOHttpAuthSchemeParametersProvider,
              identityProviderConfigProvider: /* @__PURE__ */ __name(
                async (config) =>
                  new import_core2.DefaultIdentityProviderConfig({
                    'aws.auth#sigv4': config.credentials,
                  }),
                'identityProviderConfigProvider'
              ),
            })
          );
          this.middlewareStack.use((0, import_core2.getHttpSigningPlugin)(this.config));
        }
        destroy() {
          super.destroy();
        }
      }),
      (() => {
        __name(_a, 'SSOClient');
      })(),
      _a);
    var import_middleware_serde = require_dist_cjs7();
    var _a2;
    var SSOServiceException =
      ((_a2 = class extends import_smithy_client.ServiceException {
        constructor(options) {
          super(options);
          Object.setPrototypeOf(this, _a2.prototype);
        }
      }),
      (() => {
        __name(_a2, 'SSOServiceException');
      })(),
      _a2);
    var _a3;
    var InvalidRequestException =
      ((_a3 = class extends SSOServiceException {
        name = 'InvalidRequestException';
        $fault = 'client';
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidRequestException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a3.prototype);
        }
      }),
      (() => {
        __name(_a3, 'InvalidRequestException');
      })(),
      _a3);
    var _a4;
    var ResourceNotFoundException =
      ((_a4 = class extends SSOServiceException {
        name = 'ResourceNotFoundException';
        $fault = 'client';
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'ResourceNotFoundException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a4.prototype);
        }
      }),
      (() => {
        __name(_a4, 'ResourceNotFoundException');
      })(),
      _a4);
    var _a5;
    var TooManyRequestsException =
      ((_a5 = class extends SSOServiceException {
        name = 'TooManyRequestsException';
        $fault = 'client';
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'TooManyRequestsException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a5.prototype);
        }
      }),
      (() => {
        __name(_a5, 'TooManyRequestsException');
      })(),
      _a5);
    var _a6;
    var UnauthorizedException =
      ((_a6 = class extends SSOServiceException {
        name = 'UnauthorizedException';
        $fault = 'client';
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'UnauthorizedException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a6.prototype);
        }
      }),
      (() => {
        __name(_a6, 'UnauthorizedException');
      })(),
      _a6);
    var GetRoleCredentialsRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }
        ),
      'GetRoleCredentialsRequestFilterSensitiveLog'
    );
    var RoleCredentialsFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues(
            __spreadValues({}, obj),
            obj.secretAccessKey && { secretAccessKey: import_smithy_client.SENSITIVE_STRING }
          ),
          obj.sessionToken && { sessionToken: import_smithy_client.SENSITIVE_STRING }
        ),
      'RoleCredentialsFilterSensitiveLog'
    );
    var GetRoleCredentialsResponseFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) }
        ),
      'GetRoleCredentialsResponseFilterSensitiveLog'
    );
    var ListAccountRolesRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }
        ),
      'ListAccountRolesRequestFilterSensitiveLog'
    );
    var ListAccountsRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }
        ),
      'ListAccountsRequestFilterSensitiveLog'
    );
    var LogoutRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.accessToken && { accessToken: import_smithy_client.SENSITIVE_STRING }
        ),
      'LogoutRequestFilterSensitiveLog'
    );
    var import_core22 = require_dist_cjs29();
    var se_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
        [_xasbt]: input[_aT],
      });
      b.bp('/federation/credentials');
      const query = (0, import_smithy_client.map)({
        [_rn]: [, (0, import_smithy_client.expectNonNull)(input[_rN], `roleName`)],
        [_ai]: [, (0, import_smithy_client.expectNonNull)(input[_aI], `accountId`)],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_GetRoleCredentialsCommand');
    var se_ListAccountRolesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
        [_xasbt]: input[_aT],
      });
      b.bp('/assignment/roles');
      const query = (0, import_smithy_client.map)({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_ai]: [, (0, import_smithy_client.expectNonNull)(input[_aI], `accountId`)],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListAccountRolesCommand');
    var se_ListAccountsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
        [_xasbt]: input[_aT],
      });
      b.bp('/assignment/accounts');
      const query = (0, import_smithy_client.map)({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListAccountsCommand');
    var se_LogoutCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
        [_xasbt]: input[_aT],
      });
      b.bp('/logout');
      let body;
      b.m('POST').h(headers).b(body);
      return b.build();
    }, 'se_LogoutCommand');
    var de_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        roleCredentials: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetRoleCredentialsCommand');
    var de_ListAccountRolesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        nextToken: import_smithy_client.expectString,
        roleList: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListAccountRolesCommand');
    var de_ListAccountsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        accountList: import_smithy_client._json,
        nextToken: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListAccountsCommand');
    var de_LogoutCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_LogoutCommand');
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context),
      });
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.sso#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    }, 'de_CommandError');
    var throwDefaultError = (0, import_smithy_client.withBaseException)(SSOServiceException);
    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InvalidRequestExceptionRes');
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_ResourceNotFoundExceptionRes');
    var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new TooManyRequestsException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_TooManyRequestsExceptionRes');
    var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_UnauthorizedExceptionRes');
    var deserializeMetadata = /* @__PURE__ */ __name((output) => {
      var _a12, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId:
          (_b = (_a12 = output.headers['x-amzn-requestid']) != null ? _a12 : output.headers['x-amzn-request-id']) !=
          null
            ? _b
            : output.headers['x-amz-request-id'],
        extendedRequestId: output.headers['x-amz-id-2'],
        cfId: output.headers['x-amz-cf-id'],
      };
    }, 'deserializeMetadata');
    var _aI = 'accountId';
    var _aT = 'accessToken';
    var _ai = 'account_id';
    var _mR = 'maxResults';
    var _mr = 'max_result';
    var _nT = 'nextToken';
    var _nt = 'next_token';
    var _rN = 'roleName';
    var _rn = 'role_name';
    var _xasbt = 'x-amz-sso_bearer_token';
    var _a7;
    var GetRoleCredentialsCommand =
      ((_a7 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('SWBPortalService', 'GetRoleCredentials', {})
          .n('SSOClient', 'GetRoleCredentialsCommand')
          .f(GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog)
          .ser(se_GetRoleCredentialsCommand)
          .de(de_GetRoleCredentialsCommand)
          .build()
      ) {}),
      (() => {
        __name(_a7, 'GetRoleCredentialsCommand');
      })(),
      _a7);
    var _a8;
    var ListAccountRolesCommand =
      ((_a8 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('SWBPortalService', 'ListAccountRoles', {})
          .n('SSOClient', 'ListAccountRolesCommand')
          .f(ListAccountRolesRequestFilterSensitiveLog, void 0)
          .ser(se_ListAccountRolesCommand)
          .de(de_ListAccountRolesCommand)
          .build()
      ) {}),
      (() => {
        __name(_a8, 'ListAccountRolesCommand');
      })(),
      _a8);
    var _a9;
    var ListAccountsCommand =
      ((_a9 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('SWBPortalService', 'ListAccounts', {})
          .n('SSOClient', 'ListAccountsCommand')
          .f(ListAccountsRequestFilterSensitiveLog, void 0)
          .ser(se_ListAccountsCommand)
          .de(de_ListAccountsCommand)
          .build()
      ) {}),
      (() => {
        __name(_a9, 'ListAccountsCommand');
      })(),
      _a9);
    var _a10;
    var LogoutCommand =
      ((_a10 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('SWBPortalService', 'Logout', {})
          .n('SSOClient', 'LogoutCommand')
          .f(LogoutRequestFilterSensitiveLog, void 0)
          .ser(se_LogoutCommand)
          .de(de_LogoutCommand)
          .build()
      ) {}),
      (() => {
        __name(_a10, 'LogoutCommand');
      })(),
      _a10);
    var commands = {
      GetRoleCredentialsCommand,
      ListAccountRolesCommand,
      ListAccountsCommand,
      LogoutCommand,
    };
    var _a11;
    var SSO =
      ((_a11 = class extends SSOClient {}),
      (() => {
        __name(_a11, 'SSO');
      })(),
      _a11);
    (0, import_smithy_client.createAggregatedClient)(commands, SSO);
    var paginateListAccountRoles = (0, import_core2.createPaginator)(
      SSOClient,
      ListAccountRolesCommand,
      'nextToken',
      'nextToken',
      'maxResults'
    );
    var paginateListAccounts = (0, import_core2.createPaginator)(
      SSOClient,
      ListAccountsCommand,
      'nextToken',
      'nextToken',
      'maxResults'
    );
  },
});

// node_modules/@aws-sdk/core/httpAuthSchemes.js
var require_httpAuthSchemes2 = __commonJS({
  'node_modules/@aws-sdk/core/httpAuthSchemes.js'(exports, module2) {
    module2.exports = require_httpAuthSchemes();
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider3 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/auth/httpAuthSchemeProvider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveHttpAuthSchemeConfig =
      exports.defaultSSOOIDCHttpAuthSchemeProvider =
      exports.defaultSSOOIDCHttpAuthSchemeParametersProvider =
        void 0;
    var core_1 = require_dist_cjs29();
    var util_middleware_1 = require_dist_cjs6();
    var defaultSSOOIDCHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region:
          (await (0, util_middleware_1.normalizeProvider)(config.region)()) ||
          (() => {
            throw new Error('expected `region` to be configured for `aws.auth#sigv4`');
          })(),
      };
    };
    exports.defaultSSOOIDCHttpAuthSchemeParametersProvider = defaultSSOOIDCHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: 'aws.auth#sigv4',
        signingProperties: {
          name: 'sso-oauth',
          region: authParameters.region,
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context,
          },
        }),
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: 'smithy.api#noAuth',
      };
    }
    var defaultSSOOIDCHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case 'CreateToken': {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultSSOOIDCHttpAuthSchemeProvider = defaultSSOOIDCHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config) => {
      var _a;
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return Object.assign(config_0, {
        authSchemePreference: (0, util_middleware_1.normalizeProvider)(
          (_a = config.authSchemePreference) != null ? _a : []
        ),
      });
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  },
});

// node_modules/@aws-sdk/nested-clients/package.json
var require_package3 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/nested-clients',
      version: '3.883.0',
      description: 'Nested clients for AWS SDK packages.',
      main: './dist-cjs/index.js',
      module: './dist-es/index.js',
      types: './dist-types/index.d.ts',
      scripts: {
        build: "yarn lint && concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'node ../../scripts/compilation/inline nested-clients',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:include:deps': 'lerna run --scope $npm_package_name --include-dependencies build',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
        lint: 'node ../../scripts/validation/submodules-linter.js --pkg nested-clients',
        test: 'yarn g:vitest run',
        'test:watch': 'yarn g:vitest watch',
      },
      engines: {
        node: '>=18.0.0',
      },
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      dependencies: {
        '@aws-crypto/sha256-browser': '5.2.0',
        '@aws-crypto/sha256-js': '5.2.0',
        '@aws-sdk/core': '3.883.0',
        '@aws-sdk/middleware-host-header': '3.873.0',
        '@aws-sdk/middleware-logger': '3.876.0',
        '@aws-sdk/middleware-recursion-detection': '3.873.0',
        '@aws-sdk/middleware-user-agent': '3.883.0',
        '@aws-sdk/region-config-resolver': '3.873.0',
        '@aws-sdk/types': '3.862.0',
        '@aws-sdk/util-endpoints': '3.879.0',
        '@aws-sdk/util-user-agent-browser': '3.873.0',
        '@aws-sdk/util-user-agent-node': '3.883.0',
        '@smithy/config-resolver': '^4.1.5',
        '@smithy/core': '^3.9.2',
        '@smithy/fetch-http-handler': '^5.1.1',
        '@smithy/hash-node': '^4.0.5',
        '@smithy/invalid-dependency': '^4.0.5',
        '@smithy/middleware-content-length': '^4.0.5',
        '@smithy/middleware-endpoint': '^4.1.21',
        '@smithy/middleware-retry': '^4.1.22',
        '@smithy/middleware-serde': '^4.0.9',
        '@smithy/middleware-stack': '^4.0.5',
        '@smithy/node-config-provider': '^4.1.4',
        '@smithy/node-http-handler': '^4.1.1',
        '@smithy/protocol-http': '^5.1.3',
        '@smithy/smithy-client': '^4.5.2',
        '@smithy/types': '^4.3.2',
        '@smithy/url-parser': '^4.0.5',
        '@smithy/util-base64': '^4.0.0',
        '@smithy/util-body-length-browser': '^4.0.0',
        '@smithy/util-body-length-node': '^4.0.0',
        '@smithy/util-defaults-mode-browser': '^4.0.29',
        '@smithy/util-defaults-mode-node': '^4.0.29',
        '@smithy/util-endpoints': '^3.0.7',
        '@smithy/util-middleware': '^4.0.5',
        '@smithy/util-retry': '^4.0.7',
        '@smithy/util-utf8': '^4.0.0',
        tslib: '^2.6.2',
      },
      devDependencies: {
        concurrently: '7.0.0',
        'downlevel-dts': '0.10.1',
        rimraf: '3.0.2',
        typescript: '~5.8.3',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['./sso-oidc.d.ts', './sso-oidc.js', './sts.d.ts', './sts.js', 'dist-*/**'],
      browser: {
        './dist-es/submodules/sso-oidc/runtimeConfig': './dist-es/submodules/sso-oidc/runtimeConfig.browser',
        './dist-es/submodules/sts/runtimeConfig': './dist-es/submodules/sts/runtimeConfig.browser',
      },
      'react-native': {},
      homepage: 'https://github.com/aws/aws-sdk-js-v3/tree/main/packages/nested-clients',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'packages/nested-clients',
      },
      exports: {
        './sso-oidc': {
          types: './dist-types/submodules/sso-oidc/index.d.ts',
          module: './dist-es/submodules/sso-oidc/index.js',
          node: './dist-cjs/submodules/sso-oidc/index.js',
          import: './dist-es/submodules/sso-oidc/index.js',
          require: './dist-cjs/submodules/sso-oidc/index.js',
        },
        './sts': {
          types: './dist-types/submodules/sts/index.d.ts',
          module: './dist-es/submodules/sts/index.js',
          node: './dist-cjs/submodules/sts/index.js',
          import: './dist-es/submodules/sts/index.js',
          require: './dist-cjs/submodules/sts/index.js',
        },
      },
    };
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/endpoint/ruleset.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ruleSet = void 0;
    var u = 'required';
    var v = 'fn';
    var w = 'argv';
    var x = 'ref';
    var a = true;
    var b = 'isSet';
    var c = 'booleanEquals';
    var d = 'error';
    var e = 'endpoint';
    var f = 'tree';
    var g = 'PartitionResult';
    var h = 'getAttr';
    var i = { [u]: false, type: 'String' };
    var j = { [u]: true, default: false, type: 'Boolean' };
    var k = { [x]: 'Endpoint' };
    var l = { [v]: c, [w]: [{ [x]: 'UseFIPS' }, true] };
    var m = { [v]: c, [w]: [{ [x]: 'UseDualStack' }, true] };
    var n = {};
    var o = { [v]: h, [w]: [{ [x]: g }, 'supportsFIPS'] };
    var p = { [x]: g };
    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, 'supportsDualStack'] }] };
    var r = [l];
    var s = [m];
    var t = [{ [x]: 'Region' }];
    var _data = {
      version: '1.0',
      parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i },
      rules: [
        {
          conditions: [{ [v]: b, [w]: [k] }],
          rules: [
            { conditions: r, error: 'Invalid Configuration: FIPS and custom endpoint are not supported', type: d },
            { conditions: s, error: 'Invalid Configuration: Dualstack and custom endpoint are not supported', type: d },
            { endpoint: { url: k, properties: n, headers: n }, type: e },
          ],
          type: f,
        },
        {
          conditions: [{ [v]: b, [w]: t }],
          rules: [
            {
              conditions: [{ [v]: 'aws.partition', [w]: t, assign: g }],
              rules: [
                {
                  conditions: [l, m],
                  rules: [
                    {
                      conditions: [{ [v]: c, [w]: [a, o] }, q],
                      rules: [
                        {
                          endpoint: {
                            url: 'https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}',
                            properties: n,
                            headers: n,
                          },
                          type: e,
                        },
                      ],
                      type: f,
                    },
                    {
                      error: 'FIPS and DualStack are enabled, but this partition does not support one or both',
                      type: d,
                    },
                  ],
                  type: f,
                },
                {
                  conditions: r,
                  rules: [
                    {
                      conditions: [{ [v]: c, [w]: [o, a] }],
                      rules: [
                        {
                          conditions: [{ [v]: 'stringEquals', [w]: [{ [v]: h, [w]: [p, 'name'] }, 'aws-us-gov'] }],
                          endpoint: { url: 'https://oidc.{Region}.amazonaws.com', properties: n, headers: n },
                          type: e,
                        },
                        {
                          endpoint: {
                            url: 'https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}',
                            properties: n,
                            headers: n,
                          },
                          type: e,
                        },
                      ],
                      type: f,
                    },
                    { error: 'FIPS is enabled but this partition does not support FIPS', type: d },
                  ],
                  type: f,
                },
                {
                  conditions: s,
                  rules: [
                    {
                      conditions: [q],
                      rules: [
                        {
                          endpoint: {
                            url: 'https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}',
                            properties: n,
                            headers: n,
                          },
                          type: e,
                        },
                      ],
                      type: f,
                    },
                    { error: 'DualStack is enabled but this partition does not support DualStack', type: d },
                  ],
                  type: f,
                },
                {
                  endpoint: { url: 'https://oidc.{Region}.{PartitionResult#dnsSuffix}', properties: n, headers: n },
                  type: e,
                },
              ],
              type: f,
            },
          ],
          type: f,
        },
        { error: 'Invalid Configuration: Missing Region', type: d },
      ],
    };
    exports.ruleSet = _data;
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/endpoint/endpointResolver.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs22();
    var util_endpoints_2 = require_dist_cjs19();
    var ruleset_1 = require_ruleset2();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ['Endpoint', 'Region', 'UseDualStack', 'UseFIPS'],
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () =>
        (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
          endpointParams,
          logger: context.logger,
        })
      );
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/runtimeConfig.shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = require_dist_cjs29();
    var core_2 = require_dist_cjs18();
    var smithy_client_1 = require_dist_cjs27();
    var url_parser_1 = require_dist_cjs21();
    var util_base64_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs10();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider3();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
      return {
        apiVersion: '2019-06-10',
        base64Decoder: (_a = config == null ? void 0 : config.base64Decoder) != null ? _a : util_base64_1.fromBase64,
        base64Encoder: (_b = config == null ? void 0 : config.base64Encoder) != null ? _b : util_base64_1.toBase64,
        disableHostPrefix: (_c = config == null ? void 0 : config.disableHostPrefix) != null ? _c : false,
        endpointProvider:
          (_d = config == null ? void 0 : config.endpointProvider) != null
            ? _d
            : endpointResolver_1.defaultEndpointResolver,
        extensions: (_e = config == null ? void 0 : config.extensions) != null ? _e : [],
        httpAuthSchemeProvider:
          (_f = config == null ? void 0 : config.httpAuthSchemeProvider) != null
            ? _f
            : httpAuthSchemeProvider_1.defaultSSOOIDCHttpAuthSchemeProvider,
        httpAuthSchemes:
          (_g = config == null ? void 0 : config.httpAuthSchemes) != null
            ? _g
            : [
                {
                  schemeId: 'aws.auth#sigv4',
                  identityProvider: (ipc) => ipc.getIdentityProvider('aws.auth#sigv4'),
                  signer: new core_1.AwsSdkSigV4Signer(),
                },
                {
                  schemeId: 'smithy.api#noAuth',
                  identityProvider: (ipc) => ipc.getIdentityProvider('smithy.api#noAuth') || (async () => ({})),
                  signer: new core_2.NoAuthSigner(),
                },
              ],
        logger: (_h = config == null ? void 0 : config.logger) != null ? _h : new smithy_client_1.NoOpLogger(),
        serviceId: (_i = config == null ? void 0 : config.serviceId) != null ? _i : 'SSO OIDC',
        urlParser: (_j = config == null ? void 0 : config.urlParser) != null ? _j : url_parser_1.parseUrl,
        utf8Decoder: (_k = config == null ? void 0 : config.utf8Decoder) != null ? _k : util_utf8_1.fromUtf8,
        utf8Encoder: (_l = config == null ? void 0 : config.utf8Encoder) != null ? _l : util_utf8_1.toUtf8,
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var core_1 = require_dist_cjs29();
    var util_user_agent_node_1 = require_dist_cjs44();
    var config_resolver_1 = require_dist_cjs32();
    var hash_node_1 = require_dist_cjs45();
    var middleware_retry_1 = require_dist_cjs40();
    var node_config_provider_1 = require_dist_cjs36();
    var node_http_handler_1 = require_dist_cjs14();
    var util_body_length_node_1 = require_dist_cjs46();
    var util_retry_1 = require_dist_cjs39();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs27();
    var util_defaults_mode_node_1 = require_dist_cjs47();
    var smithy_client_2 = require_dist_cjs27();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      const loaderConfig = {
        profile: config == null ? void 0 : config.profile,
        logger: clientSharedValues.logger,
      };
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: 'node',
        defaultsMode,
        authSchemePreference:
          (_a = config == null ? void 0 : config.authSchemePreference) != null
            ? _a
            : (0, node_config_provider_1.loadConfig)(core_1.NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, loaderConfig),
        bodyLengthChecker:
          (_b = config == null ? void 0 : config.bodyLengthChecker) != null
            ? _b
            : util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider:
          (_c = config == null ? void 0 : config.defaultUserAgentProvider) != null
            ? _c
            : (0, util_user_agent_node_1.createDefaultUserAgentProvider)({
                serviceId: clientSharedValues.serviceId,
                clientVersion: package_json_1.default.version,
              }),
        maxAttempts:
          (_d = config == null ? void 0 : config.maxAttempts) != null
            ? _d
            : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
        region:
          (_e = config == null ? void 0 : config.region) != null
            ? _e
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
                __spreadValues(__spreadValues({}, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS), loaderConfig)
              ),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(
          (_f = config == null ? void 0 : config.requestHandler) != null ? _f : defaultConfigProvider
        ),
        retryMode:
          (_g = config == null ? void 0 : config.retryMode) != null
            ? _g
            : (0, node_config_provider_1.loadConfig)(
                __spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
                  default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE,
                }),
                config
              ),
        sha256: (_h = config == null ? void 0 : config.sha256) != null ? _h : hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (_i = config == null ? void 0 : config.streamCollector) != null ? _i : node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (_j = config == null ? void 0 : config.useDualstackEndpoint) != null
            ? _j
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,
                loaderConfig
              ),
        useFipsEndpoint:
          (_k = config == null ? void 0 : config.useFipsEndpoint) != null
            ? _k
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,
                loaderConfig
              ),
        userAgentAppId:
          (_l = config == null ? void 0 : config.userAgentAppId) != null
            ? _l
            : (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, loaderConfig),
      });
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/index.js
var require_sso_oidc = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sso-oidc/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      $Command: () => import_smithy_client6.Command,
      AccessDeniedException: () => AccessDeniedException,
      AuthorizationPendingException: () => AuthorizationPendingException,
      CreateTokenCommand: () => CreateTokenCommand,
      CreateTokenRequestFilterSensitiveLog: () => CreateTokenRequestFilterSensitiveLog,
      CreateTokenResponseFilterSensitiveLog: () => CreateTokenResponseFilterSensitiveLog,
      ExpiredTokenException: () => ExpiredTokenException,
      InternalServerException: () => InternalServerException,
      InvalidClientException: () => InvalidClientException,
      InvalidGrantException: () => InvalidGrantException,
      InvalidRequestException: () => InvalidRequestException,
      InvalidScopeException: () => InvalidScopeException,
      SSOOIDC: () => SSOOIDC,
      SSOOIDCClient: () => SSOOIDCClient,
      SSOOIDCServiceException: () => SSOOIDCServiceException,
      SlowDownException: () => SlowDownException,
      UnauthorizedClientException: () => UnauthorizedClientException,
      UnsupportedGrantTypeException: () => UnsupportedGrantTypeException,
      __Client: () => import_smithy_client2.Client,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_middleware_host_header = require_dist_cjs3();
    var import_middleware_logger = require_dist_cjs4();
    var import_middleware_recursion_detection = require_dist_cjs5();
    var import_middleware_user_agent = require_dist_cjs30();
    var import_config_resolver = require_dist_cjs32();
    var import_core2 = require_dist_cjs18();
    var import_middleware_content_length = require_dist_cjs34();
    var import_middleware_endpoint = require_dist_cjs37();
    var import_middleware_retry = require_dist_cjs40();
    var import_smithy_client2 = require_dist_cjs27();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider3();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      var _a16, _b;
      return Object.assign(options, {
        useDualstackEndpoint: (_a16 = options.useDualstackEndpoint) != null ? _a16 : false,
        useFipsEndpoint: (_b = options.useFipsEndpoint) != null ? _b : false,
        defaultSigningName: 'sso-oauth',
      });
    }, 'resolveClientEndpointParameters');
    var commonParams = {
      UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
      Endpoint: { type: 'builtInParams', name: 'endpoint' },
      Region: { type: 'builtInParams', name: 'region' },
      UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
    };
    var import_runtimeConfig = require_runtimeConfig2();
    var import_region_config_resolver = require_dist_cjs48();
    var import_protocol_http = require_dist_cjs2();
    var import_smithy_client = require_dist_cjs27();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        },
      };
    }, 'getHttpAuthExtensionConfiguration');
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
      };
    }, 'resolveHttpAuthRuntimeConfig');
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign(
        (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig),
        (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig),
        (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig),
        getHttpAuthExtensionConfiguration(runtimeConfig)
      );
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(
        runtimeConfig,
        (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
        (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        resolveHttpAuthRuntimeConfig(extensionConfiguration)
      );
    }, 'resolveRuntimeExtensions');
    var _a;
    var SSOOIDCClient =
      ((_a = class extends import_smithy_client2.Client {
        config;
        constructor(...[configuration]) {
          const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
          super(_config_0);
          this.initConfig = _config_0;
          const _config_1 = resolveClientEndpointParameters(_config_0);
          const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
          const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
          const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
          const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
          const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
          const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
          const _config_8 = resolveRuntimeExtensions(
            _config_7,
            (configuration == null ? void 0 : configuration.extensions) || []
          );
          this.config = _config_8;
          this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
          this.middlewareStack.use(
            (0, import_core2.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
              httpAuthSchemeParametersProvider:
                import_httpAuthSchemeProvider.defaultSSOOIDCHttpAuthSchemeParametersProvider,
              identityProviderConfigProvider: /* @__PURE__ */ __name(
                async (config) =>
                  new import_core2.DefaultIdentityProviderConfig({
                    'aws.auth#sigv4': config.credentials,
                  }),
                'identityProviderConfigProvider'
              ),
            })
          );
          this.middlewareStack.use((0, import_core2.getHttpSigningPlugin)(this.config));
        }
        destroy() {
          super.destroy();
        }
      }),
      (() => {
        __name(_a, 'SSOOIDCClient');
      })(),
      _a);
    var import_smithy_client7 = require_dist_cjs27();
    var import_middleware_endpoint2 = require_dist_cjs37();
    var import_middleware_serde = require_dist_cjs7();
    var import_smithy_client6 = require_dist_cjs27();
    var import_smithy_client4 = require_dist_cjs27();
    var import_smithy_client3 = require_dist_cjs27();
    var _a2;
    var SSOOIDCServiceException =
      ((_a2 = class extends import_smithy_client3.ServiceException {
        constructor(options) {
          super(options);
          Object.setPrototypeOf(this, _a2.prototype);
        }
      }),
      (() => {
        __name(_a2, 'SSOOIDCServiceException');
      })(),
      _a2);
    var _a3;
    var AccessDeniedException =
      ((_a3 = class extends SSOOIDCServiceException {
        name = 'AccessDeniedException';
        $fault = 'client';
        error;
        error_description;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'AccessDeniedException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a3.prototype);
          this.error = opts.error;
          this.error_description = opts.error_description;
        }
      }),
      (() => {
        __name(_a3, 'AccessDeniedException');
      })(),
      _a3);
    var _a4;
    var AuthorizationPendingException =
      ((_a4 = class extends SSOOIDCServiceException {
        name = 'AuthorizationPendingException';
        $fault = 'client';
        error;
        error_description;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'AuthorizationPendingException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a4.prototype);
          this.error = opts.error;
          this.error_description = opts.error_description;
        }
      }),
      (() => {
        __name(_a4, 'AuthorizationPendingException');
      })(),
      _a4);
    var CreateTokenRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues(
            __spreadValues(
              __spreadValues({}, obj),
              obj.clientSecret && { clientSecret: import_smithy_client4.SENSITIVE_STRING }
            ),
            obj.refreshToken && { refreshToken: import_smithy_client4.SENSITIVE_STRING }
          ),
          obj.codeVerifier && { codeVerifier: import_smithy_client4.SENSITIVE_STRING }
        ),
      'CreateTokenRequestFilterSensitiveLog'
    );
    var CreateTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues(
            __spreadValues(
              __spreadValues({}, obj),
              obj.accessToken && { accessToken: import_smithy_client4.SENSITIVE_STRING }
            ),
            obj.refreshToken && { refreshToken: import_smithy_client4.SENSITIVE_STRING }
          ),
          obj.idToken && { idToken: import_smithy_client4.SENSITIVE_STRING }
        ),
      'CreateTokenResponseFilterSensitiveLog'
    );
    var _a5;
    var ExpiredTokenException =
      ((_a5 = class extends SSOOIDCServiceException {
        name = 'ExpiredTokenException';
        $fault = 'client';
        error;
        error_description;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'ExpiredTokenException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a5.prototype);
          this.error = opts.error;
          this.error_description = opts.error_description;
        }
      }),
      (() => {
        __name(_a5, 'ExpiredTokenException');
      })(),
      _a5);
    var _a6;
    var InternalServerException =
      ((_a6 = class extends SSOOIDCServiceException {
        name = 'InternalServerException';
        $fault = 'server';
        error;
        error_description;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InternalServerException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a6.prototype);
          this.error = opts.error;
          this.error_description = opts.error_description;
        }
      }),
      (() => {
        __name(_a6, 'InternalServerException');
      })(),
      _a6);
    var _a7;
    var InvalidClientException =
      ((_a7 = class extends SSOOIDCServiceException {
        name = 'InvalidClientException';
        $fault = 'client';
        error;
        error_description;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidClientException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a7.prototype);
          this.error = opts.error;
          this.error_description = opts.error_description;
        }
      }),
      (() => {
        __name(_a7, 'InvalidClientException');
      })(),
      _a7);
    var _a8;
    var InvalidGrantException =
      ((_a8 = class extends SSOOIDCServiceException {
        name = 'InvalidGrantException';
        $fault = 'client';
        error;
        error_description;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidGrantException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a8.prototype);
          this.error = opts.error;
          this.error_description = opts.error_description;
        }
      }),
      (() => {
        __name(_a8, 'InvalidGrantException');
      })(),
      _a8);
    var _a9;
    var InvalidRequestException =
      ((_a9 = class extends SSOOIDCServiceException {
        name = 'InvalidRequestException';
        $fault = 'client';
        error;
        error_description;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidRequestException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a9.prototype);
          this.error = opts.error;
          this.error_description = opts.error_description;
        }
      }),
      (() => {
        __name(_a9, 'InvalidRequestException');
      })(),
      _a9);
    var _a10;
    var InvalidScopeException =
      ((_a10 = class extends SSOOIDCServiceException {
        name = 'InvalidScopeException';
        $fault = 'client';
        error;
        error_description;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidScopeException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a10.prototype);
          this.error = opts.error;
          this.error_description = opts.error_description;
        }
      }),
      (() => {
        __name(_a10, 'InvalidScopeException');
      })(),
      _a10);
    var _a11;
    var SlowDownException =
      ((_a11 = class extends SSOOIDCServiceException {
        name = 'SlowDownException';
        $fault = 'client';
        error;
        error_description;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'SlowDownException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a11.prototype);
          this.error = opts.error;
          this.error_description = opts.error_description;
        }
      }),
      (() => {
        __name(_a11, 'SlowDownException');
      })(),
      _a11);
    var _a12;
    var UnauthorizedClientException =
      ((_a12 = class extends SSOOIDCServiceException {
        name = 'UnauthorizedClientException';
        $fault = 'client';
        error;
        error_description;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'UnauthorizedClientException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a12.prototype);
          this.error = opts.error;
          this.error_description = opts.error_description;
        }
      }),
      (() => {
        __name(_a12, 'UnauthorizedClientException');
      })(),
      _a12);
    var _a13;
    var UnsupportedGrantTypeException =
      ((_a13 = class extends SSOOIDCServiceException {
        name = 'UnsupportedGrantTypeException';
        $fault = 'client';
        error;
        error_description;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'UnsupportedGrantTypeException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a13.prototype);
          this.error = opts.error;
          this.error_description = opts.error_description;
        }
      }),
      (() => {
        __name(_a13, 'UnsupportedGrantTypeException');
      })(),
      _a13);
    var import_core22 = require_dist_cjs29();
    var import_core3 = require_dist_cjs18();
    var import_smithy_client5 = require_dist_cjs27();
    var se_CreateTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/token');
      let body;
      body = JSON.stringify(
        (0, import_smithy_client5.take)(input, {
          clientId: [],
          clientSecret: [],
          code: [],
          codeVerifier: [],
          deviceCode: [],
          grantType: [],
          redirectUri: [],
          refreshToken: [],
          scope: /* @__PURE__ */ __name((_) => (0, import_smithy_client5._json)(_), 'scope'),
        })
      );
      b.m('POST').h(headers).b(body);
      return b.build();
    }, 'se_CreateTokenCommand');
    var de_CreateTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client5.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client5.expectNonNull)(
        (0, import_smithy_client5.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client5.take)(data, {
        accessToken: import_smithy_client5.expectString,
        expiresIn: import_smithy_client5.expectInt32,
        idToken: import_smithy_client5.expectString,
        refreshToken: import_smithy_client5.expectString,
        tokenType: import_smithy_client5.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_CreateTokenCommand');
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context),
      });
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case 'AccessDeniedException':
        case 'com.amazonaws.ssooidc#AccessDeniedException':
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case 'AuthorizationPendingException':
        case 'com.amazonaws.ssooidc#AuthorizationPendingException':
          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case 'ExpiredTokenException':
        case 'com.amazonaws.ssooidc#ExpiredTokenException':
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case 'InternalServerException':
        case 'com.amazonaws.ssooidc#InternalServerException':
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case 'InvalidClientException':
        case 'com.amazonaws.ssooidc#InvalidClientException':
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case 'InvalidGrantException':
        case 'com.amazonaws.ssooidc#InvalidGrantException':
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case 'InvalidRequestException':
        case 'com.amazonaws.ssooidc#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'InvalidScopeException':
        case 'com.amazonaws.ssooidc#InvalidScopeException':
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case 'SlowDownException':
        case 'com.amazonaws.ssooidc#SlowDownException':
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case 'UnauthorizedClientException':
        case 'com.amazonaws.ssooidc#UnauthorizedClientException':
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case 'UnsupportedGrantTypeException':
        case 'com.amazonaws.ssooidc#UnsupportedGrantTypeException':
          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    }, 'de_CommandError');
    var throwDefaultError = (0, import_smithy_client5.withBaseException)(SSOOIDCServiceException);
    var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString,
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_AccessDeniedExceptionRes');
    var de_AuthorizationPendingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString,
      });
      Object.assign(contents, doc);
      const exception = new AuthorizationPendingException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_AuthorizationPendingExceptionRes');
    var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString,
      });
      Object.assign(contents, doc);
      const exception = new ExpiredTokenException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_ExpiredTokenExceptionRes');
    var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InternalServerExceptionRes');
    var de_InvalidClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InvalidClientExceptionRes');
    var de_InvalidGrantExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InvalidGrantException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InvalidGrantExceptionRes');
    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InvalidRequestExceptionRes');
    var de_InvalidScopeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InvalidScopeException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InvalidScopeExceptionRes');
    var de_SlowDownExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString,
      });
      Object.assign(contents, doc);
      const exception = new SlowDownException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_SlowDownExceptionRes');
    var de_UnauthorizedClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString,
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedClientException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_UnauthorizedClientExceptionRes');
    var de_UnsupportedGrantTypeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client5.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client5.take)(data, {
        error: import_smithy_client5.expectString,
        error_description: import_smithy_client5.expectString,
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedGrantTypeException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client5.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_UnsupportedGrantTypeExceptionRes');
    var deserializeMetadata = /* @__PURE__ */ __name((output) => {
      var _a16, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId:
          (_b = (_a16 = output.headers['x-amzn-requestid']) != null ? _a16 : output.headers['x-amzn-request-id']) !=
          null
            ? _b
            : output.headers['x-amz-request-id'],
        extendedRequestId: output.headers['x-amz-id-2'],
        cfId: output.headers['x-amz-cf-id'],
      };
    }, 'deserializeMetadata');
    var _a14;
    var CreateTokenCommand =
      ((_a14 = class extends (
        import_smithy_client6.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSSSOOIDCService', 'CreateToken', {})
          .n('SSOOIDCClient', 'CreateTokenCommand')
          .f(CreateTokenRequestFilterSensitiveLog, CreateTokenResponseFilterSensitiveLog)
          .ser(se_CreateTokenCommand)
          .de(de_CreateTokenCommand)
          .build()
      ) {}),
      (() => {
        __name(_a14, 'CreateTokenCommand');
      })(),
      _a14);
    var commands = {
      CreateTokenCommand,
    };
    var _a15;
    var SSOOIDC =
      ((_a15 = class extends SSOOIDCClient {}),
      (() => {
        __name(_a15, 'SSOOIDC');
      })(),
      _a15);
    (0, import_smithy_client7.createAggregatedClient)(commands, SSOOIDC);
  },
});

// node_modules/@aws-sdk/nested-clients/sso-oidc.js
var require_sso_oidc2 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/sso-oidc.js'(exports, module2) {
    module2.exports = require_sso_oidc();
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (
      (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),
      __copyProps2(
        isNodeMode || !mod || !mod.__esModule
          ? __defProp2(target, 'default', { value: mod, enumerable: true })
          : target,
        mod
      )
    );
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      fromEnvSigningName: () => fromEnvSigningName,
      fromSso: () => fromSso,
      fromStatic: () => fromStatic,
      nodeProvider: () => nodeProvider,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_client = require_client2();
    var import_httpAuthSchemes = require_httpAuthSchemes2();
    var import_property_provider = require_dist_cjs23();
    var fromEnvSigningName = /* @__PURE__ */ __name(
      ({ logger: logger2, signingName } = {}) =>
        async () => {
          var _a;
          (_a = logger2 == null ? void 0 : logger2.debug) == null
            ? void 0
            : _a.call(logger2, '@aws-sdk/token-providers - fromEnvSigningName');
          if (!signingName) {
            throw new import_property_provider.TokenProviderError(
              "Please pass 'signingName' to compute environment variable key",
              { logger: logger2 }
            );
          }
          const bearerTokenKey = (0, import_httpAuthSchemes.getBearerTokenEnvKey)(signingName);
          if (!(bearerTokenKey in process.env)) {
            throw new import_property_provider.TokenProviderError(
              `Token not present in '${bearerTokenKey}' environment variable`,
              { logger: logger2 }
            );
          }
          const token = { token: process.env[bearerTokenKey] };
          (0, import_client.setTokenFeature)(token, 'BEARER_SERVICE_ENV_VARS', '3');
          return token;
        },
      'fromEnvSigningName'
    );
    var EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    var REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
    var getSsoOidcClient = /* @__PURE__ */ __name(async (ssoRegion, init = {}) => {
      var _a, _b, _c, _d, _e;
      const { SSOOIDCClient } = await Promise.resolve().then(() => __toESM2(require_sso_oidc2()));
      const ssoOidcClient = new SSOOIDCClient(
        Object.assign({}, (_a = init.clientConfig) != null ? _a : {}, {
          region: ssoRegion != null ? ssoRegion : (_b = init.clientConfig) == null ? void 0 : _b.region,
          logger:
            (_e = (_c = init.clientConfig) == null ? void 0 : _c.logger) != null
              ? _e
              : (_d = init.parentClientConfig) == null
              ? void 0
              : _d.logger,
        })
      );
      return ssoOidcClient;
    }, 'getSsoOidcClient');
    var getNewSsoOidcToken = /* @__PURE__ */ __name(async (ssoToken, ssoRegion, init = {}) => {
      const { CreateTokenCommand } = await Promise.resolve().then(() => __toESM2(require_sso_oidc2()));
      const ssoOidcClient = await getSsoOidcClient(ssoRegion, init);
      return ssoOidcClient.send(
        new CreateTokenCommand({
          clientId: ssoToken.clientId,
          clientSecret: ssoToken.clientSecret,
          refreshToken: ssoToken.refreshToken,
          grantType: 'refresh_token',
        })
      );
    }, 'getNewSsoOidcToken');
    var validateTokenExpiry = /* @__PURE__ */ __name((token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new import_property_provider.TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);
      }
    }, 'validateTokenExpiry');
    var validateTokenKey = /* @__PURE__ */ __name((key, value, forRefresh = false) => {
      if (typeof value === 'undefined') {
        throw new import_property_provider.TokenProviderError(
          `Value not present for '${key}' in SSO Token${forRefresh ? '. Cannot refresh' : ''}. ${REFRESH_MESSAGE}`,
          false
        );
      }
    }, 'validateTokenKey');
    var import_shared_ini_file_loader = require_dist_cjs35();
    var import_fs = require('fs');
    var { writeFile } = import_fs.promises;
    var writeSSOTokenToFile = /* @__PURE__ */ __name((id, ssoToken) => {
      const tokenFilepath = (0, import_shared_ini_file_loader.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    }, 'writeSSOTokenToFile');
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso = /* @__PURE__ */ __name(
      (_init = {}) =>
        async ({ callerClientConfig } = {}) => {
          var _a, _b;
          const init = __spreadProps(__spreadValues({}, _init), {
            parentClientConfig: __spreadValues(__spreadValues({}, callerClientConfig), _init.parentClientConfig),
          });
          (_a = init.logger) == null ? void 0 : _a.debug('@aws-sdk/token-providers - fromSso');
          const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
          const profileName = (0, import_shared_ini_file_loader.getProfileName)({
            profile:
              (_b = init.profile) != null ? _b : callerClientConfig == null ? void 0 : callerClientConfig.profile,
          });
          const profile = profiles[profileName];
          if (!profile) {
            throw new import_property_provider.TokenProviderError(
              `Profile '${profileName}' could not be found in shared credentials file.`,
              false
            );
          } else if (!profile['sso_session']) {
            throw new import_property_provider.TokenProviderError(
              `Profile '${profileName}' is missing required property 'sso_session'.`
            );
          }
          const ssoSessionName = profile['sso_session'];
          const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
          const ssoSession = ssoSessions[ssoSessionName];
          if (!ssoSession) {
            throw new import_property_provider.TokenProviderError(
              `Sso session '${ssoSessionName}' could not be found in shared credentials file.`,
              false
            );
          }
          for (const ssoSessionRequiredKey of ['sso_start_url', 'sso_region']) {
            if (!ssoSession[ssoSessionRequiredKey]) {
              throw new import_property_provider.TokenProviderError(
                `Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`,
                false
              );
            }
          }
          const ssoStartUrl = ssoSession['sso_start_url'];
          const ssoRegion = ssoSession['sso_region'];
          let ssoToken;
          try {
            ssoToken = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoSessionName);
          } catch (e) {
            throw new import_property_provider.TokenProviderError(
              `The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`,
              false
            );
          }
          validateTokenKey('accessToken', ssoToken.accessToken);
          validateTokenKey('expiresAt', ssoToken.expiresAt);
          const { accessToken, expiresAt } = ssoToken;
          const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
          if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {
            return existingToken;
          }
          if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
            validateTokenExpiry(existingToken);
            return existingToken;
          }
          validateTokenKey('clientId', ssoToken.clientId, true);
          validateTokenKey('clientSecret', ssoToken.clientSecret, true);
          validateTokenKey('refreshToken', ssoToken.refreshToken, true);
          try {
            lastRefreshAttemptTime.setTime(Date.now());
            const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion, init);
            validateTokenKey('accessToken', newSsoOidcToken.accessToken);
            validateTokenKey('expiresIn', newSsoOidcToken.expiresIn);
            const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
            try {
              await writeSSOTokenToFile(
                ssoSessionName,
                __spreadProps(__spreadValues({}, ssoToken), {
                  accessToken: newSsoOidcToken.accessToken,
                  expiresAt: newTokenExpiration.toISOString(),
                  refreshToken: newSsoOidcToken.refreshToken,
                })
              );
            } catch (error) {}
            return {
              token: newSsoOidcToken.accessToken,
              expiration: newTokenExpiration,
            };
          } catch (error) {
            validateTokenExpiry(existingToken);
            return existingToken;
          }
        },
      'fromSso'
    );
    var fromStatic = /* @__PURE__ */ __name(
      ({ token, logger: logger2 }) =>
        async () => {
          logger2 == null ? void 0 : logger2.debug('@aws-sdk/token-providers - fromStatic');
          if (!token || !token.token) {
            throw new import_property_provider.TokenProviderError(`Please pass a valid token to fromStatic`, false);
          }
          return token;
        },
      'fromStatic'
    );
    var nodeProvider = /* @__PURE__ */ __name(
      (init = {}) =>
        (0, import_property_provider.memoize)(
          (0, import_property_provider.chain)(fromSso(init), async () => {
            throw new import_property_provider.TokenProviderError('Could not load token from any providers', false);
          }),
          (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5,
          (token) => token.expiration !== void 0
        ),
      'nodeProvider'
    );
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __esm = (fn, res) =>
      function __init() {
        return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])((fn = 0))), res;
      };
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var loadSso_exports = {};
    __export(loadSso_exports, {
      GetRoleCredentialsCommand: () => import_client_sso.GetRoleCredentialsCommand,
      SSOClient: () => import_client_sso.SSOClient,
    });
    var import_client_sso;
    var init_loadSso = __esm({
      'src/loadSso.ts'() {
        'use strict';
        import_client_sso = require_dist_cjs49();
      },
    });
    var index_exports = {};
    __export(index_exports, {
      fromSSO: () => fromSSO,
      isSsoProfile: () => isSsoProfile,
      validateSsoProfile: () => validateSsoProfile,
    });
    module2.exports = __toCommonJS(index_exports);
    var isSsoProfile = /* @__PURE__ */ __name(
      (arg) =>
        arg &&
        (typeof arg.sso_start_url === 'string' ||
          typeof arg.sso_account_id === 'string' ||
          typeof arg.sso_session === 'string' ||
          typeof arg.sso_region === 'string' ||
          typeof arg.sso_role_name === 'string'),
      'isSsoProfile'
    );
    var import_client = require_client2();
    var import_token_providers = require_dist_cjs50();
    var import_property_provider = require_dist_cjs23();
    var import_shared_ini_file_loader = require_dist_cjs35();
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = /* @__PURE__ */ __name(
      async ({
        ssoStartUrl,
        ssoSession,
        ssoAccountId,
        ssoRegion,
        ssoRoleName,
        ssoClient,
        clientConfig,
        parentClientConfig,
        profile,
        logger: logger2,
      }) => {
        var _a, _b;
        let token;
        const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
        if (ssoSession) {
          try {
            const _token = await (0, import_token_providers.fromSso)({ profile })();
            token = {
              accessToken: _token.token,
              expiresAt: new Date(_token.expiration).toISOString(),
            };
          } catch (e) {
            throw new import_property_provider.CredentialsProviderError(e.message, {
              tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
              logger: logger2,
            });
          }
        } else {
          try {
            token = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoStartUrl);
          } catch (e) {
            throw new import_property_provider.CredentialsProviderError(
              `The SSO session associated with this profile is invalid. ${refreshMessage}`,
              {
                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
                logger: logger2,
              }
            );
          }
        }
        if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
          throw new import_property_provider.CredentialsProviderError(
            `The SSO session associated with this profile has expired. ${refreshMessage}`,
            {
              tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
              logger: logger2,
            }
          );
        }
        const { accessToken } = token;
        const { SSOClient: SSOClient2, GetRoleCredentialsCommand: GetRoleCredentialsCommand2 } =
          await Promise.resolve().then(() => (init_loadSso(), loadSso_exports));
        const sso =
          ssoClient ||
          new SSOClient2(
            Object.assign({}, clientConfig != null ? clientConfig : {}, {
              logger:
                (_a = clientConfig == null ? void 0 : clientConfig.logger) != null
                  ? _a
                  : parentClientConfig == null
                  ? void 0
                  : parentClientConfig.logger,
              region: (_b = clientConfig == null ? void 0 : clientConfig.region) != null ? _b : ssoRegion,
            })
          );
        let ssoResp;
        try {
          ssoResp = await sso.send(
            new GetRoleCredentialsCommand2({
              accountId: ssoAccountId,
              roleName: ssoRoleName,
              accessToken,
            })
          );
        } catch (e) {
          throw new import_property_provider.CredentialsProviderError(e, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger: logger2,
          });
        }
        const {
          roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {},
        } = ssoResp;
        if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
          throw new import_property_provider.CredentialsProviderError('SSO returns an invalid temporary credential.', {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger: logger2,
          });
        }
        const credentials = __spreadValues(
          __spreadValues(
            {
              accessKeyId,
              secretAccessKey,
              sessionToken,
              expiration: new Date(expiration),
            },
            credentialScope && { credentialScope }
          ),
          accountId && { accountId }
        );
        if (ssoSession) {
          (0, import_client.setCredentialFeature)(credentials, 'CREDENTIALS_SSO', 's');
        } else {
          (0, import_client.setCredentialFeature)(credentials, 'CREDENTIALS_SSO_LEGACY', 'u');
        }
        return credentials;
      },
      'resolveSSOCredentials'
    );
    var validateSsoProfile = /* @__PURE__ */ __name((profile, logger2) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new import_property_provider.CredentialsProviderError(
          `Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(
            profile
          ).join(', ')}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,
          { tryNextLink: false, logger: logger2 }
        );
      }
      return profile;
    }, 'validateSsoProfile');
    var fromSSO = /* @__PURE__ */ __name(
      (init = {}) =>
        async ({ callerClientConfig } = {}) => {
          var _a, _b;
          (_a = init.logger) == null ? void 0 : _a.debug('@aws-sdk/credential-provider-sso - fromSSO');
          const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
          const { ssoClient } = init;
          const profileName = (0, import_shared_ini_file_loader.getProfileName)({
            profile:
              (_b = init.profile) != null ? _b : callerClientConfig == null ? void 0 : callerClientConfig.profile,
          });
          if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
            const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
            const profile = profiles[profileName];
            if (!profile) {
              throw new import_property_provider.CredentialsProviderError(`Profile ${profileName} was not found.`, {
                logger: init.logger,
              });
            }
            if (!isSsoProfile(profile)) {
              throw new import_property_provider.CredentialsProviderError(
                `Profile ${profileName} is not configured with SSO credentials.`,
                {
                  logger: init.logger,
                }
              );
            }
            if (profile == null ? void 0 : profile.sso_session) {
              const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
              const session = ssoSessions[profile.sso_session];
              const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
              if (ssoRegion && ssoRegion !== session.sso_region) {
                throw new import_property_provider.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {
                  tryNextLink: false,
                  logger: init.logger,
                });
              }
              if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
                throw new import_property_provider.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {
                  tryNextLink: false,
                  logger: init.logger,
                });
              }
              profile.sso_region = session.sso_region;
              profile.sso_start_url = session.sso_start_url;
            }
            const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(
              profile,
              init.logger
            );
            return resolveSSOCredentials({
              ssoStartUrl: sso_start_url,
              ssoSession: sso_session,
              ssoAccountId: sso_account_id,
              ssoRegion: sso_region,
              ssoRoleName: sso_role_name,
              ssoClient,
              clientConfig: init.clientConfig,
              parentClientConfig: init.parentClientConfig,
              profile: profileName,
            });
          } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
            throw new import_property_provider.CredentialsProviderError(
              'Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',
              { tryNextLink: false, logger: init.logger }
            );
          } else {
            return resolveSSOCredentials({
              ssoStartUrl,
              ssoSession,
              ssoAccountId,
              ssoRegion,
              ssoRoleName,
              ssoClient,
              clientConfig: init.clientConfig,
              parentClientConfig: init.parentClientConfig,
              profile: profileName,
            });
          }
        },
      'fromSSO'
    );
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider4 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/auth/httpAuthSchemeProvider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveHttpAuthSchemeConfig =
      exports.resolveStsAuthConfig =
      exports.defaultSTSHttpAuthSchemeProvider =
      exports.defaultSTSHttpAuthSchemeParametersProvider =
        void 0;
    var core_1 = require_dist_cjs29();
    var util_middleware_1 = require_dist_cjs6();
    var STSClient_1 = require_STSClient();
    var defaultSTSHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region:
          (await (0, util_middleware_1.normalizeProvider)(config.region)()) ||
          (() => {
            throw new Error('expected `region` to be configured for `aws.auth#sigv4`');
          })(),
      };
    };
    exports.defaultSTSHttpAuthSchemeParametersProvider = defaultSTSHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: 'aws.auth#sigv4',
        signingProperties: {
          name: 'sts',
          region: authParameters.region,
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context,
          },
        }),
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: 'smithy.api#noAuth',
      };
    }
    var defaultSTSHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case 'AssumeRoleWithWebIdentity': {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultSTSHttpAuthSchemeProvider = defaultSTSHttpAuthSchemeProvider;
    var resolveStsAuthConfig = (input) =>
      Object.assign(input, {
        stsClientCtor: STSClient_1.STSClient,
      });
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
    var resolveHttpAuthSchemeConfig = (config) => {
      var _a;
      const config_0 = (0, exports.resolveStsAuthConfig)(config);
      const config_1 = (0, core_1.resolveAwsSdkSigV4Config)(config_0);
      return Object.assign(config_1, {
        authSchemePreference: (0, util_middleware_1.normalizeProvider)(
          (_a = config.authSchemePreference) != null ? _a : []
        ),
      });
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/endpoint/EndpointParameters.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.commonParams = exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      var _a, _b, _c;
      return Object.assign(options, {
        useDualstackEndpoint: (_a = options.useDualstackEndpoint) != null ? _a : false,
        useFipsEndpoint: (_b = options.useFipsEndpoint) != null ? _b : false,
        useGlobalEndpoint: (_c = options.useGlobalEndpoint) != null ? _c : false,
        defaultSigningName: 'sts',
      });
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
    exports.commonParams = {
      UseGlobalEndpoint: { type: 'builtInParams', name: 'useGlobalEndpoint' },
      UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
      Endpoint: { type: 'builtInParams', name: 'endpoint' },
      Region: { type: 'builtInParams', name: 'region' },
      UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
    };
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/endpoint/ruleset.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ruleSet = void 0;
    var F = 'required';
    var G = 'type';
    var H = 'fn';
    var I = 'argv';
    var J = 'ref';
    var a = false;
    var b = true;
    var c = 'booleanEquals';
    var d = 'stringEquals';
    var e = 'sigv4';
    var f = 'sts';
    var g = 'us-east-1';
    var h = 'endpoint';
    var i = 'https://sts.{Region}.{PartitionResult#dnsSuffix}';
    var j = 'tree';
    var k = 'error';
    var l = 'getAttr';
    var m = { [F]: false, [G]: 'String' };
    var n = { [F]: true, default: false, [G]: 'Boolean' };
    var o = { [J]: 'Endpoint' };
    var p = { [H]: 'isSet', [I]: [{ [J]: 'Region' }] };
    var q = { [J]: 'Region' };
    var r = { [H]: 'aws.partition', [I]: [q], assign: 'PartitionResult' };
    var s = { [J]: 'UseFIPS' };
    var t = { [J]: 'UseDualStack' };
    var u = {
      url: 'https://sts.amazonaws.com',
      properties: { authSchemes: [{ name: e, signingName: f, signingRegion: g }] },
      headers: {},
    };
    var v = {};
    var w = { conditions: [{ [H]: d, [I]: [q, 'aws-global'] }], [h]: u, [G]: h };
    var x = { [H]: c, [I]: [s, true] };
    var y = { [H]: c, [I]: [t, true] };
    var z = { [H]: l, [I]: [{ [J]: 'PartitionResult' }, 'supportsFIPS'] };
    var A = { [J]: 'PartitionResult' };
    var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, 'supportsDualStack'] }] };
    var C = [{ [H]: 'isSet', [I]: [o] }];
    var D = [x];
    var E = [y];
    var _data = {
      version: '1.0',
      parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n },
      rules: [
        {
          conditions: [
            { [H]: c, [I]: [{ [J]: 'UseGlobalEndpoint' }, b] },
            { [H]: 'not', [I]: C },
            p,
            r,
            { [H]: c, [I]: [s, a] },
            { [H]: c, [I]: [t, a] },
          ],
          rules: [
            { conditions: [{ [H]: d, [I]: [q, 'ap-northeast-1'] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, 'ap-south-1'] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, 'ap-southeast-1'] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, 'ap-southeast-2'] }], endpoint: u, [G]: h },
            w,
            { conditions: [{ [H]: d, [I]: [q, 'ca-central-1'] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, 'eu-central-1'] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, 'eu-north-1'] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, 'eu-west-1'] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, 'eu-west-2'] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, 'eu-west-3'] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, 'sa-east-1'] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, g] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, 'us-east-2'] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, 'us-west-1'] }], endpoint: u, [G]: h },
            { conditions: [{ [H]: d, [I]: [q, 'us-west-2'] }], endpoint: u, [G]: h },
            {
              endpoint: {
                url: i,
                properties: { authSchemes: [{ name: e, signingName: f, signingRegion: '{Region}' }] },
                headers: v,
              },
              [G]: h,
            },
          ],
          [G]: j,
        },
        {
          conditions: C,
          rules: [
            { conditions: D, error: 'Invalid Configuration: FIPS and custom endpoint are not supported', [G]: k },
            { conditions: E, error: 'Invalid Configuration: Dualstack and custom endpoint are not supported', [G]: k },
            { endpoint: { url: o, properties: v, headers: v }, [G]: h },
          ],
          [G]: j,
        },
        {
          conditions: [p],
          rules: [
            {
              conditions: [r],
              rules: [
                {
                  conditions: [x, y],
                  rules: [
                    {
                      conditions: [{ [H]: c, [I]: [b, z] }, B],
                      rules: [
                        {
                          endpoint: {
                            url: 'https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}',
                            properties: v,
                            headers: v,
                          },
                          [G]: h,
                        },
                      ],
                      [G]: j,
                    },
                    {
                      error: 'FIPS and DualStack are enabled, but this partition does not support one or both',
                      [G]: k,
                    },
                  ],
                  [G]: j,
                },
                {
                  conditions: D,
                  rules: [
                    {
                      conditions: [{ [H]: c, [I]: [z, b] }],
                      rules: [
                        {
                          conditions: [{ [H]: d, [I]: [{ [H]: l, [I]: [A, 'name'] }, 'aws-us-gov'] }],
                          endpoint: { url: 'https://sts.{Region}.amazonaws.com', properties: v, headers: v },
                          [G]: h,
                        },
                        {
                          endpoint: {
                            url: 'https://sts-fips.{Region}.{PartitionResult#dnsSuffix}',
                            properties: v,
                            headers: v,
                          },
                          [G]: h,
                        },
                      ],
                      [G]: j,
                    },
                    { error: 'FIPS is enabled but this partition does not support FIPS', [G]: k },
                  ],
                  [G]: j,
                },
                {
                  conditions: E,
                  rules: [
                    {
                      conditions: [B],
                      rules: [
                        {
                          endpoint: {
                            url: 'https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}',
                            properties: v,
                            headers: v,
                          },
                          [G]: h,
                        },
                      ],
                      [G]: j,
                    },
                    { error: 'DualStack is enabled but this partition does not support DualStack', [G]: k },
                  ],
                  [G]: j,
                },
                w,
                { endpoint: { url: i, properties: v, headers: v }, [G]: h },
              ],
              [G]: j,
            },
          ],
          [G]: j,
        },
        { error: 'Invalid Configuration: Missing Region', [G]: k },
      ],
    };
    exports.ruleSet = _data;
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/endpoint/endpointResolver.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs22();
    var util_endpoints_2 = require_dist_cjs19();
    var ruleset_1 = require_ruleset3();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ['Endpoint', 'Region', 'UseDualStack', 'UseFIPS', 'UseGlobalEndpoint'],
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () =>
        (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
          endpointParams,
          logger: context.logger,
        })
      );
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/runtimeConfig.shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = require_dist_cjs29();
    var core_2 = require_dist_cjs18();
    var smithy_client_1 = require_dist_cjs27();
    var url_parser_1 = require_dist_cjs21();
    var util_base64_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs10();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider4();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
      return {
        apiVersion: '2011-06-15',
        base64Decoder: (_a = config == null ? void 0 : config.base64Decoder) != null ? _a : util_base64_1.fromBase64,
        base64Encoder: (_b = config == null ? void 0 : config.base64Encoder) != null ? _b : util_base64_1.toBase64,
        disableHostPrefix: (_c = config == null ? void 0 : config.disableHostPrefix) != null ? _c : false,
        endpointProvider:
          (_d = config == null ? void 0 : config.endpointProvider) != null
            ? _d
            : endpointResolver_1.defaultEndpointResolver,
        extensions: (_e = config == null ? void 0 : config.extensions) != null ? _e : [],
        httpAuthSchemeProvider:
          (_f = config == null ? void 0 : config.httpAuthSchemeProvider) != null
            ? _f
            : httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeProvider,
        httpAuthSchemes:
          (_g = config == null ? void 0 : config.httpAuthSchemes) != null
            ? _g
            : [
                {
                  schemeId: 'aws.auth#sigv4',
                  identityProvider: (ipc) => ipc.getIdentityProvider('aws.auth#sigv4'),
                  signer: new core_1.AwsSdkSigV4Signer(),
                },
                {
                  schemeId: 'smithy.api#noAuth',
                  identityProvider: (ipc) => ipc.getIdentityProvider('smithy.api#noAuth') || (async () => ({})),
                  signer: new core_2.NoAuthSigner(),
                },
              ],
        logger: (_h = config == null ? void 0 : config.logger) != null ? _h : new smithy_client_1.NoOpLogger(),
        serviceId: (_i = config == null ? void 0 : config.serviceId) != null ? _i : 'STS',
        urlParser: (_j = config == null ? void 0 : config.urlParser) != null ? _j : url_parser_1.parseUrl,
        utf8Decoder: (_k = config == null ? void 0 : config.utf8Decoder) != null ? _k : util_utf8_1.fromUtf8,
        utf8Encoder: (_l = config == null ? void 0 : config.utf8Encoder) != null ? _l : util_utf8_1.toUtf8,
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var core_1 = require_dist_cjs29();
    var util_user_agent_node_1 = require_dist_cjs44();
    var config_resolver_1 = require_dist_cjs32();
    var core_2 = require_dist_cjs18();
    var hash_node_1 = require_dist_cjs45();
    var middleware_retry_1 = require_dist_cjs40();
    var node_config_provider_1 = require_dist_cjs36();
    var node_http_handler_1 = require_dist_cjs14();
    var util_body_length_node_1 = require_dist_cjs46();
    var util_retry_1 = require_dist_cjs39();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs27();
    var util_defaults_mode_node_1 = require_dist_cjs47();
    var smithy_client_2 = require_dist_cjs27();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      const loaderConfig = {
        profile: config == null ? void 0 : config.profile,
        logger: clientSharedValues.logger,
      };
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: 'node',
        defaultsMode,
        authSchemePreference:
          (_a = config == null ? void 0 : config.authSchemePreference) != null
            ? _a
            : (0, node_config_provider_1.loadConfig)(core_1.NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, loaderConfig),
        bodyLengthChecker:
          (_b = config == null ? void 0 : config.bodyLengthChecker) != null
            ? _b
            : util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider:
          (_c = config == null ? void 0 : config.defaultUserAgentProvider) != null
            ? _c
            : (0, util_user_agent_node_1.createDefaultUserAgentProvider)({
                serviceId: clientSharedValues.serviceId,
                clientVersion: package_json_1.default.version,
              }),
        httpAuthSchemes:
          (_d = config == null ? void 0 : config.httpAuthSchemes) != null
            ? _d
            : [
                {
                  schemeId: 'aws.auth#sigv4',
                  identityProvider: (ipc) =>
                    ipc.getIdentityProvider('aws.auth#sigv4') ||
                    (async (idProps) =>
                      await config.credentialDefaultProvider((idProps == null ? void 0 : idProps.__config) || {})()),
                  signer: new core_1.AwsSdkSigV4Signer(),
                },
                {
                  schemeId: 'smithy.api#noAuth',
                  identityProvider: (ipc) => ipc.getIdentityProvider('smithy.api#noAuth') || (async () => ({})),
                  signer: new core_2.NoAuthSigner(),
                },
              ],
        maxAttempts:
          (_e = config == null ? void 0 : config.maxAttempts) != null
            ? _e
            : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
        region:
          (_f = config == null ? void 0 : config.region) != null
            ? _f
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
                __spreadValues(__spreadValues({}, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS), loaderConfig)
              ),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(
          (_g = config == null ? void 0 : config.requestHandler) != null ? _g : defaultConfigProvider
        ),
        retryMode:
          (_h = config == null ? void 0 : config.retryMode) != null
            ? _h
            : (0, node_config_provider_1.loadConfig)(
                __spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
                  default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE,
                }),
                config
              ),
        sha256: (_i = config == null ? void 0 : config.sha256) != null ? _i : hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (_j = config == null ? void 0 : config.streamCollector) != null ? _j : node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (_k = config == null ? void 0 : config.useDualstackEndpoint) != null
            ? _k
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,
                loaderConfig
              ),
        useFipsEndpoint:
          (_l = config == null ? void 0 : config.useFipsEndpoint) != null
            ? _l
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,
                loaderConfig
              ),
        userAgentAppId:
          (_m = config == null ? void 0 : config.userAgentAppId) != null
            ? _m
            : (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, loaderConfig),
      });
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/auth/httpAuthExtensionConfiguration.js
var require_httpAuthExtensionConfiguration = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/auth/httpAuthExtensionConfiguration.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveHttpAuthRuntimeConfig = exports.getHttpAuthExtensionConfiguration = void 0;
    var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        },
      };
    };
    exports.getHttpAuthExtensionConfiguration = getHttpAuthExtensionConfiguration;
    var resolveHttpAuthRuntimeConfig = (config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
      };
    };
    exports.resolveHttpAuthRuntimeConfig = resolveHttpAuthRuntimeConfig;
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/runtimeExtensions.js
var require_runtimeExtensions = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/runtimeExtensions.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveRuntimeExtensions = void 0;
    var region_config_resolver_1 = require_dist_cjs48();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs27();
    var httpAuthExtensionConfiguration_1 = require_httpAuthExtensionConfiguration();
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign(
        (0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig),
        (0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig),
        (0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig),
        (0, httpAuthExtensionConfiguration_1.getHttpAuthExtensionConfiguration)(runtimeConfig)
      );
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(
        runtimeConfig,
        (0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        (0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration),
        (0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        (0, httpAuthExtensionConfiguration_1.resolveHttpAuthRuntimeConfig)(extensionConfiguration)
      );
    };
    exports.resolveRuntimeExtensions = resolveRuntimeExtensions;
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/STSClient.js
var require_STSClient = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/STSClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STSClient = exports.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs3();
    var middleware_logger_1 = require_dist_cjs4();
    var middleware_recursion_detection_1 = require_dist_cjs5();
    var middleware_user_agent_1 = require_dist_cjs30();
    var config_resolver_1 = require_dist_cjs32();
    var core_1 = require_dist_cjs18();
    var middleware_content_length_1 = require_dist_cjs34();
    var middleware_endpoint_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs40();
    var smithy_client_1 = require_dist_cjs27();
    Object.defineProperty(exports, '__Client', {
      enumerable: true,
      get: function () {
        return smithy_client_1.Client;
      },
    });
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider4();
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig3();
    var runtimeExtensions_1 = require_runtimeExtensions();
    var STSClient = class extends smithy_client_1.Client {
      config;
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, config_resolver_1.resolveRegionConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, httpAuthSchemeProvider_1.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(
          _config_7,
          (configuration == null ? void 0 : configuration.extensions) || []
        );
        this.config = _config_8;
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, core_1.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) =>
              new core_1.DefaultIdentityProviderConfig({
                'aws.auth#sigv4': config.credentials,
              }),
          })
        );
        this.middlewareStack.use((0, core_1.getHttpSigningPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.STSClient = STSClient;
  },
});

// node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/index.js
var require_sts = __commonJS({
  'node_modules/@aws-sdk/nested-clients/dist-cjs/submodules/sts/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (
      __copyProps2(target, mod, 'default'), secondTarget && __copyProps2(secondTarget, mod, 'default')
    );
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      AssumeRoleCommand: () => AssumeRoleCommand,
      AssumeRoleResponseFilterSensitiveLog: () => AssumeRoleResponseFilterSensitiveLog,
      AssumeRoleWithWebIdentityCommand: () => AssumeRoleWithWebIdentityCommand,
      AssumeRoleWithWebIdentityRequestFilterSensitiveLog: () => AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
      AssumeRoleWithWebIdentityResponseFilterSensitiveLog: () => AssumeRoleWithWebIdentityResponseFilterSensitiveLog,
      ClientInputEndpointParameters: () => import_EndpointParameters3.ClientInputEndpointParameters,
      CredentialsFilterSensitiveLog: () => CredentialsFilterSensitiveLog,
      ExpiredTokenException: () => ExpiredTokenException,
      IDPCommunicationErrorException: () => IDPCommunicationErrorException,
      IDPRejectedClaimException: () => IDPRejectedClaimException,
      InvalidIdentityTokenException: () => InvalidIdentityTokenException,
      MalformedPolicyDocumentException: () => MalformedPolicyDocumentException,
      PackedPolicyTooLargeException: () => PackedPolicyTooLargeException,
      RegionDisabledException: () => RegionDisabledException,
      STS: () => STS,
      STSServiceException: () => STSServiceException,
      decorateDefaultCredentialProvider: () => decorateDefaultCredentialProvider,
      getDefaultRoleAssumer: () => getDefaultRoleAssumer2,
      getDefaultRoleAssumerWithWebIdentity: () => getDefaultRoleAssumerWithWebIdentity2,
    });
    module2.exports = __toCommonJS(index_exports);
    __reExport(index_exports, require_STSClient(), module2.exports);
    var import_smithy_client6 = require_dist_cjs27();
    var import_middleware_endpoint = require_dist_cjs37();
    var import_middleware_serde = require_dist_cjs7();
    var import_smithy_client4 = require_dist_cjs27();
    var import_EndpointParameters = require_EndpointParameters();
    var import_smithy_client2 = require_dist_cjs27();
    var import_smithy_client = require_dist_cjs27();
    var _a2;
    var STSServiceException =
      ((_a2 = class extends import_smithy_client.ServiceException {
        constructor(options) {
          super(options);
          Object.setPrototypeOf(this, _a2.prototype);
        }
      }),
      (() => {
        __name(_a2, 'STSServiceException');
      })(),
      _a2);
    var CredentialsFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.SecretAccessKey && { SecretAccessKey: import_smithy_client2.SENSITIVE_STRING }
        ),
      'CredentialsFilterSensitiveLog'
    );
    var AssumeRoleResponseFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
        ),
      'AssumeRoleResponseFilterSensitiveLog'
    );
    var _a3;
    var ExpiredTokenException =
      ((_a3 = class extends STSServiceException {
        name = 'ExpiredTokenException';
        $fault = 'client';
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'ExpiredTokenException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a3.prototype);
        }
      }),
      (() => {
        __name(_a3, 'ExpiredTokenException');
      })(),
      _a3);
    var _a4;
    var MalformedPolicyDocumentException =
      ((_a4 = class extends STSServiceException {
        name = 'MalformedPolicyDocumentException';
        $fault = 'client';
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'MalformedPolicyDocumentException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a4.prototype);
        }
      }),
      (() => {
        __name(_a4, 'MalformedPolicyDocumentException');
      })(),
      _a4);
    var _a5;
    var PackedPolicyTooLargeException =
      ((_a5 = class extends STSServiceException {
        name = 'PackedPolicyTooLargeException';
        $fault = 'client';
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'PackedPolicyTooLargeException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a5.prototype);
        }
      }),
      (() => {
        __name(_a5, 'PackedPolicyTooLargeException');
      })(),
      _a5);
    var _a6;
    var RegionDisabledException =
      ((_a6 = class extends STSServiceException {
        name = 'RegionDisabledException';
        $fault = 'client';
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'RegionDisabledException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a6.prototype);
        }
      }),
      (() => {
        __name(_a6, 'RegionDisabledException');
      })(),
      _a6);
    var _a7;
    var IDPRejectedClaimException =
      ((_a7 = class extends STSServiceException {
        name = 'IDPRejectedClaimException';
        $fault = 'client';
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'IDPRejectedClaimException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a7.prototype);
        }
      }),
      (() => {
        __name(_a7, 'IDPRejectedClaimException');
      })(),
      _a7);
    var _a8;
    var InvalidIdentityTokenException =
      ((_a8 = class extends STSServiceException {
        name = 'InvalidIdentityTokenException';
        $fault = 'client';
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidIdentityTokenException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a8.prototype);
        }
      }),
      (() => {
        __name(_a8, 'InvalidIdentityTokenException');
      })(),
      _a8);
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.WebIdentityToken && { WebIdentityToken: import_smithy_client2.SENSITIVE_STRING }
        ),
      'AssumeRoleWithWebIdentityRequestFilterSensitiveLog'
    );
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
        ),
      'AssumeRoleWithWebIdentityResponseFilterSensitiveLog'
    );
    var _a9;
    var IDPCommunicationErrorException =
      ((_a9 = class extends STSServiceException {
        name = 'IDPCommunicationErrorException';
        $fault = 'client';
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'IDPCommunicationErrorException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a9.prototype);
        }
      }),
      (() => {
        __name(_a9, 'IDPCommunicationErrorException');
      })(),
      _a9);
    var import_core2 = require_dist_cjs29();
    var import_protocol_http = require_dist_cjs2();
    var import_smithy_client3 = require_dist_cjs27();
    var se_AssumeRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString(
        __spreadProps(__spreadValues({}, se_AssumeRoleRequest(input, context)), {
          [_A]: _AR,
          [_V]: _,
        })
      );
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    }, 'se_AssumeRoleCommand');
    var se_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString(
        __spreadProps(__spreadValues({}, se_AssumeRoleWithWebIdentityRequest(input, context)), {
          [_A]: _ARWWI,
          [_V]: _,
        })
      );
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    }, 'se_AssumeRoleWithWebIdentityCommand');
    var de_AssumeRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core2.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = __spreadValues(
        {
          $metadata: deserializeMetadata(output),
        },
        contents
      );
      return response;
    }, 'de_AssumeRoleCommand');
    var de_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core2.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = __spreadValues(
        {
          $metadata: deserializeMetadata(output),
        },
        contents
      );
      return response;
    }, 'de_AssumeRoleWithWebIdentityCommand');
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await (0, import_core2.parseXmlErrorBody)(output.body, context),
      });
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExpiredTokenException':
        case 'com.amazonaws.sts#ExpiredTokenException':
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case 'MalformedPolicyDocument':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case 'PackedPolicyTooLarge':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        case 'IDPCommunicationError':
        case 'com.amazonaws.sts#IDPCommunicationErrorException':
          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case 'IDPRejectedClaim':
        case 'com.amazonaws.sts#IDPRejectedClaimException':
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case 'InvalidIdentityToken':
        case 'com.amazonaws.sts#InvalidIdentityTokenException':
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    }, 'de_CommandError');
    var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new ExpiredTokenException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          deserialized
        )
      );
      return (0, import_smithy_client3.decorateServiceException)(exception, body);
    }, 'de_ExpiredTokenExceptionRes');
    var de_IDPCommunicationErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new IDPCommunicationErrorException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          deserialized
        )
      );
      return (0, import_smithy_client3.decorateServiceException)(exception, body);
    }, 'de_IDPCommunicationErrorExceptionRes');
    var de_IDPRejectedClaimExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new IDPRejectedClaimException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          deserialized
        )
      );
      return (0, import_smithy_client3.decorateServiceException)(exception, body);
    }, 'de_IDPRejectedClaimExceptionRes');
    var de_InvalidIdentityTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new InvalidIdentityTokenException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          deserialized
        )
      );
      return (0, import_smithy_client3.decorateServiceException)(exception, body);
    }, 'de_InvalidIdentityTokenExceptionRes');
    var de_MalformedPolicyDocumentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new MalformedPolicyDocumentException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          deserialized
        )
      );
      return (0, import_smithy_client3.decorateServiceException)(exception, body);
    }, 'de_MalformedPolicyDocumentExceptionRes');
    var de_PackedPolicyTooLargeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new PackedPolicyTooLargeException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          deserialized
        )
      );
      return (0, import_smithy_client3.decorateServiceException)(exception, body);
    }, 'de_PackedPolicyTooLargeExceptionRes');
    var de_RegionDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new RegionDisabledException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          deserialized
        )
      );
      return (0, import_smithy_client3.decorateServiceException)(exception, body);
    }, 'de_RegionDisabledExceptionRes');
    var se_AssumeRoleRequest = /* @__PURE__ */ __name((input, context) => {
      var _a13, _b, _c, _d;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a13 = input[_PA]) == null ? void 0 : _a13.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (((_b = input[_T]) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_TTK] != null) {
        const memberEntries = se_tagKeyListType(input[_TTK], context);
        if (((_c = input[_TTK]) == null ? void 0 : _c.length) === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_EI] != null) {
        entries[_EI] = input[_EI];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        entries[_TC] = input[_TC];
      }
      if (input[_SI] != null) {
        entries[_SI] = input[_SI];
      }
      if (input[_PC] != null) {
        const memberEntries = se_ProvidedContextsListType(input[_PC], context);
        if (((_d = input[_PC]) == null ? void 0 : _d.length) === 0) {
          entries.ProvidedContexts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProvidedContexts.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, 'se_AssumeRoleRequest');
    var se_AssumeRoleWithWebIdentityRequest = /* @__PURE__ */ __name((input, context) => {
      var _a13;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_WIT] != null) {
        entries[_WIT] = input[_WIT];
      }
      if (input[_PI] != null) {
        entries[_PI] = input[_PI];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a13 = input[_PA]) == null ? void 0 : _a13.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    }, 'se_AssumeRoleWithWebIdentityRequest');
    var se_policyDescriptorListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, 'se_policyDescriptorListType');
    var se_PolicyDescriptorType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_a] != null) {
        entries[_a] = input[_a];
      }
      return entries;
    }, 'se_PolicyDescriptorType');
    var se_ProvidedContext = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PAr] != null) {
        entries[_PAr] = input[_PAr];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, 'se_ProvidedContext');
    var se_ProvidedContextsListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, 'se_ProvidedContextsListType');
    var se_Tag = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_K] != null) {
        entries[_K] = input[_K];
      }
      if (input[_Va] != null) {
        entries[_Va] = input[_Va];
      }
      return entries;
    }, 'se_Tag');
    var se_tagKeyListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, 'se_tagKeyListType');
    var se_tagListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, 'se_tagListType');
    var de_AssumedRoleUser = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ARI] != null) {
        contents[_ARI] = (0, import_smithy_client3.expectString)(output[_ARI]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client3.expectString)(output[_Ar]);
      }
      return contents;
    }, 'de_AssumedRoleUser');
    var de_AssumeRoleResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client3.strictParseInt32)(output[_PPS]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client3.expectString)(output[_SI]);
      }
      return contents;
    }, 'de_AssumeRoleResponse');
    var de_AssumeRoleWithWebIdentityResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_SFWIT] != null) {
        contents[_SFWIT] = (0, import_smithy_client3.expectString)(output[_SFWIT]);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client3.strictParseInt32)(output[_PPS]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = (0, import_smithy_client3.expectString)(output[_Pr]);
      }
      if (output[_Au] != null) {
        contents[_Au] = (0, import_smithy_client3.expectString)(output[_Au]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client3.expectString)(output[_SI]);
      }
      return contents;
    }, 'de_AssumeRoleWithWebIdentityResponse');
    var de_Credentials = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_AKI] != null) {
        contents[_AKI] = (0, import_smithy_client3.expectString)(output[_AKI]);
      }
      if (output[_SAK] != null) {
        contents[_SAK] = (0, import_smithy_client3.expectString)(output[_SAK]);
      }
      if (output[_ST] != null) {
        contents[_ST] = (0, import_smithy_client3.expectString)(output[_ST]);
      }
      if (output[_E] != null) {
        contents[_E] = (0, import_smithy_client3.expectNonNull)(
          (0, import_smithy_client3.parseRfc3339DateTimeWithOffset)(output[_E])
        );
      }
      return contents;
    }, 'de_Credentials');
    var de_ExpiredTokenException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
      }
      return contents;
    }, 'de_ExpiredTokenException');
    var de_IDPCommunicationErrorException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
      }
      return contents;
    }, 'de_IDPCommunicationErrorException');
    var de_IDPRejectedClaimException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
      }
      return contents;
    }, 'de_IDPRejectedClaimException');
    var de_InvalidIdentityTokenException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
      }
      return contents;
    }, 'de_InvalidIdentityTokenException');
    var de_MalformedPolicyDocumentException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
      }
      return contents;
    }, 'de_MalformedPolicyDocumentException');
    var de_PackedPolicyTooLargeException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
      }
      return contents;
    }, 'de_PackedPolicyTooLargeException');
    var de_RegionDisabledException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client3.expectString)(output[_m]);
      }
      return contents;
    }, 'de_RegionDisabledException');
    var deserializeMetadata = /* @__PURE__ */ __name((output) => {
      var _a13, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId:
          (_b = (_a13 = output.headers['x-amzn-requestid']) != null ? _a13 : output.headers['x-amzn-request-id']) !=
          null
            ? _b
            : output.headers['x-amz-request-id'],
        extendedRequestId: output.headers['x-amz-id-2'],
        cfId: output.headers['x-amz-cf-id'],
      };
    }, 'deserializeMetadata');
    var throwDefaultError = (0, import_smithy_client3.withBaseException)(STSServiceException);
    var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = 'https', port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: 'POST',
        path: basePath.endsWith('/') ? basePath.slice(0, -1) + path : basePath + path,
        headers,
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new import_protocol_http.HttpRequest(contents);
    }, 'buildHttpRpcRequest');
    var SHARED_HEADERS = {
      'content-type': 'application/x-www-form-urlencoded',
    };
    var _ = '2011-06-15';
    var _A = 'Action';
    var _AKI = 'AccessKeyId';
    var _AR = 'AssumeRole';
    var _ARI = 'AssumedRoleId';
    var _ARU = 'AssumedRoleUser';
    var _ARWWI = 'AssumeRoleWithWebIdentity';
    var _Ar = 'Arn';
    var _Au = 'Audience';
    var _C = 'Credentials';
    var _CA = 'ContextAssertion';
    var _DS = 'DurationSeconds';
    var _E = 'Expiration';
    var _EI = 'ExternalId';
    var _K = 'Key';
    var _P = 'Policy';
    var _PA = 'PolicyArns';
    var _PAr = 'ProviderArn';
    var _PC = 'ProvidedContexts';
    var _PI = 'ProviderId';
    var _PPS = 'PackedPolicySize';
    var _Pr = 'Provider';
    var _RA = 'RoleArn';
    var _RSN = 'RoleSessionName';
    var _SAK = 'SecretAccessKey';
    var _SFWIT = 'SubjectFromWebIdentityToken';
    var _SI = 'SourceIdentity';
    var _SN = 'SerialNumber';
    var _ST = 'SessionToken';
    var _T = 'Tags';
    var _TC = 'TokenCode';
    var _TTK = 'TransitiveTagKeys';
    var _V = 'Version';
    var _Va = 'Value';
    var _WIT = 'WebIdentityToken';
    var _a = 'arn';
    var _m = 'message';
    var buildFormUrlencodedString = /* @__PURE__ */ __name(
      (formEntries) =>
        Object.entries(formEntries)
          .map(
            ([key, value]) =>
              (0, import_smithy_client3.extendedEncodeURIComponent)(key) +
              '=' +
              (0, import_smithy_client3.extendedEncodeURIComponent)(value)
          )
          .join('&'),
      'buildFormUrlencodedString'
    );
    var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
      var _a13;
      if (((_a13 = data.Error) == null ? void 0 : _a13.Code) !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return 'NotFound';
      }
    }, 'loadQueryErrorCode');
    var _a10;
    var AssumeRoleCommand =
      ((_a10 = class extends (
        import_smithy_client4.Command.classBuilder()
          .ep(import_EndpointParameters.commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSSecurityTokenServiceV20110615', 'AssumeRole', {})
          .n('STSClient', 'AssumeRoleCommand')
          .f(void 0, AssumeRoleResponseFilterSensitiveLog)
          .ser(se_AssumeRoleCommand)
          .de(de_AssumeRoleCommand)
          .build()
      ) {}),
      (() => {
        __name(_a10, 'AssumeRoleCommand');
      })(),
      _a10);
    var import_middleware_endpoint2 = require_dist_cjs37();
    var import_middleware_serde2 = require_dist_cjs7();
    var import_smithy_client5 = require_dist_cjs27();
    var import_EndpointParameters2 = require_EndpointParameters();
    var _a11;
    var AssumeRoleWithWebIdentityCommand =
      ((_a11 = class extends (
        import_smithy_client5.Command.classBuilder()
          .ep(import_EndpointParameters2.commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint2.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSSecurityTokenServiceV20110615', 'AssumeRoleWithWebIdentity', {})
          .n('STSClient', 'AssumeRoleWithWebIdentityCommand')
          .f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog)
          .ser(se_AssumeRoleWithWebIdentityCommand)
          .de(de_AssumeRoleWithWebIdentityCommand)
          .build()
      ) {}),
      (() => {
        __name(_a11, 'AssumeRoleWithWebIdentityCommand');
      })(),
      _a11);
    var import_STSClient = require_STSClient();
    var commands = {
      AssumeRoleCommand,
      AssumeRoleWithWebIdentityCommand,
    };
    var _a12;
    var STS =
      ((_a12 = class extends import_STSClient.STSClient {}),
      (() => {
        __name(_a12, 'STS');
      })(),
      _a12);
    (0, import_smithy_client6.createAggregatedClient)(commands, STS);
    var import_EndpointParameters3 = require_EndpointParameters();
    var import_client = require_client2();
    var ASSUME_ROLE_DEFAULT_REGION = 'us-east-1';
    var getAccountIdFromAssumedRoleUser = /* @__PURE__ */ __name((assumedRoleUser) => {
      if (typeof (assumedRoleUser == null ? void 0 : assumedRoleUser.Arn) === 'string') {
        const arnComponents = assumedRoleUser.Arn.split(':');
        if (arnComponents.length > 4 && arnComponents[4] !== '') {
          return arnComponents[4];
        }
      }
      return void 0;
    }, 'getAccountIdFromAssumedRoleUser');
    var resolveRegion = /* @__PURE__ */ __name(async (_region, _parentRegion, credentialProviderLogger) => {
      var _a13, _b;
      const region = typeof _region === 'function' ? await _region() : _region;
      const parentRegion = typeof _parentRegion === 'function' ? await _parentRegion() : _parentRegion;
      (_a13 = credentialProviderLogger == null ? void 0 : credentialProviderLogger.debug) == null
        ? void 0
        : _a13.call(
            credentialProviderLogger,
            '@aws-sdk/client-sts::resolveRegion',
            'accepting first of:',
            `${region} (provider)`,
            `${parentRegion} (parent client)`,
            `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`
          );
      return (_b = region != null ? region : parentRegion) != null ? _b : ASSUME_ROLE_DEFAULT_REGION;
    }, 'resolveRegion');
    var getDefaultRoleAssumer = /* @__PURE__ */ __name((stsOptions, STSClient3) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        var _a13, _b, _c, _d;
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const {
            logger: logger2 = (_a13 = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null
              ? void 0
              : _a13.logger,
            region,
            requestHandler = (_b = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null
              ? void 0
              : _b.requestHandler,
            credentialProviderLogger,
          } = stsOptions;
          const resolvedRegion = await resolveRegion(
            region,
            (_c = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _c.region,
            credentialProviderLogger
          );
          const isCompatibleRequestHandler = !isH2(requestHandler);
          stsClient = new STSClient3({
            profile: (_d = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _d.profile,
            credentialDefaultProvider: /* @__PURE__ */ __name(
              () => async () => closureSourceCreds,
              'credentialDefaultProvider'
            ),
            region: resolvedRegion,
            requestHandler: isCompatibleRequestHandler ? requestHandler : void 0,
            logger: logger2,
          });
        }
        const { Credentials: Credentials2, AssumedRoleUser: AssumedRoleUser2 } = await stsClient.send(
          new AssumeRoleCommand(params)
        );
        if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser2);
        const credentials = __spreadValues(
          __spreadValues(
            {
              accessKeyId: Credentials2.AccessKeyId,
              secretAccessKey: Credentials2.SecretAccessKey,
              sessionToken: Credentials2.SessionToken,
              expiration: Credentials2.Expiration,
            },
            Credentials2.CredentialScope && { credentialScope: Credentials2.CredentialScope }
          ),
          accountId && { accountId }
        );
        (0, import_client.setCredentialFeature)(credentials, 'CREDENTIALS_STS_ASSUME_ROLE', 'i');
        return credentials;
      };
    }, 'getDefaultRoleAssumer');
    var getDefaultRoleAssumerWithWebIdentity = /* @__PURE__ */ __name((stsOptions, STSClient3) => {
      let stsClient;
      return async (params) => {
        var _a13, _b, _c, _d;
        if (!stsClient) {
          const {
            logger: logger2 = (_a13 = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null
              ? void 0
              : _a13.logger,
            region,
            requestHandler = (_b = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null
              ? void 0
              : _b.requestHandler,
            credentialProviderLogger,
          } = stsOptions;
          const resolvedRegion = await resolveRegion(
            region,
            (_c = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _c.region,
            credentialProviderLogger
          );
          const isCompatibleRequestHandler = !isH2(requestHandler);
          stsClient = new STSClient3({
            profile: (_d = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _d.profile,
            region: resolvedRegion,
            requestHandler: isCompatibleRequestHandler ? requestHandler : void 0,
            logger: logger2,
          });
        }
        const { Credentials: Credentials2, AssumedRoleUser: AssumedRoleUser2 } = await stsClient.send(
          new AssumeRoleWithWebIdentityCommand(params)
        );
        if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser2);
        const credentials = __spreadValues(
          __spreadValues(
            {
              accessKeyId: Credentials2.AccessKeyId,
              secretAccessKey: Credentials2.SecretAccessKey,
              sessionToken: Credentials2.SessionToken,
              expiration: Credentials2.Expiration,
            },
            Credentials2.CredentialScope && { credentialScope: Credentials2.CredentialScope }
          ),
          accountId && { accountId }
        );
        if (accountId) {
          (0, import_client.setCredentialFeature)(credentials, 'RESOLVED_ACCOUNT_ID', 'T');
        }
        (0, import_client.setCredentialFeature)(credentials, 'CREDENTIALS_STS_ASSUME_ROLE_WEB_ID', 'k');
        return credentials;
      };
    }, 'getDefaultRoleAssumerWithWebIdentity');
    var isH2 = /* @__PURE__ */ __name((requestHandler) => {
      var _a13;
      return (
        ((_a13 = requestHandler == null ? void 0 : requestHandler.metadata) == null ? void 0 : _a13.handlerProtocol) ===
        'h2'
      );
    }, 'isH2');
    var import_STSClient2 = require_STSClient();
    var getCustomizableStsClientCtor = /* @__PURE__ */ __name((baseCtor, customizations) => {
      var _a13;
      if (!customizations) return baseCtor;
      else
        return (
          (_a13 = class extends baseCtor {
            constructor(config) {
              super(config);
              for (const customization of customizations) {
                this.middlewareStack.use(customization);
              }
            }
          }),
          (() => {
            __name(_a13, 'CustomizableSTSClient');
          })(),
          _a13
        );
    }, 'getCustomizableStsClientCtor');
    var getDefaultRoleAssumer2 = /* @__PURE__ */ __name(
      (stsOptions = {}, stsPlugins) =>
        getDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)),
      'getDefaultRoleAssumer'
    );
    var getDefaultRoleAssumerWithWebIdentity2 = /* @__PURE__ */ __name(
      (stsOptions = {}, stsPlugins) =>
        getDefaultRoleAssumerWithWebIdentity(
          stsOptions,
          getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)
        ),
      'getDefaultRoleAssumerWithWebIdentity'
    );
    var decorateDefaultCredentialProvider = /* @__PURE__ */ __name(
      (provider) => (input) =>
        provider(
          __spreadValues(
            {
              roleAssumer: getDefaultRoleAssumer2(input),
              roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity2(input),
            },
            input
          )
        ),
      'decorateDefaultCredentialProvider'
    );
  },
});

// node_modules/@aws-sdk/nested-clients/sts.js
var require_sts2 = __commonJS({
  'node_modules/@aws-sdk/nested-clients/sts.js'(exports, module2) {
    module2.exports = require_sts();
  },
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      fromProcess: () => fromProcess,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_shared_ini_file_loader = require_dist_cjs35();
    var import_property_provider = require_dist_cjs23();
    var import_child_process = require('child_process');
    var import_util = require('util');
    var import_client = require_client2();
    var getValidatedProcessCredentials = /* @__PURE__ */ __name((profileName, data, profiles) => {
      var _a;
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      let accountId = data.AccountId;
      if (
        !accountId &&
        ((_a = profiles == null ? void 0 : profiles[profileName]) == null ? void 0 : _a.aws_account_id)
      ) {
        accountId = profiles[profileName].aws_account_id;
      }
      const credentials = __spreadValues(
        __spreadValues(
          __spreadValues(
            __spreadValues(
              {
                accessKeyId: data.AccessKeyId,
                secretAccessKey: data.SecretAccessKey,
              },
              data.SessionToken && { sessionToken: data.SessionToken }
            ),
            data.Expiration && { expiration: new Date(data.Expiration) }
          ),
          data.CredentialScope && { credentialScope: data.CredentialScope }
        ),
        accountId && { accountId }
      );
      (0, import_client.setCredentialFeature)(credentials, 'CREDENTIALS_PROCESS', 'w');
      return credentials;
    }, 'getValidatedProcessCredentials');
    var resolveProcessCredentials = /* @__PURE__ */ __name(async (profileName, profiles, logger2) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile['credential_process'];
        if (credentialProcess !== void 0) {
          const execPromise = (0, import_util.promisify)(import_child_process.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return getValidatedProcessCredentials(profileName, data, profiles);
          } catch (error) {
            throw new import_property_provider.CredentialsProviderError(error.message, { logger: logger2 });
          }
        } else {
          throw new import_property_provider.CredentialsProviderError(
            `Profile ${profileName} did not contain credential_process.`,
            { logger: logger2 }
          );
        }
      } else {
        throw new import_property_provider.CredentialsProviderError(
          `Profile ${profileName} could not be found in shared credentials file.`,
          {
            logger: logger2,
          }
        );
      }
    }, 'resolveProcessCredentials');
    var fromProcess = /* @__PURE__ */ __name(
      (init = {}) =>
        async ({ callerClientConfig } = {}) => {
          var _a, _b;
          (_a = init.logger) == null ? void 0 : _a.debug('@aws-sdk/credential-provider-process - fromProcess');
          const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
          return resolveProcessCredentials(
            (0, import_shared_ini_file_loader.getProfileName)({
              profile:
                (_b = init.profile) != null ? _b : callerClientConfig == null ? void 0 : callerClientConfig.profile,
            }),
            profiles,
            init.logger
          );
        },
      'fromProcess'
    );
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js'(exports) {
    'use strict';
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          });
    var __setModuleDefault =
      (exports && exports.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          });
    var __importStar =
      (exports && exports.__importStar) ||
      (function () {
        var ownKeys = function (o) {
          ownKeys =
            Object.getOwnPropertyNames ||
            function (o2) {
              var ar = [];
              for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
              return ar;
            };
          return ownKeys(o);
        };
        return function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k = ownKeys(mod), i = 0; i < k.length; i++)
              if (k[i] !== 'default') __createBinding(result, mod, k[i]);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      })();
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromWebToken = void 0;
    var fromWebToken2 = (init) => async (awsIdentityProperties) => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug('@aws-sdk/credential-provider-web-identity - fromWebToken');
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;
      let { roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        const { getDefaultRoleAssumerWithWebIdentity } = await Promise.resolve().then(() =>
          __importStar(require_sts2())
        );
        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity(
          __spreadProps(__spreadValues({}, init.clientConfig), {
            credentialProviderLogger: init.logger,
            parentClientConfig: __spreadValues(
              __spreadValues({}, awsIdentityProperties == null ? void 0 : awsIdentityProperties.callerClientConfig),
              init.parentClientConfig
            ),
          }),
          init.clientPlugins
        );
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName != null ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds,
      });
    };
    exports.fromWebToken = fromWebToken2;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromTokenFile = void 0;
    var client_1 = require_client2();
    var property_provider_1 = require_dist_cjs23();
    var fs_1 = require('fs');
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = 'AWS_WEB_IDENTITY_TOKEN_FILE';
    var ENV_ROLE_ARN = 'AWS_ROLE_ARN';
    var ENV_ROLE_SESSION_NAME = 'AWS_ROLE_SESSION_NAME';
    var fromTokenFile2 =
      (init = {}) =>
      async () => {
        var _a, _b, _c, _d;
        (_a = init.logger) == null ? void 0 : _a.debug('@aws-sdk/credential-provider-web-identity - fromTokenFile');
        const webIdentityTokenFile =
          (_b = init == null ? void 0 : init.webIdentityTokenFile) != null ? _b : process.env[ENV_TOKEN_FILE];
        const roleArn = (_c = init == null ? void 0 : init.roleArn) != null ? _c : process.env[ENV_ROLE_ARN];
        const roleSessionName =
          (_d = init == null ? void 0 : init.roleSessionName) != null ? _d : process.env[ENV_ROLE_SESSION_NAME];
        if (!webIdentityTokenFile || !roleArn) {
          throw new property_provider_1.CredentialsProviderError('Web identity configuration not specified', {
            logger: init.logger,
          });
        }
        const credentials = await (0, fromWebToken_1.fromWebToken)(
          __spreadProps(__spreadValues({}, init), {
            webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: 'ascii' }),
            roleArn,
            roleSessionName,
          })
        )();
        if (webIdentityTokenFile === process.env[ENV_TOKEN_FILE]) {
          (0, client_1.setCredentialFeature)(credentials, 'CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN', 'h');
        }
        return credentials;
      };
    exports.fromTokenFile = fromTokenFile2;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs53 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (
      __copyProps2(target, mod, 'default'), secondTarget && __copyProps2(secondTarget, mod, 'default')
    );
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    module2.exports = __toCommonJS(index_exports);
    __reExport(index_exports, require_fromTokenFile(), module2.exports);
    __reExport(index_exports, require_fromWebToken(), module2.exports);
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs54 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (
      (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),
      __copyProps2(
        isNodeMode || !mod || !mod.__esModule
          ? __defProp2(target, 'default', { value: mod, enumerable: true })
          : target,
        mod
      )
    );
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      fromIni: () => fromIni,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_shared_ini_file_loader = require_dist_cjs35();
    var import_client = require_client2();
    var import_property_provider = require_dist_cjs23();
    var resolveCredentialSource = /* @__PURE__ */ __name((credentialSource, profileName, logger2) => {
      const sourceProvidersMap = {
        EcsContainer: /* @__PURE__ */ __name(async (options) => {
          const { fromHttp } = await Promise.resolve().then(() => __toESM2(require_dist_cjs43()));
          const { fromContainerMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs42()));
          logger2 == null
            ? void 0
            : logger2.debug('@aws-sdk/credential-provider-ini - credential_source is EcsContainer');
          return async () =>
            (0, import_property_provider.chain)(
              fromHttp(options != null ? options : {}),
              fromContainerMetadata(options)
            )().then(setNamedProvider);
        }, 'EcsContainer'),
        Ec2InstanceMetadata: /* @__PURE__ */ __name(async (options) => {
          logger2 == null
            ? void 0
            : logger2.debug('@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata');
          const { fromInstanceMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs42()));
          return async () => fromInstanceMetadata(options)().then(setNamedProvider);
        }, 'Ec2InstanceMetadata'),
        Environment: /* @__PURE__ */ __name(async (options) => {
          logger2 == null
            ? void 0
            : logger2.debug('@aws-sdk/credential-provider-ini - credential_source is Environment');
          const { fromEnv } = await Promise.resolve().then(() => __toESM2(require_dist_cjs41()));
          return async () => fromEnv(options)().then(setNamedProvider);
        }, 'Environment'),
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource];
      } else {
        throw new import_property_provider.CredentialsProviderError(
          `Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,
          { logger: logger2 }
        );
      }
    }, 'resolveCredentialSource');
    var setNamedProvider = /* @__PURE__ */ __name(
      (creds) => (0, import_client.setCredentialFeature)(creds, 'CREDENTIALS_PROFILE_NAMED_PROVIDER', 'p'),
      'setNamedProvider'
    );
    var isAssumeRoleProfile = /* @__PURE__ */ __name((arg, { profile = 'default', logger: logger2 } = {}) => {
      return (
        Boolean(arg) &&
        typeof arg === 'object' &&
        typeof arg.role_arn === 'string' &&
        ['undefined', 'string'].indexOf(typeof arg.role_session_name) > -1 &&
        ['undefined', 'string'].indexOf(typeof arg.external_id) > -1 &&
        ['undefined', 'string'].indexOf(typeof arg.mfa_serial) > -1 &&
        (isAssumeRoleWithSourceProfile(arg, { profile, logger: logger2 }) ||
          isCredentialSourceProfile(arg, { profile, logger: logger2 }))
      );
    }, 'isAssumeRoleProfile');
    var isAssumeRoleWithSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger: logger2 }) => {
      var _a;
      const withSourceProfile = typeof arg.source_profile === 'string' && typeof arg.credential_source === 'undefined';
      if (withSourceProfile) {
        (_a = logger2 == null ? void 0 : logger2.debug) == null
          ? void 0
          : _a.call(logger2, `    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);
      }
      return withSourceProfile;
    }, 'isAssumeRoleWithSourceProfile');
    var isCredentialSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger: logger2 }) => {
      var _a;
      const withProviderProfile =
        typeof arg.credential_source === 'string' && typeof arg.source_profile === 'undefined';
      if (withProviderProfile) {
        (_a = logger2 == null ? void 0 : logger2.debug) == null
          ? void 0
          : _a.call(logger2, `    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);
      }
      return withProviderProfile;
    }, 'isCredentialSourceProfile');
    var resolveAssumeRoleCredentials = /* @__PURE__ */ __name(
      async (profileName, profiles, options, visitedProfiles = {}) => {
        var _a, _b, _c, _d;
        (_a = options.logger) == null
          ? void 0
          : _a.debug('@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)');
        const profileData = profiles[profileName];
        const { source_profile, region } = profileData;
        if (!options.roleAssumer) {
          const { getDefaultRoleAssumer } = await Promise.resolve().then(() => __toESM2(require_sts2()));
          options.roleAssumer = getDefaultRoleAssumer(
            __spreadProps(__spreadValues({}, options.clientConfig), {
              credentialProviderLogger: options.logger,
              parentClientConfig: __spreadProps(
                __spreadValues({}, options == null ? void 0 : options.parentClientConfig),
                {
                  region:
                    region != null
                      ? region
                      : (_b = options == null ? void 0 : options.parentClientConfig) == null
                      ? void 0
                      : _b.region,
                }
              ),
            }),
            options.clientPlugins
          );
        }
        if (source_profile && source_profile in visitedProfiles) {
          throw new import_property_provider.CredentialsProviderError(
            `Detected a cycle attempting to resolve credentials for profile ${(0,
            import_shared_ini_file_loader.getProfileName)(options)}. Profiles visited: ` +
              Object.keys(visitedProfiles).join(', '),
            { logger: options.logger }
          );
        }
        (_c = options.logger) == null
          ? void 0
          : _c.debug(
              `@aws-sdk/credential-provider-ini - finding credential resolver using ${
                source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`
              }`
            );
        const sourceCredsProvider = source_profile
          ? resolveProfileData(
              source_profile,
              profiles,
              options,
              __spreadProps(__spreadValues({}, visitedProfiles), {
                [source_profile]: true,
              }),
              isCredentialSourceWithoutRoleArn((_d = profiles[source_profile]) != null ? _d : {})
            )
          : (await resolveCredentialSource(profileData.credential_source, profileName, options.logger)(options))();
        if (isCredentialSourceWithoutRoleArn(profileData)) {
          return sourceCredsProvider.then((creds) =>
            (0, import_client.setCredentialFeature)(creds, 'CREDENTIALS_PROFILE_SOURCE_PROFILE', 'o')
          );
        } else {
          const params = {
            RoleArn: profileData.role_arn,
            RoleSessionName: profileData.role_session_name || `aws-sdk-js-${Date.now()}`,
            ExternalId: profileData.external_id,
            DurationSeconds: parseInt(profileData.duration_seconds || '3600', 10),
          };
          const { mfa_serial } = profileData;
          if (mfa_serial) {
            if (!options.mfaCodeProvider) {
              throw new import_property_provider.CredentialsProviderError(
                `Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`,
                { logger: options.logger, tryNextLink: false }
              );
            }
            params.SerialNumber = mfa_serial;
            params.TokenCode = await options.mfaCodeProvider(mfa_serial);
          }
          const sourceCreds = await sourceCredsProvider;
          return options
            .roleAssumer(sourceCreds, params)
            .then((creds) => (0, import_client.setCredentialFeature)(creds, 'CREDENTIALS_PROFILE_SOURCE_PROFILE', 'o'));
        }
      },
      'resolveAssumeRoleCredentials'
    );
    var isCredentialSourceWithoutRoleArn = /* @__PURE__ */ __name((section) => {
      return !section.role_arn && !!section.credential_source;
    }, 'isCredentialSourceWithoutRoleArn');
    var isProcessProfile = /* @__PURE__ */ __name(
      (arg) => Boolean(arg) && typeof arg === 'object' && typeof arg.credential_process === 'string',
      'isProcessProfile'
    );
    var resolveProcessCredentials = /* @__PURE__ */ __name(
      async (options, profile) =>
        Promise.resolve()
          .then(() => __toESM2(require_dist_cjs52()))
          .then(({ fromProcess }) =>
            fromProcess(
              __spreadProps(__spreadValues({}, options), {
                profile,
              })
            )().then((creds) => (0, import_client.setCredentialFeature)(creds, 'CREDENTIALS_PROFILE_PROCESS', 'v'))
          ),
      'resolveProcessCredentials'
    );
    var resolveSsoCredentials = /* @__PURE__ */ __name(async (profile, profileData, options = {}) => {
      const { fromSSO } = await Promise.resolve().then(() => __toESM2(require_dist_cjs51()));
      return fromSSO({
        profile,
        logger: options.logger,
        parentClientConfig: options.parentClientConfig,
        clientConfig: options.clientConfig,
      })().then((creds) => {
        if (profileData.sso_session) {
          return (0, import_client.setCredentialFeature)(creds, 'CREDENTIALS_PROFILE_SSO', 'r');
        } else {
          return (0, import_client.setCredentialFeature)(creds, 'CREDENTIALS_PROFILE_SSO_LEGACY', 't');
        }
      });
    }, 'resolveSsoCredentials');
    var isSsoProfile = /* @__PURE__ */ __name(
      (arg) =>
        arg &&
        (typeof arg.sso_start_url === 'string' ||
          typeof arg.sso_account_id === 'string' ||
          typeof arg.sso_session === 'string' ||
          typeof arg.sso_region === 'string' ||
          typeof arg.sso_role_name === 'string'),
      'isSsoProfile'
    );
    var isStaticCredsProfile = /* @__PURE__ */ __name(
      (arg) =>
        Boolean(arg) &&
        typeof arg === 'object' &&
        typeof arg.aws_access_key_id === 'string' &&
        typeof arg.aws_secret_access_key === 'string' &&
        ['undefined', 'string'].indexOf(typeof arg.aws_session_token) > -1 &&
        ['undefined', 'string'].indexOf(typeof arg.aws_account_id) > -1,
      'isStaticCredsProfile'
    );
    var resolveStaticCredentials = /* @__PURE__ */ __name(async (profile, options) => {
      var _a;
      (_a = options == null ? void 0 : options.logger) == null
        ? void 0
        : _a.debug('@aws-sdk/credential-provider-ini - resolveStaticCredentials');
      const credentials = __spreadValues(
        __spreadValues(
          {
            accessKeyId: profile.aws_access_key_id,
            secretAccessKey: profile.aws_secret_access_key,
            sessionToken: profile.aws_session_token,
          },
          profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope }
        ),
        profile.aws_account_id && { accountId: profile.aws_account_id }
      );
      return (0, import_client.setCredentialFeature)(credentials, 'CREDENTIALS_PROFILE', 'n');
    }, 'resolveStaticCredentials');
    var isWebIdentityProfile = /* @__PURE__ */ __name(
      (arg) =>
        Boolean(arg) &&
        typeof arg === 'object' &&
        typeof arg.web_identity_token_file === 'string' &&
        typeof arg.role_arn === 'string' &&
        ['undefined', 'string'].indexOf(typeof arg.role_session_name) > -1,
      'isWebIdentityProfile'
    );
    var resolveWebIdentityCredentials = /* @__PURE__ */ __name(
      async (profile, options) =>
        Promise.resolve()
          .then(() => __toESM2(require_dist_cjs53()))
          .then(({ fromTokenFile: fromTokenFile2 }) =>
            fromTokenFile2({
              webIdentityTokenFile: profile.web_identity_token_file,
              roleArn: profile.role_arn,
              roleSessionName: profile.role_session_name,
              roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
              logger: options.logger,
              parentClientConfig: options.parentClientConfig,
            })().then((creds) =>
              (0, import_client.setCredentialFeature)(creds, 'CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN', 'q')
            )
          ),
      'resolveWebIdentityCredentials'
    );
    var resolveProfileData = /* @__PURE__ */ __name(
      async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {
        const data = profiles[profileName];
        if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
          return resolveStaticCredentials(data, options);
        }
        if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {
          return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
        }
        if (isStaticCredsProfile(data)) {
          return resolveStaticCredentials(data, options);
        }
        if (isWebIdentityProfile(data)) {
          return resolveWebIdentityCredentials(data, options);
        }
        if (isProcessProfile(data)) {
          return resolveProcessCredentials(options, profileName);
        }
        if (isSsoProfile(data)) {
          return await resolveSsoCredentials(profileName, data, options);
        }
        throw new import_property_provider.CredentialsProviderError(
          `Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`,
          { logger: options.logger }
        );
      },
      'resolveProfileData'
    );
    var fromIni = /* @__PURE__ */ __name(
      (_init = {}) =>
        async ({ callerClientConfig } = {}) => {
          var _a, _b;
          const init = __spreadProps(__spreadValues({}, _init), {
            parentClientConfig: __spreadValues(__spreadValues({}, callerClientConfig), _init.parentClientConfig),
          });
          (_a = init.logger) == null ? void 0 : _a.debug('@aws-sdk/credential-provider-ini - fromIni');
          const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
          return resolveProfileData(
            (0, import_shared_ini_file_loader.getProfileName)({
              profile:
                (_b = _init.profile) != null ? _b : callerClientConfig == null ? void 0 : callerClientConfig.profile,
            }),
            profiles,
            init
          );
        },
      'fromIni'
    );
  },
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs55 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (
      (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),
      __copyProps2(
        isNodeMode || !mod || !mod.__esModule
          ? __defProp2(target, 'default', { value: mod, enumerable: true })
          : target,
        mod
      )
    );
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      credentialsTreatedAsExpired: () => credentialsTreatedAsExpired,
      credentialsWillNeedRefresh: () => credentialsWillNeedRefresh,
      defaultProvider: () => defaultProvider,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_credential_provider_env = require_dist_cjs41();
    var import_shared_ini_file_loader = require_dist_cjs35();
    var import_property_provider = require_dist_cjs23();
    var ENV_IMDS_DISABLED = 'AWS_EC2_METADATA_DISABLED';
    var remoteProvider = /* @__PURE__ */ __name(async (init) => {
      var _a, _b;
      const { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata } =
        await Promise.resolve().then(() => __toESM2(require_dist_cjs42()));
      if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {
        (_a = init.logger) == null
          ? void 0
          : _a.debug('@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata');
        const { fromHttp } = await Promise.resolve().then(() => __toESM2(require_dist_cjs43()));
        return (0, import_property_provider.chain)(fromHttp(init), fromContainerMetadata(init));
      }
      if (process.env[ENV_IMDS_DISABLED] && process.env[ENV_IMDS_DISABLED] !== 'false') {
        return async () => {
          throw new import_property_provider.CredentialsProviderError('EC2 Instance Metadata Service access disabled', {
            logger: init.logger,
          });
        };
      }
      (_b = init.logger) == null
        ? void 0
        : _b.debug('@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata');
      return fromInstanceMetadata(init);
    }, 'remoteProvider');
    var multipleCredentialSourceWarningEmitted = false;
    var defaultProvider = /* @__PURE__ */ __name(
      (init = {}) =>
        (0, import_property_provider.memoize)(
          (0, import_property_provider.chain)(
            async () => {
              var _a, _b, _c, _d, _e;
              const profile = (_a = init.profile) != null ? _a : process.env[import_shared_ini_file_loader.ENV_PROFILE];
              if (profile) {
                const envStaticCredentialsAreSet =
                  process.env[import_credential_provider_env.ENV_KEY] &&
                  process.env[import_credential_provider_env.ENV_SECRET];
                if (envStaticCredentialsAreSet) {
                  if (!multipleCredentialSourceWarningEmitted) {
                    const warnFn =
                      ((_b = init.logger) == null ? void 0 : _b.warn) &&
                      ((_d = (_c = init.logger) == null ? void 0 : _c.constructor) == null ? void 0 : _d.name) !==
                        'NoOpLogger'
                        ? init.logger.warn.bind(init.logger)
                        : console.warn;
                    warnFn(`@aws-sdk/credential-provider-node - defaultProvider::fromEnv WARNING:
    Multiple credential sources detected: 
    Both AWS_PROFILE and the pair AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY static credentials are set.
    This SDK will proceed with the AWS_PROFILE value.
    
    However, a future version may change this behavior to prefer the ENV static credentials.
    Please ensure that your environment only sets either the AWS_PROFILE or the
    AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY pair.
`);
                    multipleCredentialSourceWarningEmitted = true;
                  }
                }
                throw new import_property_provider.CredentialsProviderError(
                  'AWS_PROFILE is set, skipping fromEnv provider.',
                  {
                    logger: init.logger,
                    tryNextLink: true,
                  }
                );
              }
              (_e = init.logger) == null
                ? void 0
                : _e.debug('@aws-sdk/credential-provider-node - defaultProvider::fromEnv');
              return (0, import_credential_provider_env.fromEnv)(init)();
            },
            async () => {
              var _a;
              (_a = init.logger) == null
                ? void 0
                : _a.debug('@aws-sdk/credential-provider-node - defaultProvider::fromSSO');
              const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
              if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
                throw new import_property_provider.CredentialsProviderError(
                  'Skipping SSO provider in default chain (inputs do not include SSO fields).',
                  { logger: init.logger }
                );
              }
              const { fromSSO } = await Promise.resolve().then(() => __toESM2(require_dist_cjs51()));
              return fromSSO(init)();
            },
            async () => {
              var _a;
              (_a = init.logger) == null
                ? void 0
                : _a.debug('@aws-sdk/credential-provider-node - defaultProvider::fromIni');
              const { fromIni } = await Promise.resolve().then(() => __toESM2(require_dist_cjs54()));
              return fromIni(init)();
            },
            async () => {
              var _a;
              (_a = init.logger) == null
                ? void 0
                : _a.debug('@aws-sdk/credential-provider-node - defaultProvider::fromProcess');
              const { fromProcess } = await Promise.resolve().then(() => __toESM2(require_dist_cjs52()));
              return fromProcess(init)();
            },
            async () => {
              var _a;
              (_a = init.logger) == null
                ? void 0
                : _a.debug('@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile');
              const { fromTokenFile: fromTokenFile2 } = await Promise.resolve().then(() =>
                __toESM2(require_dist_cjs53())
              );
              return fromTokenFile2(init)();
            },
            async () => {
              var _a;
              (_a = init.logger) == null
                ? void 0
                : _a.debug('@aws-sdk/credential-provider-node - defaultProvider::remoteProvider');
              return (await remoteProvider(init))();
            },
            async () => {
              throw new import_property_provider.CredentialsProviderError(
                'Could not load credentials from any providers',
                {
                  tryNextLink: false,
                  logger: init.logger,
                }
              );
            }
          ),
          credentialsTreatedAsExpired,
          credentialsWillNeedRefresh
        ),
      'defaultProvider'
    );
    var credentialsWillNeedRefresh = /* @__PURE__ */ __name(
      (credentials) => (credentials == null ? void 0 : credentials.expiration) !== void 0,
      'credentialsWillNeedRefresh'
    );
    var credentialsTreatedAsExpired = /* @__PURE__ */ __name(
      (credentials) =>
        (credentials == null ? void 0 : credentials.expiration) !== void 0 &&
        credentials.expiration.getTime() - Date.now() < 3e5,
      'credentialsTreatedAsExpired'
    );
  },
});

// node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.js
var require_tslib2 = __commonJS({
  'node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.js'(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __esDecorate;
    var __runInitializers;
    var __propKey;
    var __setFunctionName;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    var __addDisposableResource;
    var __disposeResources;
    var __rewriteRelativeImportExtension;
    (function (factory) {
      var root =
        typeof global === 'object' ? global : typeof self === 'object' ? self : typeof this === 'object' ? this : {};
      if (typeof define === 'function' && define.amd) {
        define('tslib', ['exports'], function (exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === 'object' && typeof module2.exports === 'object') {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === 'function') {
            Object.defineProperty(exports2, '__esModule', { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function (id, v) {
          return (exports2[id] = previous ? previous(id, v) : v);
        };
      }
    })(function (exporter) {
      var extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      __extends = function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function (decorators, target, key, desc) {
        var c = arguments.length,
          r = c < 3 ? target : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc,
          d;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function (paramIndex, decorator) {
        return function (target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __esDecorate = function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) {
          if (f !== void 0 && typeof f !== 'function') throw new TypeError('Function expected');
          return f;
        }
        var kind = contextIn.kind,
          key = kind === 'getter' ? 'get' : kind === 'setter' ? 'set' : 'value';
        var target = !descriptorIn && ctor ? (contextIn['static'] ? ctor : ctor.prototype) : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _,
          done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
          var context = {};
          for (var p in contextIn) context[p] = p === 'access' ? {} : contextIn[p];
          for (var p in contextIn.access) context.access[p] = contextIn.access[p];
          context.addInitializer = function (f) {
            if (done) throw new TypeError('Cannot add initializers after decoration has completed');
            extraInitializers.push(accept(f || null));
          };
          var result = (0, decorators[i])(
            kind === 'accessor' ? { get: descriptor.get, set: descriptor.set } : descriptor[key],
            context
          );
          if (kind === 'accessor') {
            if (result === void 0) continue;
            if (result === null || typeof result !== 'object') throw new TypeError('Object expected');
            if ((_ = accept(result.get))) descriptor.get = _;
            if ((_ = accept(result.set))) descriptor.set = _;
            if ((_ = accept(result.init))) initializers.unshift(_);
          } else if ((_ = accept(result))) {
            if (kind === 'field') initializers.unshift(_);
            else descriptor[key] = _;
          }
        }
        if (target) Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
      };
      __runInitializers = function (thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
          value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
      };
      __propKey = function (x) {
        return typeof x === 'symbol' ? x : ''.concat(x);
      };
      __setFunctionName = function (f, name, prefix) {
        if (typeof name === 'symbol') name = name.description ? '['.concat(name.description, ']') : '';
        return Object.defineProperty(f, 'name', {
          configurable: true,
          value: prefix ? ''.concat(prefix, ' ', name) : name,
        });
      };
      __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function (thisArg, body) {
        var _ = {
            label: 0,
            sent: function () {
              if (t[0] & 1) throw t[1];
              return t[1];
            },
            trys: [],
            ops: [],
          },
          f,
          y,
          t,
          g = Object.create((typeof Iterator === 'function' ? Iterator : Object).prototype);
        return (
          (g.next = verb(0)),
          (g['throw'] = verb(1)),
          (g['return'] = verb(2)),
          typeof Symbol === 'function' &&
            (g[Symbol.iterator] = function () {
              return this;
            }),
          g
        );
        function verb(n) {
          return function (v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError('Generator is already executing.');
          while ((g && ((g = 0), op[0] && (_ = 0)), _))
            try {
              if (
                ((f = 1),
                y &&
                  (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                  !(t = t.call(y, op[1])).done)
              )
                return t;
              if (((y = 0), t)) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function (m, o) {
        for (var p in m) if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
      };
      __createBinding = Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          };
      __values = function (o) {
        var s = typeof Symbol === 'function' && Symbol.iterator,
          m = s && o[s],
          i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === 'number')
          return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            },
          };
        throw new TypeError(s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
      };
      __read = function (o, n) {
        var m = typeof Symbol === 'function' && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
          r,
          ar = [],
          e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i['return'])) m.call(i);
          } finally {
            if (e) throw e.error;
          }
        }
        return ar;
      };
      __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
        return r;
      };
      __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function (v) {
        return this instanceof __await ? ((this.v = v), this) : new __await(v);
      };
      __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
        return (
          (i = Object.create((typeof AsyncIterator === 'function' ? AsyncIterator : Object).prototype)),
          verb('next'),
          verb('throw'),
          verb('return', awaitReturn),
          (i[Symbol.asyncIterator] = function () {
            return this;
          }),
          i
        );
        function awaitReturn(f) {
          return function (v) {
            return Promise.resolve(v).then(f, reject);
          };
        }
        function verb(n, f) {
          if (g[n]) {
            i[n] = function (v) {
              return new Promise(function (a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
            if (f) i[n] = f(i[n]);
          }
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume('next', value);
        }
        function reject(value) {
          resume('throw', value);
        }
        function settle(f, v) {
          if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function (o) {
        var i, p;
        return (
          (i = {}),
          verb('next'),
          verb('throw', function (e) {
            throw e;
          }),
          verb('return'),
          (i[Symbol.iterator] = function () {
            return this;
          }),
          i
        );
        function verb(n, f) {
          i[n] = o[n]
            ? function (v) {
                return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
              }
            : f;
        }
      };
      __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError('Symbol.asyncIterator is not defined.');
        var m = o[Symbol.asyncIterator],
          i;
        return m
          ? m.call(o)
          : ((o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
            (i = {}),
            verb('next'),
            verb('throw'),
            verb('return'),
            (i[Symbol.asyncIterator] = function () {
              return this;
            }),
            i);
        function verb(n) {
          i[n] =
            o[n] &&
            function (v) {
              return new Promise(function (resolve, reject) {
                (v = o[n](v)), settle(resolve, reject, v.done, v.value);
              });
            };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function (v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, 'raw', { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          };
      var ownKeys = function (o) {
        ownKeys =
          Object.getOwnPropertyNames ||
          function (o2) {
            var ar = [];
            for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
            return ar;
          };
        return ownKeys(o);
      };
      __importStar = function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++)
            if (k[i] !== 'default') __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
      __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot read private member from an object whose class did not declare it');
        return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === 'm') throw new TypeError('Private method is not writable');
        if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');
        if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError('Cannot write private member to an object whose class did not declare it');
        return kind === 'a' ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== 'object' && typeof receiver !== 'function'))
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === 'function' ? receiver === state : state.has(receiver);
      };
      __addDisposableResource = function (env, value, async) {
        if (value !== null && value !== void 0) {
          if (typeof value !== 'object' && typeof value !== 'function') throw new TypeError('Object expected.');
          var dispose, inner;
          if (async) {
            if (!Symbol.asyncDispose) throw new TypeError('Symbol.asyncDispose is not defined.');
            dispose = value[Symbol.asyncDispose];
          }
          if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError('Symbol.dispose is not defined.');
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
          }
          if (typeof dispose !== 'function') throw new TypeError('Object not disposable.');
          if (inner)
            dispose = function () {
              try {
                inner.call(this);
              } catch (e) {
                return Promise.reject(e);
              }
            };
          env.stack.push({ value, dispose, async });
        } else if (async) {
          env.stack.push({ async: true });
        }
        return value;
      };
      var _SuppressedError =
        typeof SuppressedError === 'function'
          ? SuppressedError
          : function (error, suppressed, message) {
              var e = new Error(message);
              return (e.name = 'SuppressedError'), (e.error = error), (e.suppressed = suppressed), e;
            };
      __disposeResources = function (env) {
        function fail(e) {
          env.error = env.hasError ? new _SuppressedError(e, env.error, 'An error was suppressed during disposal.') : e;
          env.hasError = true;
        }
        var r,
          s = 0;
        function next() {
          while ((r = env.stack.pop())) {
            try {
              if (!r.async && s === 1) return (s = 0), env.stack.push(r), Promise.resolve().then(next);
              if (r.dispose) {
                var result = r.dispose.call(r.value);
                if (r.async)
                  return (
                    (s |= 2),
                    Promise.resolve(result).then(next, function (e) {
                      fail(e);
                      return next();
                    })
                  );
              } else s |= 1;
            } catch (e) {
              fail(e);
            }
          }
          if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
          if (env.hasError) throw env.error;
        }
        return next();
      };
      __rewriteRelativeImportExtension = function (path, preserveJsx) {
        if (typeof path === 'string' && /^\.\.?\//.test(path)) {
          return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {
            return tsx
              ? preserveJsx
                ? '.jsx'
                : '.js'
              : d && (!ext || !cm)
              ? m
              : d + ext + '.' + cm.toLowerCase() + 'js';
          });
        }
        return path;
      };
      exporter('__extends', __extends);
      exporter('__assign', __assign);
      exporter('__rest', __rest);
      exporter('__decorate', __decorate);
      exporter('__param', __param);
      exporter('__esDecorate', __esDecorate);
      exporter('__runInitializers', __runInitializers);
      exporter('__propKey', __propKey);
      exporter('__setFunctionName', __setFunctionName);
      exporter('__metadata', __metadata);
      exporter('__awaiter', __awaiter);
      exporter('__generator', __generator);
      exporter('__exportStar', __exportStar);
      exporter('__createBinding', __createBinding);
      exporter('__values', __values);
      exporter('__read', __read);
      exporter('__spread', __spread);
      exporter('__spreadArrays', __spreadArrays);
      exporter('__spreadArray', __spreadArray);
      exporter('__await', __await);
      exporter('__asyncGenerator', __asyncGenerator);
      exporter('__asyncDelegator', __asyncDelegator);
      exporter('__asyncValues', __asyncValues);
      exporter('__makeTemplateObject', __makeTemplateObject);
      exporter('__importStar', __importStar);
      exporter('__importDefault', __importDefault);
      exporter('__classPrivateFieldGet', __classPrivateFieldGet);
      exporter('__classPrivateFieldSet', __classPrivateFieldSet);
      exporter('__classPrivateFieldIn', __classPrivateFieldIn);
      exporter('__addDisposableResource', __addDisposableResource);
      exporter('__disposeResources', __disposeResources);
      exporter('__rewriteRelativeImportExtension', __rewriteRelativeImportExtension);
    });
  },
});

// node_modules/@aws-crypto/util/node_modules/@smithy/is-array-buffer/dist-cjs/index.js
var require_dist_cjs56 = __commonJS({
  'node_modules/@aws-crypto/util/node_modules/@smithy/is-array-buffer/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var src_exports = {};
    __export(src_exports, {
      isArrayBuffer: () => isArrayBuffer,
    });
    module2.exports = __toCommonJS(src_exports);
    var isArrayBuffer = /* @__PURE__ */ __name(
      (arg) =>
        (typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer) ||
        Object.prototype.toString.call(arg) === '[object ArrayBuffer]',
      'isArrayBuffer'
    );
  },
});

// node_modules/@aws-crypto/util/node_modules/@smithy/util-buffer-from/dist-cjs/index.js
var require_dist_cjs57 = __commonJS({
  'node_modules/@aws-crypto/util/node_modules/@smithy/util-buffer-from/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var src_exports = {};
    __export(src_exports, {
      fromArrayBuffer: () => fromArrayBuffer,
      fromString: () => fromString,
    });
    module2.exports = __toCommonJS(src_exports);
    var import_is_array_buffer = require_dist_cjs56();
    var import_buffer = require('buffer');
    var fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return import_buffer.Buffer.from(input, offset, length);
    }, 'fromArrayBuffer');
    var fromString = /* @__PURE__ */ __name((input, encoding) => {
      if (typeof input !== 'string') {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
    }, 'fromString');
  },
});

// node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-cjs/index.js
var require_dist_cjs58 = __commonJS({
  'node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var src_exports = {};
    __export(src_exports, {
      fromUtf8: () => fromUtf8,
      toUint8Array: () => toUint8Array,
      toUtf8: () => toUtf8,
    });
    module2.exports = __toCommonJS(src_exports);
    var import_util_buffer_from = require_dist_cjs57();
    var fromUtf8 = /* @__PURE__ */ __name((input) => {
      const buf = (0, import_util_buffer_from.fromString)(input, 'utf8');
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }, 'fromUtf8');
    var toUint8Array = /* @__PURE__ */ __name((data) => {
      if (typeof data === 'string') {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }, 'toUint8Array');
    var toUtf8 = /* @__PURE__ */ __name((input) => {
      if (typeof input === 'string') {
        return input;
      }
      if (typeof input !== 'object' || typeof input.byteOffset !== 'number' || typeof input.byteLength !== 'number') {
        throw new Error('@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.');
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString(
        'utf8'
      );
    }, 'toUtf8');
  },
});

// node_modules/@aws-crypto/util/build/main/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  'node_modules/@aws-crypto/util/build/main/convertToBuffer.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_1 = require_dist_cjs58();
    var fromUtf8 =
      typeof Buffer !== 'undefined' && Buffer.from
        ? function (input) {
            return Buffer.from(input, 'utf8');
          }
        : util_utf8_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array) return data;
      if (typeof data === 'string') {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer;
  },
});

// node_modules/@aws-crypto/util/build/main/isEmptyData.js
var require_isEmptyData = __commonJS({
  'node_modules/@aws-crypto/util/build/main/isEmptyData.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === 'string') {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  },
});

// node_modules/@aws-crypto/util/build/main/numToUint8.js
var require_numToUint8 = __commonJS({
  'node_modules/@aws-crypto/util/build/main/numToUint8.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([(num & 4278190080) >> 24, (num & 16711680) >> 16, (num & 65280) >> 8, num & 255]);
    }
    exports.numToUint8 = numToUint8;
  },
});

// node_modules/@aws-crypto/util/build/main/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  'node_modules/@aws-crypto/util/build/main/uint32ArrayFrom.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  },
});

// node_modules/@aws-crypto/util/build/main/index.js
var require_main = __commonJS({
  'node_modules/@aws-crypto/util/build/main/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports, 'convertToBuffer', {
      enumerable: true,
      get: function () {
        return convertToBuffer_1.convertToBuffer;
      },
    });
    var isEmptyData_1 = require_isEmptyData();
    Object.defineProperty(exports, 'isEmptyData', {
      enumerable: true,
      get: function () {
        return isEmptyData_1.isEmptyData;
      },
    });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports, 'numToUint8', {
      enumerable: true,
      get: function () {
        return numToUint8_1.numToUint8;
      },
    });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports, 'uint32ArrayFrom', {
      enumerable: true,
      get: function () {
        return uint32ArrayFrom_1.uint32ArrayFrom;
      },
    });
  },
});

// node_modules/@aws-crypto/crc32/build/main/aws_crc32.js
var require_aws_crc32 = __commonJS({
  'node_modules/@aws-crypto/crc32/build/main/aws_crc32.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AwsCrc32 = void 0;
    var tslib_1 = require_tslib2();
    var util_1 = require_main();
    var index_1 = require_main2();
    var AwsCrc32 = (function () {
      function AwsCrc322() {
        this.crc32 = new index_1.Crc32();
      }
      AwsCrc322.prototype.update = function (toHash) {
        if ((0, util_1.isEmptyData)(toHash)) return;
        this.crc32.update((0, util_1.convertToBuffer)(toHash));
      };
      AwsCrc322.prototype.digest = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
          return tslib_1.__generator(this, function (_a) {
            return [2, (0, util_1.numToUint8)(this.crc32.digest())];
          });
        });
      };
      AwsCrc322.prototype.reset = function () {
        this.crc32 = new index_1.Crc32();
      };
      return AwsCrc322;
    })();
    exports.AwsCrc32 = AwsCrc32;
  },
});

// node_modules/@aws-crypto/crc32/build/main/index.js
var require_main2 = __commonJS({
  'node_modules/@aws-crypto/crc32/build/main/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AwsCrc32 = exports.Crc32 = exports.crc32 = void 0;
    var tslib_1 = require_tslib2();
    var util_1 = require_main();
    function crc32(data) {
      return new Crc32().update(data).digest();
    }
    exports.crc32 = crc32;
    var Crc32 = (function () {
      function Crc322() {
        this.checksum = 4294967295;
      }
      Crc322.prototype.update = function (data) {
        var e_1, _a;
        try {
          for (
            var data_1 = tslib_1.__values(data), data_1_1 = data_1.next();
            !data_1_1.done;
            data_1_1 = data_1.next()
          ) {
            var byte = data_1_1.value;
            this.checksum = (this.checksum >>> 8) ^ lookupTable[(this.checksum ^ byte) & 255];
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
        return this;
      };
      Crc322.prototype.digest = function () {
        return (this.checksum ^ 4294967295) >>> 0;
      };
      return Crc322;
    })();
    exports.Crc32 = Crc32;
    var a_lookUpTable = [
      0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324,
      3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648,
      2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636,
      335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145,
      1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101,
      3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705,
      3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565,
      1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290,
      251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866,
      2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202,
      4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538,
      1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467,
      855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635,
      3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443,
      3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523,
      3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580,
      2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920,
      282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732,
      1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512,
      3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109,
      3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625,
      752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371,
      2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012,
      4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368,
      1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612,
      956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3,
      2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493,
      3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065,
      1510334235, 755167117,
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
    var aws_crc32_1 = require_aws_crc32();
    Object.defineProperty(exports, 'AwsCrc32', {
      enumerable: true,
      get: function () {
        return aws_crc32_1.AwsCrc32;
      },
    });
  },
});

// node_modules/@smithy/eventstream-codec/dist-cjs/index.js
var require_dist_cjs59 = __commonJS({
  'node_modules/@smithy/eventstream-codec/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      EventStreamCodec: () => EventStreamCodec,
      HeaderMarshaller: () => HeaderMarshaller,
      Int64: () => Int64,
      MessageDecoderStream: () => MessageDecoderStream,
      MessageEncoderStream: () => MessageEncoderStream,
      SmithyMessageDecoderStream: () => SmithyMessageDecoderStream,
      SmithyMessageEncoderStream: () => SmithyMessageEncoderStream,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_crc322 = require_main2();
    var import_util_hex_encoding = require_dist_cjs16();
    var _a;
    var Int64 =
      ((_a = class {
        constructor(bytes) {
          this.bytes = bytes;
          if (bytes.byteLength !== 8) {
            throw new Error('Int64 buffers must be exactly 8 bytes');
          }
        }
        static fromNumber(number) {
          if (number > 9223372036854776e3 || number < -9223372036854776e3) {
            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
          }
          const bytes = new Uint8Array(8);
          for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
            bytes[i] = remaining;
          }
          if (number < 0) {
            negate(bytes);
          }
          return new _a(bytes);
        }
        valueOf() {
          const bytes = this.bytes.slice(0);
          const negative = bytes[0] & 128;
          if (negative) {
            negate(bytes);
          }
          return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);
        }
        toString() {
          return String(this.valueOf());
        }
      }),
      (() => {
        __name(_a, 'Int64');
      })(),
      _a);
    function negate(bytes) {
      for (let i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0) break;
      }
    }
    __name(negate, 'negate');
    var _a2;
    var HeaderMarshaller =
      ((_a2 = class {
        constructor(toUtf8, fromUtf8) {
          this.toUtf8 = toUtf8;
          this.fromUtf8 = fromUtf8;
        }
        format(headers) {
          const chunks = [];
          for (const headerName of Object.keys(headers)) {
            const bytes = this.fromUtf8(headerName);
            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
          }
          const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
          let position = 0;
          for (const chunk of chunks) {
            out.set(chunk, position);
            position += chunk.byteLength;
          }
          return out;
        }
        formatHeaderValue(header) {
          switch (header.type) {
            case 'boolean':
              return Uint8Array.from([header.value ? 0 : 1]);
            case 'byte':
              return Uint8Array.from([2, header.value]);
            case 'short':
              const shortView = new DataView(new ArrayBuffer(3));
              shortView.setUint8(0, 3);
              shortView.setInt16(1, header.value, false);
              return new Uint8Array(shortView.buffer);
            case 'integer':
              const intView = new DataView(new ArrayBuffer(5));
              intView.setUint8(0, 4);
              intView.setInt32(1, header.value, false);
              return new Uint8Array(intView.buffer);
            case 'long':
              const longBytes = new Uint8Array(9);
              longBytes[0] = 5;
              longBytes.set(header.value.bytes, 1);
              return longBytes;
            case 'binary':
              const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
              binView.setUint8(0, 6);
              binView.setUint16(1, header.value.byteLength, false);
              const binBytes = new Uint8Array(binView.buffer);
              binBytes.set(header.value, 3);
              return binBytes;
            case 'string':
              const utf8Bytes = this.fromUtf8(header.value);
              const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
              strView.setUint8(0, 7);
              strView.setUint16(1, utf8Bytes.byteLength, false);
              const strBytes = new Uint8Array(strView.buffer);
              strBytes.set(utf8Bytes, 3);
              return strBytes;
            case 'timestamp':
              const tsBytes = new Uint8Array(9);
              tsBytes[0] = 8;
              tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
              return tsBytes;
            case 'uuid':
              if (!UUID_PATTERN.test(header.value)) {
                throw new Error(`Invalid UUID received: ${header.value}`);
              }
              const uuidBytes = new Uint8Array(17);
              uuidBytes[0] = 9;
              uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\-/g, '')), 1);
              return uuidBytes;
          }
        }
        parse(headers) {
          const out = {};
          let position = 0;
          while (position < headers.byteLength) {
            const nameLength = headers.getUint8(position++);
            const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
            position += nameLength;
            switch (headers.getUint8(position++)) {
              case 0:
                out[name] = {
                  type: BOOLEAN_TAG,
                  value: true,
                };
                break;
              case 1:
                out[name] = {
                  type: BOOLEAN_TAG,
                  value: false,
                };
                break;
              case 2:
                out[name] = {
                  type: BYTE_TAG,
                  value: headers.getInt8(position++),
                };
                break;
              case 3:
                out[name] = {
                  type: SHORT_TAG,
                  value: headers.getInt16(position, false),
                };
                position += 2;
                break;
              case 4:
                out[name] = {
                  type: INT_TAG,
                  value: headers.getInt32(position, false),
                };
                position += 4;
                break;
              case 5:
                out[name] = {
                  type: LONG_TAG,
                  value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),
                };
                position += 8;
                break;
              case 6:
                const binaryLength = headers.getUint16(position, false);
                position += 2;
                out[name] = {
                  type: BINARY_TAG,
                  value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),
                };
                position += binaryLength;
                break;
              case 7:
                const stringLength = headers.getUint16(position, false);
                position += 2;
                out[name] = {
                  type: STRING_TAG,
                  value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),
                };
                position += stringLength;
                break;
              case 8:
                out[name] = {
                  type: TIMESTAMP_TAG,
                  value: new Date(
                    new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()
                  ),
                };
                position += 8;
                break;
              case 9:
                const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
                position += 16;
                out[name] = {
                  type: UUID_TAG,
                  value: `${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(0, 4))}-${(0,
                  import_util_hex_encoding.toHex)(uuidBytes.subarray(4, 6))}-${(0, import_util_hex_encoding.toHex)(
                    uuidBytes.subarray(6, 8)
                  )}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(8, 10))}-${(0,
                  import_util_hex_encoding.toHex)(uuidBytes.subarray(10))}`,
                };
                break;
              default:
                throw new Error(`Unrecognized header type tag`);
            }
          }
          return out;
        }
      }),
      (() => {
        __name(_a2, 'HeaderMarshaller');
      })(),
      _a2);
    var BOOLEAN_TAG = 'boolean';
    var BYTE_TAG = 'byte';
    var SHORT_TAG = 'short';
    var INT_TAG = 'integer';
    var LONG_TAG = 'long';
    var BINARY_TAG = 'binary';
    var STRING_TAG = 'string';
    var TIMESTAMP_TAG = 'timestamp';
    var UUID_TAG = 'uuid';
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    var import_crc32 = require_main2();
    var PRELUDE_MEMBER_LENGTH = 4;
    var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    var CHECKSUM_LENGTH = 4;
    var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
    function splitMessage({ byteLength, byteOffset, buffer }) {
      if (byteLength < MINIMUM_MESSAGE_LENGTH) {
        throw new Error('Provided message too short to accommodate event stream message overhead');
      }
      const view = new DataView(buffer, byteOffset, byteLength);
      const messageLength = view.getUint32(0, false);
      if (byteLength !== messageLength) {
        throw new Error('Reported message length does not match received message length');
      }
      const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
      const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
      const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
      const checksummer = new import_crc32.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
      if (expectedPreludeChecksum !== checksummer.digest()) {
        throw new Error(
          `The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`
        );
      }
      checksummer.update(
        new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH))
      );
      if (expectedMessageChecksum !== checksummer.digest()) {
        throw new Error(
          `The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`
        );
      }
      return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(
          buffer,
          byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength,
          messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)
        ),
      };
    }
    __name(splitMessage, 'splitMessage');
    var _a3;
    var EventStreamCodec =
      ((_a3 = class {
        constructor(toUtf8, fromUtf8) {
          this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);
          this.messageBuffer = [];
          this.isEndOfStream = false;
        }
        feed(message) {
          this.messageBuffer.push(this.decode(message));
        }
        endOfStream() {
          this.isEndOfStream = true;
        }
        getMessage() {
          const message = this.messageBuffer.pop();
          const isEndOfStream = this.isEndOfStream;
          return {
            getMessage() {
              return message;
            },
            isEndOfStream() {
              return isEndOfStream;
            },
          };
        }
        getAvailableMessages() {
          const messages = this.messageBuffer;
          this.messageBuffer = [];
          const isEndOfStream = this.isEndOfStream;
          return {
            getMessages() {
              return messages;
            },
            isEndOfStream() {
              return isEndOfStream;
            },
          };
        }
        encode({ headers: rawHeaders, body }) {
          const headers = this.headerMarshaller.format(rawHeaders);
          const length = headers.byteLength + body.byteLength + 16;
          const out = new Uint8Array(length);
          const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
          const checksum = new import_crc322.Crc32();
          view.setUint32(0, length, false);
          view.setUint32(4, headers.byteLength, false);
          view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
          out.set(headers, 12);
          out.set(body, headers.byteLength + 12);
          view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
          return out;
        }
        decode(message) {
          const { headers, body } = splitMessage(message);
          return { headers: this.headerMarshaller.parse(headers), body };
        }
        formatHeaders(rawHeaders) {
          return this.headerMarshaller.format(rawHeaders);
        }
      }),
      (() => {
        __name(_a3, 'EventStreamCodec');
      })(),
      _a3);
    var _a4;
    var MessageDecoderStream =
      ((_a4 = class {
        constructor(options) {
          this.options = options;
        }
        [Symbol.asyncIterator]() {
          return this.asyncIterator();
        }
        async *asyncIterator() {
          for await (const bytes of this.options.inputStream) {
            const decoded = this.options.decoder.decode(bytes);
            yield decoded;
          }
        }
      }),
      (() => {
        __name(_a4, 'MessageDecoderStream');
      })(),
      _a4);
    var _a5;
    var MessageEncoderStream =
      ((_a5 = class {
        constructor(options) {
          this.options = options;
        }
        [Symbol.asyncIterator]() {
          return this.asyncIterator();
        }
        async *asyncIterator() {
          for await (const msg of this.options.messageStream) {
            const encoded = this.options.encoder.encode(msg);
            yield encoded;
          }
          if (this.options.includeEndFrame) {
            yield new Uint8Array(0);
          }
        }
      }),
      (() => {
        __name(_a5, 'MessageEncoderStream');
      })(),
      _a5);
    var _a6;
    var SmithyMessageDecoderStream =
      ((_a6 = class {
        constructor(options) {
          this.options = options;
        }
        [Symbol.asyncIterator]() {
          return this.asyncIterator();
        }
        async *asyncIterator() {
          for await (const message of this.options.messageStream) {
            const deserialized = await this.options.deserializer(message);
            if (deserialized === void 0) continue;
            yield deserialized;
          }
        }
      }),
      (() => {
        __name(_a6, 'SmithyMessageDecoderStream');
      })(),
      _a6);
    var _a7;
    var SmithyMessageEncoderStream =
      ((_a7 = class {
        constructor(options) {
          this.options = options;
        }
        [Symbol.asyncIterator]() {
          return this.asyncIterator();
        }
        async *asyncIterator() {
          for await (const chunk of this.options.inputStream) {
            const payloadBuf = this.options.serializer(chunk);
            yield payloadBuf;
          }
        }
      }),
      (() => {
        __name(_a7, 'SmithyMessageEncoderStream');
      })(),
      _a7);
  },
});

// node_modules/@smithy/eventstream-serde-universal/dist-cjs/index.js
var require_dist_cjs60 = __commonJS({
  'node_modules/@smithy/eventstream-serde-universal/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      EventStreamMarshaller: () => EventStreamMarshaller,
      eventStreamSerdeProvider: () => eventStreamSerdeProvider,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_eventstream_codec = require_dist_cjs59();
    function getChunkedStream(source) {
      let currentMessageTotalLength = 0;
      let currentMessagePendingLength = 0;
      let currentMessage = null;
      let messageLengthBuffer = null;
      const allocateMessage = /* @__PURE__ */ __name((size) => {
        if (typeof size !== 'number') {
          throw new Error('Attempted to allocate an event message where size was not a number: ' + size);
        }
        currentMessageTotalLength = size;
        currentMessagePendingLength = 4;
        currentMessage = new Uint8Array(size);
        const currentMessageView = new DataView(currentMessage.buffer);
        currentMessageView.setUint32(0, size, false);
      }, 'allocateMessage');
      const iterator = /* @__PURE__ */ __name(async function* () {
        const sourceIterator = source[Symbol.asyncIterator]();
        while (true) {
          const { value, done } = await sourceIterator.next();
          if (done) {
            if (!currentMessageTotalLength) {
              return;
            } else if (currentMessageTotalLength === currentMessagePendingLength) {
              yield currentMessage;
            } else {
              throw new Error('Truncated event message received.');
            }
            return;
          }
          const chunkLength = value.length;
          let currentOffset = 0;
          while (currentOffset < chunkLength) {
            if (!currentMessage) {
              const bytesRemaining = chunkLength - currentOffset;
              if (!messageLengthBuffer) {
                messageLengthBuffer = new Uint8Array(4);
              }
              const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
              messageLengthBuffer.set(
                value.slice(currentOffset, currentOffset + numBytesForTotal),
                currentMessagePendingLength
              );
              currentMessagePendingLength += numBytesForTotal;
              currentOffset += numBytesForTotal;
              if (currentMessagePendingLength < 4) {
                break;
              }
              allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
              messageLengthBuffer = null;
            }
            const numBytesToWrite = Math.min(
              currentMessageTotalLength - currentMessagePendingLength,
              chunkLength - currentOffset
            );
            currentMessage.set(
              value.slice(currentOffset, currentOffset + numBytesToWrite),
              currentMessagePendingLength
            );
            currentMessagePendingLength += numBytesToWrite;
            currentOffset += numBytesToWrite;
            if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
              yield currentMessage;
              currentMessage = null;
              currentMessageTotalLength = 0;
              currentMessagePendingLength = 0;
            }
          }
        }
      }, 'iterator');
      return {
        [Symbol.asyncIterator]: iterator,
      };
    }
    __name(getChunkedStream, 'getChunkedStream');
    function getMessageUnmarshaller(deserializer, toUtf8) {
      return async function (message) {
        const { value: messageType } = message.headers[':message-type'];
        if (messageType === 'error') {
          const unmodeledError = new Error(message.headers[':error-message'].value || 'UnknownError');
          unmodeledError.name = message.headers[':error-code'].value;
          throw unmodeledError;
        } else if (messageType === 'exception') {
          const code = message.headers[':exception-type'].value;
          const exception = { [code]: message };
          const deserializedException = await deserializer(exception);
          if (deserializedException.$unknown) {
            const error = new Error(toUtf8(message.body));
            error.name = code;
            throw error;
          }
          throw deserializedException[code];
        } else if (messageType === 'event') {
          const event = {
            [message.headers[':event-type'].value]: message,
          };
          const deserialized = await deserializer(event);
          if (deserialized.$unknown) return;
          return deserialized;
        } else {
          throw Error(`Unrecognizable event type: ${message.headers[':event-type'].value}`);
        }
      };
    }
    __name(getMessageUnmarshaller, 'getMessageUnmarshaller');
    var _a;
    var EventStreamMarshaller =
      ((_a = class {
        constructor({ utf8Encoder, utf8Decoder }) {
          this.eventStreamCodec = new import_eventstream_codec.EventStreamCodec(utf8Encoder, utf8Decoder);
          this.utfEncoder = utf8Encoder;
        }
        deserialize(body, deserializer) {
          const inputStream = getChunkedStream(body);
          return new import_eventstream_codec.SmithyMessageDecoderStream({
            messageStream: new import_eventstream_codec.MessageDecoderStream({
              inputStream,
              decoder: this.eventStreamCodec,
            }),
            deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder),
          });
        }
        serialize(inputStream, serializer) {
          return new import_eventstream_codec.MessageEncoderStream({
            messageStream: new import_eventstream_codec.SmithyMessageEncoderStream({ inputStream, serializer }),
            encoder: this.eventStreamCodec,
            includeEndFrame: true,
          });
        }
      }),
      (() => {
        __name(_a, 'EventStreamMarshaller');
      })(),
      _a);
    var eventStreamSerdeProvider = /* @__PURE__ */ __name(
      (options) => new EventStreamMarshaller(options),
      'eventStreamSerdeProvider'
    );
  },
});

// node_modules/@smithy/eventstream-serde-node/dist-cjs/index.js
var require_dist_cjs61 = __commonJS({
  'node_modules/@smithy/eventstream-serde-node/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      EventStreamMarshaller: () => EventStreamMarshaller,
      eventStreamSerdeProvider: () => eventStreamSerdeProvider,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_eventstream_serde_universal = require_dist_cjs60();
    var import_stream = require('stream');
    async function* readabletoIterable(readStream) {
      let streamEnded = false;
      let generationEnded = false;
      const records = new Array();
      readStream.on('error', (err) => {
        if (!streamEnded) {
          streamEnded = true;
        }
        if (err) {
          throw err;
        }
      });
      readStream.on('data', (data) => {
        records.push(data);
      });
      readStream.on('end', () => {
        streamEnded = true;
      });
      while (!generationEnded) {
        const value = await new Promise((resolve) => setTimeout(() => resolve(records.shift()), 0));
        if (value) {
          yield value;
        }
        generationEnded = streamEnded && records.length === 0;
      }
    }
    __name(readabletoIterable, 'readabletoIterable');
    var _a;
    var EventStreamMarshaller =
      ((_a = class {
        constructor({ utf8Encoder, utf8Decoder }) {
          this.universalMarshaller = new import_eventstream_serde_universal.EventStreamMarshaller({
            utf8Decoder,
            utf8Encoder,
          });
        }
        deserialize(body, deserializer) {
          const bodyIterable = typeof body[Symbol.asyncIterator] === 'function' ? body : readabletoIterable(body);
          return this.universalMarshaller.deserialize(bodyIterable, deserializer);
        }
        serialize(input, serializer) {
          return import_stream.Readable.from(this.universalMarshaller.serialize(input, serializer));
        }
      }),
      (() => {
        __name(_a, 'EventStreamMarshaller');
      })(),
      _a);
    var eventStreamSerdeProvider = /* @__PURE__ */ __name(
      (options) => new EventStreamMarshaller(options),
      'eventStreamSerdeProvider'
    );
  },
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/ruleset.js
var require_ruleset4 = __commonJS({
  'node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/ruleset.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ruleSet = void 0;
    var s = 'required';
    var t = 'fn';
    var u = 'argv';
    var v = 'ref';
    var a = true;
    var b = 'isSet';
    var c = 'booleanEquals';
    var d = 'error';
    var e = 'endpoint';
    var f = 'tree';
    var g = 'PartitionResult';
    var h = { [s]: false, type: 'String' };
    var i = { [s]: true, default: false, type: 'Boolean' };
    var j = { [v]: 'Endpoint' };
    var k = { [t]: c, [u]: [{ [v]: 'UseFIPS' }, true] };
    var l = { [t]: c, [u]: [{ [v]: 'UseDualStack' }, true] };
    var m = {};
    var n = { [t]: 'getAttr', [u]: [{ [v]: g }, 'supportsFIPS'] };
    var o = { [t]: c, [u]: [true, { [t]: 'getAttr', [u]: [{ [v]: g }, 'supportsDualStack'] }] };
    var p = [k];
    var q = [l];
    var r = [{ [v]: 'Region' }];
    var _data = {
      version: '1.0',
      parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h },
      rules: [
        {
          conditions: [{ [t]: b, [u]: [j] }],
          rules: [
            { conditions: p, error: 'Invalid Configuration: FIPS and custom endpoint are not supported', type: d },
            { conditions: q, error: 'Invalid Configuration: Dualstack and custom endpoint are not supported', type: d },
            { endpoint: { url: j, properties: m, headers: m }, type: e },
          ],
          type: f,
        },
        {
          conditions: [{ [t]: b, [u]: r }],
          rules: [
            {
              conditions: [{ [t]: 'aws.partition', [u]: r, assign: g }],
              rules: [
                {
                  conditions: [k, l],
                  rules: [
                    {
                      conditions: [{ [t]: c, [u]: [a, n] }, o],
                      rules: [
                        {
                          endpoint: {
                            url: 'https://lambda-fips.{Region}.{PartitionResult#dualStackDnsSuffix}',
                            properties: m,
                            headers: m,
                          },
                          type: e,
                        },
                      ],
                      type: f,
                    },
                    {
                      error: 'FIPS and DualStack are enabled, but this partition does not support one or both',
                      type: d,
                    },
                  ],
                  type: f,
                },
                {
                  conditions: p,
                  rules: [
                    {
                      conditions: [{ [t]: c, [u]: [n, a] }],
                      rules: [
                        {
                          endpoint: {
                            url: 'https://lambda-fips.{Region}.{PartitionResult#dnsSuffix}',
                            properties: m,
                            headers: m,
                          },
                          type: e,
                        },
                      ],
                      type: f,
                    },
                    { error: 'FIPS is enabled but this partition does not support FIPS', type: d },
                  ],
                  type: f,
                },
                {
                  conditions: q,
                  rules: [
                    {
                      conditions: [o],
                      rules: [
                        {
                          endpoint: {
                            url: 'https://lambda.{Region}.{PartitionResult#dualStackDnsSuffix}',
                            properties: m,
                            headers: m,
                          },
                          type: e,
                        },
                      ],
                      type: f,
                    },
                    { error: 'DualStack is enabled but this partition does not support DualStack', type: d },
                  ],
                  type: f,
                },
                {
                  endpoint: { url: 'https://lambda.{Region}.{PartitionResult#dnsSuffix}', properties: m, headers: m },
                  type: e,
                },
              ],
              type: f,
            },
          ],
          type: f,
        },
        { error: 'Invalid Configuration: Missing Region', type: d },
      ],
    };
    exports.ruleSet = _data;
  },
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver4 = __commonJS({
  'node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/endpointResolver.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs22();
    var util_endpoints_2 = require_dist_cjs19();
    var ruleset_1 = require_ruleset4();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ['Endpoint', 'Region', 'UseDualStack', 'UseFIPS'],
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () =>
        (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
          endpointParams,
          logger: context.logger,
        })
      );
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  },
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared4 = __commonJS({
  'node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = require_dist_cjs29();
    var smithy_client_1 = require_dist_cjs27();
    var url_parser_1 = require_dist_cjs21();
    var util_base64_1 = require_dist_cjs11();
    var util_utf8_1 = require_dist_cjs10();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider();
    var endpointResolver_1 = require_endpointResolver4();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
      return {
        apiVersion: '2015-03-31',
        base64Decoder: (_a = config == null ? void 0 : config.base64Decoder) != null ? _a : util_base64_1.fromBase64,
        base64Encoder: (_b = config == null ? void 0 : config.base64Encoder) != null ? _b : util_base64_1.toBase64,
        disableHostPrefix: (_c = config == null ? void 0 : config.disableHostPrefix) != null ? _c : false,
        endpointProvider:
          (_d = config == null ? void 0 : config.endpointProvider) != null
            ? _d
            : endpointResolver_1.defaultEndpointResolver,
        extensions: (_e = config == null ? void 0 : config.extensions) != null ? _e : [],
        httpAuthSchemeProvider:
          (_f = config == null ? void 0 : config.httpAuthSchemeProvider) != null
            ? _f
            : httpAuthSchemeProvider_1.defaultLambdaHttpAuthSchemeProvider,
        httpAuthSchemes:
          (_g = config == null ? void 0 : config.httpAuthSchemes) != null
            ? _g
            : [
                {
                  schemeId: 'aws.auth#sigv4',
                  identityProvider: (ipc) => ipc.getIdentityProvider('aws.auth#sigv4'),
                  signer: new core_1.AwsSdkSigV4Signer(),
                },
              ],
        logger: (_h = config == null ? void 0 : config.logger) != null ? _h : new smithy_client_1.NoOpLogger(),
        serviceId: (_i = config == null ? void 0 : config.serviceId) != null ? _i : 'Lambda',
        urlParser: (_j = config == null ? void 0 : config.urlParser) != null ? _j : url_parser_1.parseUrl,
        utf8Decoder: (_k = config == null ? void 0 : config.utf8Decoder) != null ? _k : util_utf8_1.fromUtf8,
        utf8Encoder: (_l = config == null ? void 0 : config.utf8Encoder) != null ? _l : util_utf8_1.toUtf8,
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js
var require_runtimeConfig4 = __commonJS({
  'node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package());
    var core_1 = require_dist_cjs29();
    var credential_provider_node_1 = require_dist_cjs55();
    var util_user_agent_node_1 = require_dist_cjs44();
    var config_resolver_1 = require_dist_cjs32();
    var eventstream_serde_node_1 = require_dist_cjs61();
    var hash_node_1 = require_dist_cjs45();
    var middleware_retry_1 = require_dist_cjs40();
    var node_config_provider_1 = require_dist_cjs36();
    var node_http_handler_1 = require_dist_cjs14();
    var util_body_length_node_1 = require_dist_cjs46();
    var util_retry_1 = require_dist_cjs39();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs27();
    var util_defaults_mode_node_1 = require_dist_cjs47();
    var smithy_client_2 = require_dist_cjs27();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      const loaderConfig = {
        profile: config == null ? void 0 : config.profile,
        logger: clientSharedValues.logger,
      };
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: 'node',
        defaultsMode,
        authSchemePreference:
          (_a = config == null ? void 0 : config.authSchemePreference) != null
            ? _a
            : (0, node_config_provider_1.loadConfig)(core_1.NODE_AUTH_SCHEME_PREFERENCE_OPTIONS, loaderConfig),
        bodyLengthChecker:
          (_b = config == null ? void 0 : config.bodyLengthChecker) != null
            ? _b
            : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider:
          (_c = config == null ? void 0 : config.credentialDefaultProvider) != null
            ? _c
            : credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider:
          (_d = config == null ? void 0 : config.defaultUserAgentProvider) != null
            ? _d
            : (0, util_user_agent_node_1.createDefaultUserAgentProvider)({
                serviceId: clientSharedValues.serviceId,
                clientVersion: package_json_1.default.version,
              }),
        eventStreamSerdeProvider:
          (_e = config == null ? void 0 : config.eventStreamSerdeProvider) != null
            ? _e
            : eventstream_serde_node_1.eventStreamSerdeProvider,
        maxAttempts:
          (_f = config == null ? void 0 : config.maxAttempts) != null
            ? _f
            : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS, config),
        region:
          (_g = config == null ? void 0 : config.region) != null
            ? _g
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
                __spreadValues(__spreadValues({}, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS), loaderConfig)
              ),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(
          (_h = config == null ? void 0 : config.requestHandler) != null ? _h : defaultConfigProvider
        ),
        retryMode:
          (_i = config == null ? void 0 : config.retryMode) != null
            ? _i
            : (0, node_config_provider_1.loadConfig)(
                __spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
                  default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE,
                }),
                config
              ),
        sha256: (_j = config == null ? void 0 : config.sha256) != null ? _j : hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (_k = config == null ? void 0 : config.streamCollector) != null ? _k : node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (_l = config == null ? void 0 : config.useDualstackEndpoint) != null
            ? _l
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,
                loaderConfig
              ),
        useFipsEndpoint:
          (_m = config == null ? void 0 : config.useFipsEndpoint) != null
            ? _m
            : (0, node_config_provider_1.loadConfig)(
                config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,
                loaderConfig
              ),
        userAgentAppId:
          (_n = config == null ? void 0 : config.userAgentAppId) != null
            ? _n
            : (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS, loaderConfig),
      });
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@smithy/util-waiter/dist-cjs/index.js
var require_dist_cjs62 = __commonJS({
  'node_modules/@smithy/util-waiter/dist-cjs/index.js'(exports, module2) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      WaiterState: () => WaiterState,
      checkExceptions: () => checkExceptions,
      createWaiter: () => createWaiter,
      waiterServiceDefaults: () => waiterServiceDefaults,
    });
    module2.exports = __toCommonJS(index_exports);
    var sleep = /* @__PURE__ */ __name((seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    }, 'sleep');
    var waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120,
    };
    var WaiterState = /* @__PURE__ */ ((WaiterState2) => {
      WaiterState2['ABORTED'] = 'ABORTED';
      WaiterState2['FAILURE'] = 'FAILURE';
      WaiterState2['SUCCESS'] = 'SUCCESS';
      WaiterState2['RETRY'] = 'RETRY';
      WaiterState2['TIMEOUT'] = 'TIMEOUT';
      return WaiterState2;
    })(WaiterState || {});
    var checkExceptions = /* @__PURE__ */ __name((result) => {
      if (result.state === 'ABORTED') {
        const abortError = new Error(
          `${JSON.stringify(
            __spreadProps(__spreadValues({}, result), {
              reason: 'Request was aborted',
            })
          )}`
        );
        abortError.name = 'AbortError';
        throw abortError;
      } else if (result.state === 'TIMEOUT') {
        const timeoutError = new Error(
          `${JSON.stringify(
            __spreadProps(__spreadValues({}, result), {
              reason: 'Waiter has timed out',
            })
          )}`
        );
        timeoutError.name = 'TimeoutError';
        throw timeoutError;
      } else if (result.state !== 'SUCCESS') {
        throw new Error(`${JSON.stringify(result)}`);
      }
      return result;
    }, 'checkExceptions');
    var exponentialBackoffWithJitter = /* @__PURE__ */ __name((minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling) return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    }, 'exponentialBackoffWithJitter');
    var randomInRange = /* @__PURE__ */ __name((min, max) => min + Math.random() * (max - min), 'randomInRange');
    var runPolling = /* @__PURE__ */ __name(
      async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
        var _a;
        const observedResponses = {};
        const { state, reason } = await acceptorChecks(client, input);
        if (reason) {
          const message = createMessageFromResponse(reason);
          observedResponses[message] |= 0;
          observedResponses[message] += 1;
        }
        if (state !== 'RETRY') {
          return { state, reason, observedResponses };
        }
        let currentAttempt = 1;
        const waitUntil = Date.now() + maxWaitTime * 1e3;
        const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
        while (true) {
          if (
            ((_a = abortController == null ? void 0 : abortController.signal) == null ? void 0 : _a.aborted) ||
            (abortSignal == null ? void 0 : abortSignal.aborted)
          ) {
            const message = 'AbortController signal aborted.';
            observedResponses[message] |= 0;
            observedResponses[message] += 1;
            return { state: 'ABORTED', observedResponses };
          }
          const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
          if (Date.now() + delay * 1e3 > waitUntil) {
            return { state: 'TIMEOUT', observedResponses };
          }
          await sleep(delay);
          const { state: state2, reason: reason2 } = await acceptorChecks(client, input);
          if (reason2) {
            const message = createMessageFromResponse(reason2);
            observedResponses[message] |= 0;
            observedResponses[message] += 1;
          }
          if (state2 !== 'RETRY') {
            return { state: state2, reason: reason2, observedResponses };
          }
          currentAttempt += 1;
        }
      },
      'runPolling'
    );
    var createMessageFromResponse = /* @__PURE__ */ __name((reason) => {
      var _a, _b, _c, _d, _e;
      if (reason == null ? void 0 : reason.$responseBodyText) {
        return `Deserialization error for body: ${reason.$responseBodyText}`;
      }
      if ((_a = reason == null ? void 0 : reason.$metadata) == null ? void 0 : _a.httpStatusCode) {
        if (reason.$response || reason.message) {
          return `${
            (_c = (_b = reason.$response.statusCode) != null ? _b : reason.$metadata.httpStatusCode) != null
              ? _c
              : 'Unknown'
          }: ${reason.message}`;
        }
        return `${reason.$metadata.httpStatusCode}: OK`;
      }
      return String(
        (_e = (_d = reason == null ? void 0 : reason.message) != null ? _d : JSON.stringify(reason)) != null
          ? _e
          : 'Unknown'
      );
    }, 'createMessageFromResponse');
    var validateWaiterOptions = /* @__PURE__ */ __name((options) => {
      if (options.maxWaitTime <= 0) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay <= 0) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay <= 0) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      }
    }, 'validateWaiterOptions');
    var abortTimeout = /* @__PURE__ */ __name((abortSignal) => {
      let onAbort;
      const promise = new Promise((resolve) => {
        onAbort = /* @__PURE__ */ __name(() => resolve({ state: 'ABORTED' }), 'onAbort');
        if (typeof abortSignal.addEventListener === 'function') {
          abortSignal.addEventListener('abort', onAbort);
        } else {
          abortSignal.onabort = onAbort;
        }
      });
      return {
        clearListener() {
          if (typeof abortSignal.removeEventListener === 'function') {
            abortSignal.removeEventListener('abort', onAbort);
          }
        },
        aborted: promise,
      };
    }, 'abortTimeout');
    var createWaiter = /* @__PURE__ */ __name(async (options, input, acceptorChecks) => {
      var _a;
      const params = __spreadValues(__spreadValues({}, waiterServiceDefaults), options);
      validateWaiterOptions(params);
      const exitConditions = [runPolling(params, input, acceptorChecks)];
      const finalize = [];
      if (options.abortSignal) {
        const { aborted, clearListener } = abortTimeout(options.abortSignal);
        finalize.push(clearListener);
        exitConditions.push(aborted);
      }
      if ((_a = options.abortController) == null ? void 0 : _a.signal) {
        const { aborted, clearListener } = abortTimeout(options.abortController.signal);
        finalize.push(clearListener);
        exitConditions.push(aborted);
      }
      return Promise.race(exitConditions).then((result) => {
        for (const fn of finalize) {
          fn();
        }
        return result;
      });
    }, 'createWaiter');
  },
});

// node_modules/@aws-sdk/client-lambda/dist-cjs/index.js
var require_dist_cjs63 = __commonJS({
  'node_modules/@aws-sdk/client-lambda/dist-cjs/index.js'(exports, module2) {
    'use strict';
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, 'name', { value, configurable: true });
    var __export = (target, all) => {
      for (var name in all) __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, {
              get: () => from[key],
              enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
            });
      }
      return to;
    };
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, '__esModule', { value: true }), mod);
    var index_exports = {};
    __export(index_exports, {
      AddLayerVersionPermissionCommand: () => AddLayerVersionPermissionCommand,
      AddPermissionCommand: () => AddPermissionCommand,
      ApplicationLogLevel: () => ApplicationLogLevel,
      Architecture: () => Architecture,
      CodeSigningConfigNotFoundException: () => CodeSigningConfigNotFoundException,
      CodeSigningPolicy: () => CodeSigningPolicy,
      CodeStorageExceededException: () => CodeStorageExceededException,
      CodeVerificationFailedException: () => CodeVerificationFailedException,
      CreateAliasCommand: () => CreateAliasCommand,
      CreateCodeSigningConfigCommand: () => CreateCodeSigningConfigCommand,
      CreateEventSourceMappingCommand: () => CreateEventSourceMappingCommand,
      CreateFunctionCommand: () => CreateFunctionCommand,
      CreateFunctionRequestFilterSensitiveLog: () => CreateFunctionRequestFilterSensitiveLog,
      CreateFunctionUrlConfigCommand: () => CreateFunctionUrlConfigCommand,
      DeleteAliasCommand: () => DeleteAliasCommand,
      DeleteCodeSigningConfigCommand: () => DeleteCodeSigningConfigCommand,
      DeleteEventSourceMappingCommand: () => DeleteEventSourceMappingCommand,
      DeleteFunctionCodeSigningConfigCommand: () => DeleteFunctionCodeSigningConfigCommand,
      DeleteFunctionCommand: () => DeleteFunctionCommand,
      DeleteFunctionConcurrencyCommand: () => DeleteFunctionConcurrencyCommand,
      DeleteFunctionEventInvokeConfigCommand: () => DeleteFunctionEventInvokeConfigCommand,
      DeleteFunctionUrlConfigCommand: () => DeleteFunctionUrlConfigCommand,
      DeleteLayerVersionCommand: () => DeleteLayerVersionCommand,
      DeleteProvisionedConcurrencyConfigCommand: () => DeleteProvisionedConcurrencyConfigCommand,
      EC2AccessDeniedException: () => EC2AccessDeniedException,
      EC2ThrottledException: () => EC2ThrottledException,
      EC2UnexpectedException: () => EC2UnexpectedException,
      EFSIOException: () => EFSIOException,
      EFSMountConnectivityException: () => EFSMountConnectivityException,
      EFSMountFailureException: () => EFSMountFailureException,
      EFSMountTimeoutException: () => EFSMountTimeoutException,
      ENILimitReachedException: () => ENILimitReachedException,
      EndPointType: () => EndPointType,
      EnvironmentErrorFilterSensitiveLog: () => EnvironmentErrorFilterSensitiveLog,
      EnvironmentFilterSensitiveLog: () => EnvironmentFilterSensitiveLog,
      EnvironmentResponseFilterSensitiveLog: () => EnvironmentResponseFilterSensitiveLog,
      EventSourceMappingMetric: () => EventSourceMappingMetric,
      EventSourcePosition: () => EventSourcePosition,
      FullDocument: () => FullDocument,
      FunctionCodeFilterSensitiveLog: () => FunctionCodeFilterSensitiveLog,
      FunctionConfigurationFilterSensitiveLog: () => FunctionConfigurationFilterSensitiveLog,
      FunctionResponseType: () => FunctionResponseType,
      FunctionUrlAuthType: () => FunctionUrlAuthType,
      FunctionVersion: () => FunctionVersion,
      GetAccountSettingsCommand: () => GetAccountSettingsCommand,
      GetAliasCommand: () => GetAliasCommand,
      GetCodeSigningConfigCommand: () => GetCodeSigningConfigCommand,
      GetEventSourceMappingCommand: () => GetEventSourceMappingCommand,
      GetFunctionCodeSigningConfigCommand: () => GetFunctionCodeSigningConfigCommand,
      GetFunctionCommand: () => GetFunctionCommand,
      GetFunctionConcurrencyCommand: () => GetFunctionConcurrencyCommand,
      GetFunctionConfigurationCommand: () => GetFunctionConfigurationCommand,
      GetFunctionEventInvokeConfigCommand: () => GetFunctionEventInvokeConfigCommand,
      GetFunctionRecursionConfigCommand: () => GetFunctionRecursionConfigCommand,
      GetFunctionResponseFilterSensitiveLog: () => GetFunctionResponseFilterSensitiveLog,
      GetFunctionUrlConfigCommand: () => GetFunctionUrlConfigCommand,
      GetLayerVersionByArnCommand: () => GetLayerVersionByArnCommand,
      GetLayerVersionCommand: () => GetLayerVersionCommand,
      GetLayerVersionPolicyCommand: () => GetLayerVersionPolicyCommand,
      GetPolicyCommand: () => GetPolicyCommand,
      GetProvisionedConcurrencyConfigCommand: () => GetProvisionedConcurrencyConfigCommand,
      GetRuntimeManagementConfigCommand: () => GetRuntimeManagementConfigCommand,
      ImageConfigErrorFilterSensitiveLog: () => ImageConfigErrorFilterSensitiveLog,
      ImageConfigResponseFilterSensitiveLog: () => ImageConfigResponseFilterSensitiveLog,
      InvalidCodeSignatureException: () => InvalidCodeSignatureException,
      InvalidParameterValueException: () => InvalidParameterValueException,
      InvalidRequestContentException: () => InvalidRequestContentException,
      InvalidRuntimeException: () => InvalidRuntimeException,
      InvalidSecurityGroupIDException: () => InvalidSecurityGroupIDException,
      InvalidSubnetIDException: () => InvalidSubnetIDException,
      InvalidZipFileException: () => InvalidZipFileException,
      InvocationRequestFilterSensitiveLog: () => InvocationRequestFilterSensitiveLog,
      InvocationResponseFilterSensitiveLog: () => InvocationResponseFilterSensitiveLog,
      InvocationType: () => InvocationType,
      InvokeAsyncCommand: () => InvokeAsyncCommand,
      InvokeAsyncRequestFilterSensitiveLog: () => InvokeAsyncRequestFilterSensitiveLog,
      InvokeCommand: () => InvokeCommand2,
      InvokeMode: () => InvokeMode,
      InvokeResponseStreamUpdateFilterSensitiveLog: () => InvokeResponseStreamUpdateFilterSensitiveLog,
      InvokeWithResponseStreamCommand: () => InvokeWithResponseStreamCommand,
      InvokeWithResponseStreamRequestFilterSensitiveLog: () => InvokeWithResponseStreamRequestFilterSensitiveLog,
      InvokeWithResponseStreamResponseEvent: () => InvokeWithResponseStreamResponseEvent,
      InvokeWithResponseStreamResponseEventFilterSensitiveLog: () =>
        InvokeWithResponseStreamResponseEventFilterSensitiveLog,
      InvokeWithResponseStreamResponseFilterSensitiveLog: () => InvokeWithResponseStreamResponseFilterSensitiveLog,
      KMSAccessDeniedException: () => KMSAccessDeniedException,
      KMSDisabledException: () => KMSDisabledException,
      KMSInvalidStateException: () => KMSInvalidStateException,
      KMSNotFoundException: () => KMSNotFoundException,
      KafkaSchemaRegistryAuthType: () => KafkaSchemaRegistryAuthType,
      KafkaSchemaValidationAttribute: () => KafkaSchemaValidationAttribute,
      Lambda: () => Lambda,
      LambdaClient: () => LambdaClient2,
      LambdaServiceException: () => LambdaServiceException,
      LastUpdateStatus: () => LastUpdateStatus,
      LastUpdateStatusReasonCode: () => LastUpdateStatusReasonCode,
      LayerVersionContentInputFilterSensitiveLog: () => LayerVersionContentInputFilterSensitiveLog,
      ListAliasesCommand: () => ListAliasesCommand,
      ListCodeSigningConfigsCommand: () => ListCodeSigningConfigsCommand,
      ListEventSourceMappingsCommand: () => ListEventSourceMappingsCommand,
      ListFunctionEventInvokeConfigsCommand: () => ListFunctionEventInvokeConfigsCommand,
      ListFunctionUrlConfigsCommand: () => ListFunctionUrlConfigsCommand,
      ListFunctionsByCodeSigningConfigCommand: () => ListFunctionsByCodeSigningConfigCommand,
      ListFunctionsCommand: () => ListFunctionsCommand,
      ListFunctionsResponseFilterSensitiveLog: () => ListFunctionsResponseFilterSensitiveLog,
      ListLayerVersionsCommand: () => ListLayerVersionsCommand,
      ListLayersCommand: () => ListLayersCommand,
      ListProvisionedConcurrencyConfigsCommand: () => ListProvisionedConcurrencyConfigsCommand,
      ListTagsCommand: () => ListTagsCommand,
      ListVersionsByFunctionCommand: () => ListVersionsByFunctionCommand,
      ListVersionsByFunctionResponseFilterSensitiveLog: () => ListVersionsByFunctionResponseFilterSensitiveLog,
      LogFormat: () => LogFormat,
      LogType: () => LogType,
      PackageType: () => PackageType,
      PolicyLengthExceededException: () => PolicyLengthExceededException,
      PreconditionFailedException: () => PreconditionFailedException,
      ProvisionedConcurrencyConfigNotFoundException: () => ProvisionedConcurrencyConfigNotFoundException,
      ProvisionedConcurrencyStatusEnum: () => ProvisionedConcurrencyStatusEnum,
      PublishLayerVersionCommand: () => PublishLayerVersionCommand,
      PublishLayerVersionRequestFilterSensitiveLog: () => PublishLayerVersionRequestFilterSensitiveLog,
      PublishVersionCommand: () => PublishVersionCommand,
      PutFunctionCodeSigningConfigCommand: () => PutFunctionCodeSigningConfigCommand,
      PutFunctionConcurrencyCommand: () => PutFunctionConcurrencyCommand,
      PutFunctionEventInvokeConfigCommand: () => PutFunctionEventInvokeConfigCommand,
      PutFunctionRecursionConfigCommand: () => PutFunctionRecursionConfigCommand,
      PutProvisionedConcurrencyConfigCommand: () => PutProvisionedConcurrencyConfigCommand,
      PutRuntimeManagementConfigCommand: () => PutRuntimeManagementConfigCommand,
      RecursiveInvocationException: () => RecursiveInvocationException,
      RecursiveLoop: () => RecursiveLoop,
      RemoveLayerVersionPermissionCommand: () => RemoveLayerVersionPermissionCommand,
      RemovePermissionCommand: () => RemovePermissionCommand,
      RequestTooLargeException: () => RequestTooLargeException,
      ResourceConflictException: () => ResourceConflictException,
      ResourceInUseException: () => ResourceInUseException,
      ResourceNotFoundException: () => ResourceNotFoundException,
      ResourceNotReadyException: () => ResourceNotReadyException,
      ResponseStreamingInvocationType: () => ResponseStreamingInvocationType,
      Runtime: () => Runtime,
      RuntimeVersionConfigFilterSensitiveLog: () => RuntimeVersionConfigFilterSensitiveLog,
      RuntimeVersionErrorFilterSensitiveLog: () => RuntimeVersionErrorFilterSensitiveLog,
      SchemaRegistryEventRecordFormat: () => SchemaRegistryEventRecordFormat,
      ServiceException: () => ServiceException,
      SnapStartApplyOn: () => SnapStartApplyOn,
      SnapStartException: () => SnapStartException,
      SnapStartNotReadyException: () => SnapStartNotReadyException,
      SnapStartOptimizationStatus: () => SnapStartOptimizationStatus,
      SnapStartTimeoutException: () => SnapStartTimeoutException,
      SourceAccessType: () => SourceAccessType,
      State: () => State,
      StateReasonCode: () => StateReasonCode,
      SubnetIPAddressLimitReachedException: () => SubnetIPAddressLimitReachedException,
      SystemLogLevel: () => SystemLogLevel,
      TagResourceCommand: () => TagResourceCommand,
      ThrottleReason: () => ThrottleReason,
      TooManyRequestsException: () => TooManyRequestsException,
      TracingMode: () => TracingMode,
      UnsupportedMediaTypeException: () => UnsupportedMediaTypeException,
      UntagResourceCommand: () => UntagResourceCommand,
      UpdateAliasCommand: () => UpdateAliasCommand,
      UpdateCodeSigningConfigCommand: () => UpdateCodeSigningConfigCommand,
      UpdateEventSourceMappingCommand: () => UpdateEventSourceMappingCommand,
      UpdateFunctionCodeCommand: () => UpdateFunctionCodeCommand,
      UpdateFunctionCodeRequestFilterSensitiveLog: () => UpdateFunctionCodeRequestFilterSensitiveLog,
      UpdateFunctionConfigurationCommand: () => UpdateFunctionConfigurationCommand,
      UpdateFunctionConfigurationRequestFilterSensitiveLog: () => UpdateFunctionConfigurationRequestFilterSensitiveLog,
      UpdateFunctionEventInvokeConfigCommand: () => UpdateFunctionEventInvokeConfigCommand,
      UpdateFunctionUrlConfigCommand: () => UpdateFunctionUrlConfigCommand,
      UpdateRuntimeOn: () => UpdateRuntimeOn,
      __Client: () => import_smithy_client.Client,
      paginateListAliases: () => paginateListAliases,
      paginateListCodeSigningConfigs: () => paginateListCodeSigningConfigs,
      paginateListEventSourceMappings: () => paginateListEventSourceMappings,
      paginateListFunctionEventInvokeConfigs: () => paginateListFunctionEventInvokeConfigs,
      paginateListFunctionUrlConfigs: () => paginateListFunctionUrlConfigs,
      paginateListFunctions: () => paginateListFunctions,
      paginateListFunctionsByCodeSigningConfig: () => paginateListFunctionsByCodeSigningConfig,
      paginateListLayerVersions: () => paginateListLayerVersions,
      paginateListLayers: () => paginateListLayers,
      paginateListProvisionedConcurrencyConfigs: () => paginateListProvisionedConcurrencyConfigs,
      paginateListVersionsByFunction: () => paginateListVersionsByFunction,
      waitForFunctionActive: () => waitForFunctionActive,
      waitForFunctionActiveV2: () => waitForFunctionActiveV2,
      waitForFunctionExists: () => waitForFunctionExists,
      waitForFunctionUpdated: () => waitForFunctionUpdated,
      waitForFunctionUpdatedV2: () => waitForFunctionUpdatedV2,
      waitForPublishedVersionActive: () => waitForPublishedVersionActive,
      waitUntilFunctionActive: () => waitUntilFunctionActive,
      waitUntilFunctionActiveV2: () => waitUntilFunctionActiveV2,
      waitUntilFunctionExists: () => waitUntilFunctionExists,
      waitUntilFunctionUpdated: () => waitUntilFunctionUpdated,
      waitUntilFunctionUpdatedV2: () => waitUntilFunctionUpdatedV2,
      waitUntilPublishedVersionActive: () => waitUntilPublishedVersionActive,
    });
    module2.exports = __toCommonJS(index_exports);
    var import_middleware_host_header = require_dist_cjs3();
    var import_middleware_logger = require_dist_cjs4();
    var import_middleware_recursion_detection = require_dist_cjs5();
    var import_middleware_user_agent = require_dist_cjs30();
    var import_config_resolver = require_dist_cjs32();
    var import_core2 = require_dist_cjs18();
    var import_eventstream_serde_config_resolver = require_dist_cjs33();
    var import_middleware_content_length = require_dist_cjs34();
    var import_middleware_endpoint = require_dist_cjs37();
    var import_middleware_retry = require_dist_cjs40();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      var _a110, _b;
      return Object.assign(options, {
        useDualstackEndpoint: (_a110 = options.useDualstackEndpoint) != null ? _a110 : false,
        useFipsEndpoint: (_b = options.useFipsEndpoint) != null ? _b : false,
        defaultSigningName: 'lambda',
      });
    }, 'resolveClientEndpointParameters');
    var commonParams = {
      UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
      Endpoint: { type: 'builtInParams', name: 'endpoint' },
      Region: { type: 'builtInParams', name: 'region' },
      UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
    };
    var import_runtimeConfig = require_runtimeConfig4();
    var import_region_config_resolver = require_dist_cjs48();
    var import_protocol_http = require_dist_cjs2();
    var import_smithy_client = require_dist_cjs27();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        },
      };
    }, 'getHttpAuthExtensionConfiguration');
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
      };
    }, 'resolveHttpAuthRuntimeConfig');
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = Object.assign(
        (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig),
        (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig),
        (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig),
        getHttpAuthExtensionConfiguration(runtimeConfig)
      );
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return Object.assign(
        runtimeConfig,
        (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
        (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        resolveHttpAuthRuntimeConfig(extensionConfiguration)
      );
    }, 'resolveRuntimeExtensions');
    var _a;
    var LambdaClient2 =
      ((_a = class extends import_smithy_client.Client {
        config;
        constructor(...[configuration]) {
          const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
          super(_config_0);
          this.initConfig = _config_0;
          const _config_1 = resolveClientEndpointParameters(_config_0);
          const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
          const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
          const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
          const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
          const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
          const _config_7 = (0, import_eventstream_serde_config_resolver.resolveEventStreamSerdeConfig)(_config_6);
          const _config_8 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_7);
          const _config_9 = resolveRuntimeExtensions(
            _config_8,
            (configuration == null ? void 0 : configuration.extensions) || []
          );
          this.config = _config_9;
          this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
          this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
          this.middlewareStack.use(
            (0, import_core2.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
              httpAuthSchemeParametersProvider:
                import_httpAuthSchemeProvider.defaultLambdaHttpAuthSchemeParametersProvider,
              identityProviderConfigProvider: /* @__PURE__ */ __name(
                async (config) =>
                  new import_core2.DefaultIdentityProviderConfig({
                    'aws.auth#sigv4': config.credentials,
                  }),
                'identityProviderConfigProvider'
              ),
            })
          );
          this.middlewareStack.use((0, import_core2.getHttpSigningPlugin)(this.config));
        }
        destroy() {
          super.destroy();
        }
      }),
      (() => {
        __name(_a, 'LambdaClient');
      })(),
      _a);
    var import_middleware_serde = require_dist_cjs7();
    var import_core22 = require_dist_cjs29();
    var _a2;
    var LambdaServiceException =
      ((_a2 = class extends import_smithy_client.ServiceException {
        constructor(options) {
          super(options);
          Object.setPrototypeOf(this, _a2.prototype);
        }
      }),
      (() => {
        __name(_a2, 'LambdaServiceException');
      })(),
      _a2);
    var _a3;
    var InvalidParameterValueException =
      ((_a3 = class extends LambdaServiceException {
        name = 'InvalidParameterValueException';
        $fault = 'client';
        Type;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidParameterValueException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a3.prototype);
          this.Type = opts.Type;
        }
      }),
      (() => {
        __name(_a3, 'InvalidParameterValueException');
      })(),
      _a3);
    var _a4;
    var PolicyLengthExceededException =
      ((_a4 = class extends LambdaServiceException {
        name = 'PolicyLengthExceededException';
        $fault = 'client';
        Type;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'PolicyLengthExceededException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a4.prototype);
          this.Type = opts.Type;
        }
      }),
      (() => {
        __name(_a4, 'PolicyLengthExceededException');
      })(),
      _a4);
    var _a5;
    var PreconditionFailedException =
      ((_a5 = class extends LambdaServiceException {
        name = 'PreconditionFailedException';
        $fault = 'client';
        Type;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'PreconditionFailedException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a5.prototype);
          this.Type = opts.Type;
        }
      }),
      (() => {
        __name(_a5, 'PreconditionFailedException');
      })(),
      _a5);
    var _a6;
    var ResourceConflictException =
      ((_a6 = class extends LambdaServiceException {
        name = 'ResourceConflictException';
        $fault = 'client';
        Type;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'ResourceConflictException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a6.prototype);
          this.Type = opts.Type;
        }
      }),
      (() => {
        __name(_a6, 'ResourceConflictException');
      })(),
      _a6);
    var _a7;
    var ResourceNotFoundException =
      ((_a7 = class extends LambdaServiceException {
        name = 'ResourceNotFoundException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'ResourceNotFoundException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a7.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a7, 'ResourceNotFoundException');
      })(),
      _a7);
    var _a8;
    var ServiceException =
      ((_a8 = class extends LambdaServiceException {
        name = 'ServiceException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'ServiceException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a8.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a8, 'ServiceException');
      })(),
      _a8);
    var ThrottleReason = {
      CallerRateLimitExceeded: 'CallerRateLimitExceeded',
      ConcurrentInvocationLimitExceeded: 'ConcurrentInvocationLimitExceeded',
      ConcurrentSnapshotCreateLimitExceeded: 'ConcurrentSnapshotCreateLimitExceeded',
      FunctionInvocationRateLimitExceeded: 'FunctionInvocationRateLimitExceeded',
      ReservedFunctionConcurrentInvocationLimitExceeded: 'ReservedFunctionConcurrentInvocationLimitExceeded',
      ReservedFunctionInvocationRateLimitExceeded: 'ReservedFunctionInvocationRateLimitExceeded',
    };
    var _a9;
    var TooManyRequestsException =
      ((_a9 = class extends LambdaServiceException {
        name = 'TooManyRequestsException';
        $fault = 'client';
        retryAfterSeconds;
        Type;
        Reason;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'TooManyRequestsException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a9.prototype);
          this.retryAfterSeconds = opts.retryAfterSeconds;
          this.Type = opts.Type;
          this.Reason = opts.Reason;
        }
      }),
      (() => {
        __name(_a9, 'TooManyRequestsException');
      })(),
      _a9);
    var FunctionUrlAuthType = {
      AWS_IAM: 'AWS_IAM',
      NONE: 'NONE',
    };
    var KafkaSchemaRegistryAuthType = {
      BASIC_AUTH: 'BASIC_AUTH',
      CLIENT_CERTIFICATE_TLS_AUTH: 'CLIENT_CERTIFICATE_TLS_AUTH',
      SERVER_ROOT_CA_CERTIFICATE: 'SERVER_ROOT_CA_CERTIFICATE',
    };
    var SchemaRegistryEventRecordFormat = {
      JSON: 'JSON',
      SOURCE: 'SOURCE',
    };
    var KafkaSchemaValidationAttribute = {
      KEY: 'KEY',
      VALUE: 'VALUE',
    };
    var ApplicationLogLevel = {
      Debug: 'DEBUG',
      Error: 'ERROR',
      Fatal: 'FATAL',
      Info: 'INFO',
      Trace: 'TRACE',
      Warn: 'WARN',
    };
    var Architecture = {
      arm64: 'arm64',
      x86_64: 'x86_64',
    };
    var CodeSigningPolicy = {
      Enforce: 'Enforce',
      Warn: 'Warn',
    };
    var FullDocument = {
      Default: 'Default',
      UpdateLookup: 'UpdateLookup',
    };
    var FunctionResponseType = {
      ReportBatchItemFailures: 'ReportBatchItemFailures',
    };
    var EventSourceMappingMetric = {
      EventCount: 'EventCount',
    };
    var EndPointType = {
      KAFKA_BOOTSTRAP_SERVERS: 'KAFKA_BOOTSTRAP_SERVERS',
    };
    var SourceAccessType = {
      BASIC_AUTH: 'BASIC_AUTH',
      CLIENT_CERTIFICATE_TLS_AUTH: 'CLIENT_CERTIFICATE_TLS_AUTH',
      SASL_SCRAM_256_AUTH: 'SASL_SCRAM_256_AUTH',
      SASL_SCRAM_512_AUTH: 'SASL_SCRAM_512_AUTH',
      SERVER_ROOT_CA_CERTIFICATE: 'SERVER_ROOT_CA_CERTIFICATE',
      VIRTUAL_HOST: 'VIRTUAL_HOST',
      VPC_SECURITY_GROUP: 'VPC_SECURITY_GROUP',
      VPC_SUBNET: 'VPC_SUBNET',
    };
    var EventSourcePosition = {
      AT_TIMESTAMP: 'AT_TIMESTAMP',
      LATEST: 'LATEST',
      TRIM_HORIZON: 'TRIM_HORIZON',
    };
    var _a10;
    var ResourceInUseException =
      ((_a10 = class extends LambdaServiceException {
        name = 'ResourceInUseException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'ResourceInUseException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a10.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a10, 'ResourceInUseException');
      })(),
      _a10);
    var _a11;
    var CodeSigningConfigNotFoundException =
      ((_a11 = class extends LambdaServiceException {
        name = 'CodeSigningConfigNotFoundException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'CodeSigningConfigNotFoundException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a11.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a11, 'CodeSigningConfigNotFoundException');
      })(),
      _a11);
    var _a12;
    var CodeStorageExceededException =
      ((_a12 = class extends LambdaServiceException {
        name = 'CodeStorageExceededException';
        $fault = 'client';
        Type;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'CodeStorageExceededException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a12.prototype);
          this.Type = opts.Type;
        }
      }),
      (() => {
        __name(_a12, 'CodeStorageExceededException');
      })(),
      _a12);
    var _a13;
    var CodeVerificationFailedException =
      ((_a13 = class extends LambdaServiceException {
        name = 'CodeVerificationFailedException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'CodeVerificationFailedException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a13.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a13, 'CodeVerificationFailedException');
      })(),
      _a13);
    var LogFormat = {
      Json: 'JSON',
      Text: 'Text',
    };
    var SystemLogLevel = {
      Debug: 'DEBUG',
      Info: 'INFO',
      Warn: 'WARN',
    };
    var PackageType = {
      Image: 'Image',
      Zip: 'Zip',
    };
    var Runtime = {
      dotnet6: 'dotnet6',
      dotnet8: 'dotnet8',
      dotnetcore10: 'dotnetcore1.0',
      dotnetcore20: 'dotnetcore2.0',
      dotnetcore21: 'dotnetcore2.1',
      dotnetcore31: 'dotnetcore3.1',
      go1x: 'go1.x',
      java11: 'java11',
      java17: 'java17',
      java21: 'java21',
      java8: 'java8',
      java8al2: 'java8.al2',
      nodejs: 'nodejs',
      nodejs10x: 'nodejs10.x',
      nodejs12x: 'nodejs12.x',
      nodejs14x: 'nodejs14.x',
      nodejs16x: 'nodejs16.x',
      nodejs18x: 'nodejs18.x',
      nodejs20x: 'nodejs20.x',
      nodejs22x: 'nodejs22.x',
      nodejs43: 'nodejs4.3',
      nodejs43edge: 'nodejs4.3-edge',
      nodejs610: 'nodejs6.10',
      nodejs810: 'nodejs8.10',
      provided: 'provided',
      providedal2: 'provided.al2',
      providedal2023: 'provided.al2023',
      python27: 'python2.7',
      python310: 'python3.10',
      python311: 'python3.11',
      python312: 'python3.12',
      python313: 'python3.13',
      python36: 'python3.6',
      python37: 'python3.7',
      python38: 'python3.8',
      python39: 'python3.9',
      ruby25: 'ruby2.5',
      ruby27: 'ruby2.7',
      ruby32: 'ruby3.2',
      ruby33: 'ruby3.3',
      ruby34: 'ruby3.4',
    };
    var SnapStartApplyOn = {
      None: 'None',
      PublishedVersions: 'PublishedVersions',
    };
    var TracingMode = {
      Active: 'Active',
      PassThrough: 'PassThrough',
    };
    var LastUpdateStatus = {
      Failed: 'Failed',
      InProgress: 'InProgress',
      Successful: 'Successful',
    };
    var LastUpdateStatusReasonCode = {
      DisabledKMSKey: 'DisabledKMSKey',
      EFSIOError: 'EFSIOError',
      EFSMountConnectivityError: 'EFSMountConnectivityError',
      EFSMountFailure: 'EFSMountFailure',
      EFSMountTimeout: 'EFSMountTimeout',
      EniLimitExceeded: 'EniLimitExceeded',
      FunctionError: 'FunctionError',
      ImageAccessDenied: 'ImageAccessDenied',
      ImageDeleted: 'ImageDeleted',
      InsufficientRolePermissions: 'InsufficientRolePermissions',
      InternalError: 'InternalError',
      InvalidConfiguration: 'InvalidConfiguration',
      InvalidImage: 'InvalidImage',
      InvalidRuntime: 'InvalidRuntime',
      InvalidSecurityGroup: 'InvalidSecurityGroup',
      InvalidStateKMSKey: 'InvalidStateKMSKey',
      InvalidSubnet: 'InvalidSubnet',
      InvalidZipFileException: 'InvalidZipFileException',
      KMSKeyAccessDenied: 'KMSKeyAccessDenied',
      KMSKeyNotFound: 'KMSKeyNotFound',
      SubnetOutOfIPAddresses: 'SubnetOutOfIPAddresses',
    };
    var SnapStartOptimizationStatus = {
      Off: 'Off',
      On: 'On',
    };
    var State = {
      Active: 'Active',
      Failed: 'Failed',
      Inactive: 'Inactive',
      Pending: 'Pending',
    };
    var StateReasonCode = {
      Creating: 'Creating',
      DisabledKMSKey: 'DisabledKMSKey',
      EFSIOError: 'EFSIOError',
      EFSMountConnectivityError: 'EFSMountConnectivityError',
      EFSMountFailure: 'EFSMountFailure',
      EFSMountTimeout: 'EFSMountTimeout',
      EniLimitExceeded: 'EniLimitExceeded',
      FunctionError: 'FunctionError',
      Idle: 'Idle',
      ImageAccessDenied: 'ImageAccessDenied',
      ImageDeleted: 'ImageDeleted',
      InsufficientRolePermissions: 'InsufficientRolePermissions',
      InternalError: 'InternalError',
      InvalidConfiguration: 'InvalidConfiguration',
      InvalidImage: 'InvalidImage',
      InvalidRuntime: 'InvalidRuntime',
      InvalidSecurityGroup: 'InvalidSecurityGroup',
      InvalidStateKMSKey: 'InvalidStateKMSKey',
      InvalidSubnet: 'InvalidSubnet',
      InvalidZipFileException: 'InvalidZipFileException',
      KMSKeyAccessDenied: 'KMSKeyAccessDenied',
      KMSKeyNotFound: 'KMSKeyNotFound',
      Restoring: 'Restoring',
      SubnetOutOfIPAddresses: 'SubnetOutOfIPAddresses',
    };
    var _a14;
    var InvalidCodeSignatureException =
      ((_a14 = class extends LambdaServiceException {
        name = 'InvalidCodeSignatureException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidCodeSignatureException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a14.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a14, 'InvalidCodeSignatureException');
      })(),
      _a14);
    var InvokeMode = {
      BUFFERED: 'BUFFERED',
      RESPONSE_STREAM: 'RESPONSE_STREAM',
    };
    var RecursiveLoop = {
      Allow: 'Allow',
      Terminate: 'Terminate',
    };
    var UpdateRuntimeOn = {
      Auto: 'Auto',
      FunctionUpdate: 'FunctionUpdate',
      Manual: 'Manual',
    };
    var _a15;
    var EC2AccessDeniedException =
      ((_a15 = class extends LambdaServiceException {
        name = 'EC2AccessDeniedException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'EC2AccessDeniedException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a15.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a15, 'EC2AccessDeniedException');
      })(),
      _a15);
    var _a16;
    var EC2ThrottledException =
      ((_a16 = class extends LambdaServiceException {
        name = 'EC2ThrottledException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'EC2ThrottledException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a16.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a16, 'EC2ThrottledException');
      })(),
      _a16);
    var _a17;
    var EC2UnexpectedException =
      ((_a17 = class extends LambdaServiceException {
        name = 'EC2UnexpectedException';
        $fault = 'server';
        Type;
        Message;
        EC2ErrorCode;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'EC2UnexpectedException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a17.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
          this.EC2ErrorCode = opts.EC2ErrorCode;
        }
      }),
      (() => {
        __name(_a17, 'EC2UnexpectedException');
      })(),
      _a17);
    var _a18;
    var EFSIOException =
      ((_a18 = class extends LambdaServiceException {
        name = 'EFSIOException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'EFSIOException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a18.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a18, 'EFSIOException');
      })(),
      _a18);
    var _a19;
    var EFSMountConnectivityException =
      ((_a19 = class extends LambdaServiceException {
        name = 'EFSMountConnectivityException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'EFSMountConnectivityException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a19.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a19, 'EFSMountConnectivityException');
      })(),
      _a19);
    var _a20;
    var EFSMountFailureException =
      ((_a20 = class extends LambdaServiceException {
        name = 'EFSMountFailureException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'EFSMountFailureException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a20.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a20, 'EFSMountFailureException');
      })(),
      _a20);
    var _a21;
    var EFSMountTimeoutException =
      ((_a21 = class extends LambdaServiceException {
        name = 'EFSMountTimeoutException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'EFSMountTimeoutException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a21.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a21, 'EFSMountTimeoutException');
      })(),
      _a21);
    var _a22;
    var ENILimitReachedException =
      ((_a22 = class extends LambdaServiceException {
        name = 'ENILimitReachedException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'ENILimitReachedException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a22.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a22, 'ENILimitReachedException');
      })(),
      _a22);
    var _a23;
    var InvalidRequestContentException =
      ((_a23 = class extends LambdaServiceException {
        name = 'InvalidRequestContentException';
        $fault = 'client';
        Type;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidRequestContentException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a23.prototype);
          this.Type = opts.Type;
        }
      }),
      (() => {
        __name(_a23, 'InvalidRequestContentException');
      })(),
      _a23);
    var _a24;
    var InvalidRuntimeException =
      ((_a24 = class extends LambdaServiceException {
        name = 'InvalidRuntimeException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidRuntimeException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a24.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a24, 'InvalidRuntimeException');
      })(),
      _a24);
    var _a25;
    var InvalidSecurityGroupIDException =
      ((_a25 = class extends LambdaServiceException {
        name = 'InvalidSecurityGroupIDException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidSecurityGroupIDException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a25.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a25, 'InvalidSecurityGroupIDException');
      })(),
      _a25);
    var _a26;
    var InvalidSubnetIDException =
      ((_a26 = class extends LambdaServiceException {
        name = 'InvalidSubnetIDException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidSubnetIDException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a26.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a26, 'InvalidSubnetIDException');
      })(),
      _a26);
    var _a27;
    var InvalidZipFileException =
      ((_a27 = class extends LambdaServiceException {
        name = 'InvalidZipFileException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'InvalidZipFileException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a27.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a27, 'InvalidZipFileException');
      })(),
      _a27);
    var InvocationType = {
      DryRun: 'DryRun',
      Event: 'Event',
      RequestResponse: 'RequestResponse',
    };
    var LogType = {
      None: 'None',
      Tail: 'Tail',
    };
    var _a28;
    var KMSAccessDeniedException =
      ((_a28 = class extends LambdaServiceException {
        name = 'KMSAccessDeniedException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'KMSAccessDeniedException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a28.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a28, 'KMSAccessDeniedException');
      })(),
      _a28);
    var _a29;
    var KMSDisabledException =
      ((_a29 = class extends LambdaServiceException {
        name = 'KMSDisabledException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'KMSDisabledException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a29.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a29, 'KMSDisabledException');
      })(),
      _a29);
    var _a30;
    var KMSInvalidStateException =
      ((_a30 = class extends LambdaServiceException {
        name = 'KMSInvalidStateException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'KMSInvalidStateException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a30.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a30, 'KMSInvalidStateException');
      })(),
      _a30);
    var _a31;
    var KMSNotFoundException =
      ((_a31 = class extends LambdaServiceException {
        name = 'KMSNotFoundException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'KMSNotFoundException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a31.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a31, 'KMSNotFoundException');
      })(),
      _a31);
    var _a32;
    var RecursiveInvocationException =
      ((_a32 = class extends LambdaServiceException {
        name = 'RecursiveInvocationException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'RecursiveInvocationException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a32.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a32, 'RecursiveInvocationException');
      })(),
      _a32);
    var _a33;
    var RequestTooLargeException =
      ((_a33 = class extends LambdaServiceException {
        name = 'RequestTooLargeException';
        $fault = 'client';
        Type;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'RequestTooLargeException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a33.prototype);
          this.Type = opts.Type;
        }
      }),
      (() => {
        __name(_a33, 'RequestTooLargeException');
      })(),
      _a33);
    var _a34;
    var ResourceNotReadyException =
      ((_a34 = class extends LambdaServiceException {
        name = 'ResourceNotReadyException';
        $fault = 'server';
        Type;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'ResourceNotReadyException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a34.prototype);
          this.Type = opts.Type;
        }
      }),
      (() => {
        __name(_a34, 'ResourceNotReadyException');
      })(),
      _a34);
    var _a35;
    var SnapStartException =
      ((_a35 = class extends LambdaServiceException {
        name = 'SnapStartException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'SnapStartException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a35.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a35, 'SnapStartException');
      })(),
      _a35);
    var _a36;
    var SnapStartNotReadyException =
      ((_a36 = class extends LambdaServiceException {
        name = 'SnapStartNotReadyException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'SnapStartNotReadyException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a36.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a36, 'SnapStartNotReadyException');
      })(),
      _a36);
    var _a37;
    var SnapStartTimeoutException =
      ((_a37 = class extends LambdaServiceException {
        name = 'SnapStartTimeoutException';
        $fault = 'client';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'SnapStartTimeoutException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a37.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a37, 'SnapStartTimeoutException');
      })(),
      _a37);
    var _a38;
    var SubnetIPAddressLimitReachedException =
      ((_a38 = class extends LambdaServiceException {
        name = 'SubnetIPAddressLimitReachedException';
        $fault = 'server';
        Type;
        Message;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'SubnetIPAddressLimitReachedException',
                $fault: 'server',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a38.prototype);
          this.Type = opts.Type;
          this.Message = opts.Message;
        }
      }),
      (() => {
        __name(_a38, 'SubnetIPAddressLimitReachedException');
      })(),
      _a38);
    var _a39;
    var UnsupportedMediaTypeException =
      ((_a39 = class extends LambdaServiceException {
        name = 'UnsupportedMediaTypeException';
        $fault = 'client';
        Type;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'UnsupportedMediaTypeException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a39.prototype);
          this.Type = opts.Type;
        }
      }),
      (() => {
        __name(_a39, 'UnsupportedMediaTypeException');
      })(),
      _a39);
    var ResponseStreamingInvocationType = {
      DryRun: 'DryRun',
      RequestResponse: 'RequestResponse',
    };
    var InvokeWithResponseStreamResponseEvent;
    ((InvokeWithResponseStreamResponseEvent3) => {
      InvokeWithResponseStreamResponseEvent3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.PayloadChunk !== void 0) return visitor.PayloadChunk(value.PayloadChunk);
        if (value.InvokeComplete !== void 0) return visitor.InvokeComplete(value.InvokeComplete);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, 'visit');
    })(InvokeWithResponseStreamResponseEvent || (InvokeWithResponseStreamResponseEvent = {}));
    var FunctionVersion = {
      ALL: 'ALL',
    };
    var ProvisionedConcurrencyStatusEnum = {
      FAILED: 'FAILED',
      IN_PROGRESS: 'IN_PROGRESS',
      READY: 'READY',
    };
    var _a40;
    var ProvisionedConcurrencyConfigNotFoundException =
      ((_a40 = class extends LambdaServiceException {
        name = 'ProvisionedConcurrencyConfigNotFoundException';
        $fault = 'client';
        Type;
        constructor(opts) {
          super(
            __spreadValues(
              {
                name: 'ProvisionedConcurrencyConfigNotFoundException',
                $fault: 'client',
              },
              opts
            )
          );
          Object.setPrototypeOf(this, _a40.prototype);
          this.Type = opts.Type;
        }
      }),
      (() => {
        __name(_a40, 'ProvisionedConcurrencyConfigNotFoundException');
      })(),
      _a40);
    var FunctionCodeFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(__spreadValues({}, obj), obj.ZipFile && { ZipFile: import_smithy_client.SENSITIVE_STRING }),
      'FunctionCodeFilterSensitiveLog'
    );
    var EnvironmentFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(__spreadValues({}, obj), obj.Variables && { Variables: import_smithy_client.SENSITIVE_STRING }),
      'EnvironmentFilterSensitiveLog'
    );
    var CreateFunctionRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues(__spreadValues({}, obj), obj.Code && { Code: FunctionCodeFilterSensitiveLog(obj.Code) }),
          obj.Environment && { Environment: EnvironmentFilterSensitiveLog(obj.Environment) }
        ),
      'CreateFunctionRequestFilterSensitiveLog'
    );
    var EnvironmentErrorFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(__spreadValues({}, obj), obj.Message && { Message: import_smithy_client.SENSITIVE_STRING }),
      'EnvironmentErrorFilterSensitiveLog'
    );
    var EnvironmentResponseFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues(
            __spreadValues({}, obj),
            obj.Variables && { Variables: import_smithy_client.SENSITIVE_STRING }
          ),
          obj.Error && { Error: EnvironmentErrorFilterSensitiveLog(obj.Error) }
        ),
      'EnvironmentResponseFilterSensitiveLog'
    );
    var ImageConfigErrorFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(__spreadValues({}, obj), obj.Message && { Message: import_smithy_client.SENSITIVE_STRING }),
      'ImageConfigErrorFilterSensitiveLog'
    );
    var ImageConfigResponseFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(__spreadValues({}, obj), obj.Error && { Error: ImageConfigErrorFilterSensitiveLog(obj.Error) }),
      'ImageConfigResponseFilterSensitiveLog'
    );
    var RuntimeVersionErrorFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(__spreadValues({}, obj), obj.Message && { Message: import_smithy_client.SENSITIVE_STRING }),
      'RuntimeVersionErrorFilterSensitiveLog'
    );
    var RuntimeVersionConfigFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.Error && { Error: RuntimeVersionErrorFilterSensitiveLog(obj.Error) }
        ),
      'RuntimeVersionConfigFilterSensitiveLog'
    );
    var FunctionConfigurationFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues(
            __spreadValues(
              __spreadValues({}, obj),
              obj.Environment && { Environment: EnvironmentResponseFilterSensitiveLog(obj.Environment) }
            ),
            obj.ImageConfigResponse && {
              ImageConfigResponse: ImageConfigResponseFilterSensitiveLog(obj.ImageConfigResponse),
            }
          ),
          obj.RuntimeVersionConfig && {
            RuntimeVersionConfig: RuntimeVersionConfigFilterSensitiveLog(obj.RuntimeVersionConfig),
          }
        ),
      'FunctionConfigurationFilterSensitiveLog'
    );
    var GetFunctionResponseFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.Configuration && { Configuration: FunctionConfigurationFilterSensitiveLog(obj.Configuration) }
        ),
      'GetFunctionResponseFilterSensitiveLog'
    );
    var InvocationRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(__spreadValues({}, obj), obj.Payload && { Payload: import_smithy_client.SENSITIVE_STRING }),
      'InvocationRequestFilterSensitiveLog'
    );
    var InvocationResponseFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(__spreadValues({}, obj), obj.Payload && { Payload: import_smithy_client.SENSITIVE_STRING }),
      'InvocationResponseFilterSensitiveLog'
    );
    var InvokeAsyncRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) => __spreadValues({}, obj),
      'InvokeAsyncRequestFilterSensitiveLog'
    );
    var InvokeWithResponseStreamRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(__spreadValues({}, obj), obj.Payload && { Payload: import_smithy_client.SENSITIVE_STRING }),
      'InvokeWithResponseStreamRequestFilterSensitiveLog'
    );
    var InvokeResponseStreamUpdateFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(__spreadValues({}, obj), obj.Payload && { Payload: import_smithy_client.SENSITIVE_STRING }),
      'InvokeResponseStreamUpdateFilterSensitiveLog'
    );
    var InvokeWithResponseStreamResponseEventFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.PayloadChunk !== void 0)
        return { PayloadChunk: InvokeResponseStreamUpdateFilterSensitiveLog(obj.PayloadChunk) };
      if (obj.InvokeComplete !== void 0) return { InvokeComplete: obj.InvokeComplete };
      if (obj.$unknown !== void 0) return { [obj.$unknown[0]]: 'UNKNOWN' };
    }, 'InvokeWithResponseStreamResponseEventFilterSensitiveLog');
    var InvokeWithResponseStreamResponseFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) => __spreadValues(__spreadValues({}, obj), obj.EventStream && { EventStream: 'STREAMING_CONTENT' }),
      'InvokeWithResponseStreamResponseFilterSensitiveLog'
    );
    var ListFunctionsResponseFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.Functions && { Functions: obj.Functions.map((item) => FunctionConfigurationFilterSensitiveLog(item)) }
        ),
      'ListFunctionsResponseFilterSensitiveLog'
    );
    var UpdateFunctionCodeRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(__spreadValues({}, obj), obj.ZipFile && { ZipFile: import_smithy_client.SENSITIVE_STRING }),
      'UpdateFunctionCodeRequestFilterSensitiveLog'
    );
    var UpdateFunctionConfigurationRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.Environment && { Environment: EnvironmentFilterSensitiveLog(obj.Environment) }
        ),
      'UpdateFunctionConfigurationRequestFilterSensitiveLog'
    );
    var ListVersionsByFunctionResponseFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.Versions && { Versions: obj.Versions.map((item) => FunctionConfigurationFilterSensitiveLog(item)) }
        ),
      'ListVersionsByFunctionResponseFilterSensitiveLog'
    );
    var LayerVersionContentInputFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(__spreadValues({}, obj), obj.ZipFile && { ZipFile: import_smithy_client.SENSITIVE_STRING }),
      'LayerVersionContentInputFilterSensitiveLog'
    );
    var PublishLayerVersionRequestFilterSensitiveLog = /* @__PURE__ */ __name(
      (obj) =>
        __spreadValues(
          __spreadValues({}, obj),
          obj.Content && { Content: LayerVersionContentInputFilterSensitiveLog(obj.Content) }
        ),
      'PublishLayerVersionRequestFilterSensitiveLog'
    );
    var se_AddLayerVersionPermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy');
      b.p('LayerName', () => input.LayerName, '{LayerName}', false);
      b.p('VersionNumber', () => input.VersionNumber.toString(), '{VersionNumber}', false);
      const query = (0, import_smithy_client.map)({
        [_RI]: [, input[_RI]],
      });
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          Action: [],
          OrganizationId: [],
          Principal: [],
          StatementId: [],
        })
      );
      b.m('POST').h(headers).q(query).b(body);
      return b.build();
    }, 'se_AddLayerVersionPermissionCommand');
    var se_AddPermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2015-03-31/functions/{FunctionName}/policy');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          Action: [],
          EventSourceToken: [],
          FunctionUrlAuthType: [],
          Principal: [],
          PrincipalOrgID: [],
          RevisionId: [],
          SourceAccount: [],
          SourceArn: [],
          StatementId: [],
        })
      );
      b.m('POST').h(headers).q(query).b(body);
      return b.build();
    }, 'se_AddPermissionCommand');
    var se_CreateAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2015-03-31/functions/{FunctionName}/aliases');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          Description: [],
          FunctionVersion: [],
          Name: [],
          RoutingConfig: /* @__PURE__ */ __name((_) => se_AliasRoutingConfiguration(_, context), 'RoutingConfig'),
        })
      );
      b.m('POST').h(headers).b(body);
      return b.build();
    }, 'se_CreateAliasCommand');
    var se_CreateCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2020-04-22/code-signing-configs');
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          AllowedPublishers: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'AllowedPublishers'),
          CodeSigningPolicies: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'CodeSigningPolicies'),
          Description: [],
          Tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Tags'),
        })
      );
      b.m('POST').h(headers).b(body);
      return b.build();
    }, 'se_CreateCodeSigningConfigCommand');
    var se_CreateEventSourceMappingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2015-03-31/event-source-mappings');
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          AmazonManagedKafkaEventSourceConfig: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'AmazonManagedKafkaEventSourceConfig'
          ),
          BatchSize: [],
          BisectBatchOnFunctionError: [],
          DestinationConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'DestinationConfig'),
          DocumentDBEventSourceConfig: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'DocumentDBEventSourceConfig'
          ),
          Enabled: [],
          EventSourceArn: [],
          FilterCriteria: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'FilterCriteria'),
          FunctionName: [],
          FunctionResponseTypes: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'FunctionResponseTypes'
          ),
          KMSKeyArn: [],
          MaximumBatchingWindowInSeconds: [],
          MaximumRecordAgeInSeconds: [],
          MaximumRetryAttempts: [],
          MetricsConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'MetricsConfig'),
          ParallelizationFactor: [],
          ProvisionedPollerConfig: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'ProvisionedPollerConfig'
          ),
          Queues: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Queues'),
          ScalingConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'ScalingConfig'),
          SelfManagedEventSource: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'SelfManagedEventSource'
          ),
          SelfManagedKafkaEventSourceConfig: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'SelfManagedKafkaEventSourceConfig'
          ),
          SourceAccessConfigurations: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'SourceAccessConfigurations'
          ),
          StartingPosition: [],
          StartingPositionTimestamp: /* @__PURE__ */ __name((_) => _.getTime() / 1e3, 'StartingPositionTimestamp'),
          Tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Tags'),
          Topics: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Topics'),
          TumblingWindowInSeconds: [],
        })
      );
      b.m('POST').h(headers).b(body);
      return b.build();
    }, 'se_CreateEventSourceMappingCommand');
    var se_CreateFunctionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2015-03-31/functions');
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          Architectures: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Architectures'),
          Code: /* @__PURE__ */ __name((_) => se_FunctionCode(_, context), 'Code'),
          CodeSigningConfigArn: [],
          DeadLetterConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'DeadLetterConfig'),
          Description: [],
          Environment: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Environment'),
          EphemeralStorage: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'EphemeralStorage'),
          FileSystemConfigs: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'FileSystemConfigs'),
          FunctionName: [],
          Handler: [],
          ImageConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'ImageConfig'),
          KMSKeyArn: [],
          Layers: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Layers'),
          LoggingConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'LoggingConfig'),
          MemorySize: [],
          PackageType: [],
          Publish: [],
          Role: [],
          Runtime: [],
          SnapStart: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'SnapStart'),
          Tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Tags'),
          Timeout: [],
          TracingConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'TracingConfig'),
          VpcConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'VpcConfig'),
        })
      );
      b.m('POST').h(headers).b(body);
      return b.build();
    }, 'se_CreateFunctionCommand');
    var se_CreateFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2021-10-31/functions/{FunctionName}/url');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          AuthType: [],
          Cors: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Cors'),
          InvokeMode: [],
        })
      );
      b.m('POST').h(headers).q(query).b(body);
      return b.build();
    }, 'se_CreateFunctionUrlConfigCommand');
    var se_DeleteAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/functions/{FunctionName}/aliases/{Name}');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      b.p('Name', () => input.Name, '{Name}', false);
      let body;
      b.m('DELETE').h(headers).b(body);
      return b.build();
    }, 'se_DeleteAliasCommand');
    var se_DeleteCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2020-04-22/code-signing-configs/{CodeSigningConfigArn}');
      b.p('CodeSigningConfigArn', () => input.CodeSigningConfigArn, '{CodeSigningConfigArn}', false);
      let body;
      b.m('DELETE').h(headers).b(body);
      return b.build();
    }, 'se_DeleteCodeSigningConfigCommand');
    var se_DeleteEventSourceMappingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/event-source-mappings/{UUID}');
      b.p('UUID', () => input.UUID, '{UUID}', false);
      let body;
      b.m('DELETE').h(headers).b(body);
      return b.build();
    }, 'se_DeleteEventSourceMappingCommand');
    var se_DeleteFunctionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/functions/{FunctionName}');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      b.m('DELETE').h(headers).q(query).b(body);
      return b.build();
    }, 'se_DeleteFunctionCommand');
    var se_DeleteFunctionCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2020-06-30/functions/{FunctionName}/code-signing-config');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      b.m('DELETE').h(headers).b(body);
      return b.build();
    }, 'se_DeleteFunctionCodeSigningConfigCommand');
    var se_DeleteFunctionConcurrencyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2017-10-31/functions/{FunctionName}/concurrency');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      b.m('DELETE').h(headers).b(body);
      return b.build();
    }, 'se_DeleteFunctionConcurrencyCommand');
    var se_DeleteFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2019-09-25/functions/{FunctionName}/event-invoke-config');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      b.m('DELETE').h(headers).q(query).b(body);
      return b.build();
    }, 'se_DeleteFunctionEventInvokeConfigCommand');
    var se_DeleteFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2021-10-31/functions/{FunctionName}/url');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      b.m('DELETE').h(headers).q(query).b(body);
      return b.build();
    }, 'se_DeleteFunctionUrlConfigCommand');
    var se_DeleteLayerVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2018-10-31/layers/{LayerName}/versions/{VersionNumber}');
      b.p('LayerName', () => input.LayerName, '{LayerName}', false);
      b.p('VersionNumber', () => input.VersionNumber.toString(), '{VersionNumber}', false);
      let body;
      b.m('DELETE').h(headers).b(body);
      return b.build();
    }, 'se_DeleteLayerVersionCommand');
    var se_DeleteProvisionedConcurrencyConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2019-09-30/functions/{FunctionName}/provisioned-concurrency');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, (0, import_smithy_client.expectNonNull)(input[_Q], `Qualifier`)],
      });
      let body;
      b.m('DELETE').h(headers).q(query).b(body);
      return b.build();
    }, 'se_DeleteProvisionedConcurrencyConfigCommand');
    var se_GetAccountSettingsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2016-08-19/account-settings');
      let body;
      b.m('GET').h(headers).b(body);
      return b.build();
    }, 'se_GetAccountSettingsCommand');
    var se_GetAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/functions/{FunctionName}/aliases/{Name}');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      b.p('Name', () => input.Name, '{Name}', false);
      let body;
      b.m('GET').h(headers).b(body);
      return b.build();
    }, 'se_GetAliasCommand');
    var se_GetCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2020-04-22/code-signing-configs/{CodeSigningConfigArn}');
      b.p('CodeSigningConfigArn', () => input.CodeSigningConfigArn, '{CodeSigningConfigArn}', false);
      let body;
      b.m('GET').h(headers).b(body);
      return b.build();
    }, 'se_GetCodeSigningConfigCommand');
    var se_GetEventSourceMappingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/event-source-mappings/{UUID}');
      b.p('UUID', () => input.UUID, '{UUID}', false);
      let body;
      b.m('GET').h(headers).b(body);
      return b.build();
    }, 'se_GetEventSourceMappingCommand');
    var se_GetFunctionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/functions/{FunctionName}');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_GetFunctionCommand');
    var se_GetFunctionCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2020-06-30/functions/{FunctionName}/code-signing-config');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      b.m('GET').h(headers).b(body);
      return b.build();
    }, 'se_GetFunctionCodeSigningConfigCommand');
    var se_GetFunctionConcurrencyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2019-09-30/functions/{FunctionName}/concurrency');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      b.m('GET').h(headers).b(body);
      return b.build();
    }, 'se_GetFunctionConcurrencyCommand');
    var se_GetFunctionConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/functions/{FunctionName}/configuration');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_GetFunctionConfigurationCommand');
    var se_GetFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2019-09-25/functions/{FunctionName}/event-invoke-config');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_GetFunctionEventInvokeConfigCommand');
    var se_GetFunctionRecursionConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2024-08-31/functions/{FunctionName}/recursion-config');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      b.m('GET').h(headers).b(body);
      return b.build();
    }, 'se_GetFunctionRecursionConfigCommand');
    var se_GetFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2021-10-31/functions/{FunctionName}/url');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_GetFunctionUrlConfigCommand');
    var se_GetLayerVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2018-10-31/layers/{LayerName}/versions/{VersionNumber}');
      b.p('LayerName', () => input.LayerName, '{LayerName}', false);
      b.p('VersionNumber', () => input.VersionNumber.toString(), '{VersionNumber}', false);
      let body;
      b.m('GET').h(headers).b(body);
      return b.build();
    }, 'se_GetLayerVersionCommand');
    var se_GetLayerVersionByArnCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2018-10-31/layers');
      const query = (0, import_smithy_client.map)({
        [_f]: [, 'LayerVersion'],
        [_A]: [, (0, import_smithy_client.expectNonNull)(input[_A], `Arn`)],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_GetLayerVersionByArnCommand');
    var se_GetLayerVersionPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy');
      b.p('LayerName', () => input.LayerName, '{LayerName}', false);
      b.p('VersionNumber', () => input.VersionNumber.toString(), '{VersionNumber}', false);
      let body;
      b.m('GET').h(headers).b(body);
      return b.build();
    }, 'se_GetLayerVersionPolicyCommand');
    var se_GetPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/functions/{FunctionName}/policy');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_GetPolicyCommand');
    var se_GetProvisionedConcurrencyConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2019-09-30/functions/{FunctionName}/provisioned-concurrency');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, (0, import_smithy_client.expectNonNull)(input[_Q], `Qualifier`)],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_GetProvisionedConcurrencyConfigCommand');
    var se_GetRuntimeManagementConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2021-07-20/functions/{FunctionName}/runtime-management-config');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_GetRuntimeManagementConfigCommand');
    var se_InvokeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
        'content-type': 'application/octet-stream',
        [_xait]: input[_IT],
        [_xalt]: input[_LT],
        [_xacc]: input[_CC],
      });
      b.bp('/2015-03-31/functions/{FunctionName}/invocations');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      if (input.Payload !== void 0) {
        body = input.Payload;
      }
      b.m('POST').h(headers).q(query).b(body);
      return b.build();
    }, 'se_InvokeCommand');
    var se_InvokeAsyncCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/octet-stream',
      };
      b.bp('/2014-11-13/functions/{FunctionName}/invoke-async');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      if (input.InvokeArgs !== void 0) {
        body = input.InvokeArgs;
      }
      b.m('POST').h(headers).b(body);
      return b.build();
    }, 'se_InvokeAsyncCommand');
    var se_InvokeWithResponseStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
        'content-type': 'application/octet-stream',
        [_xait]: input[_IT],
        [_xalt]: input[_LT],
        [_xacc]: input[_CC],
      });
      b.bp('/2021-11-15/functions/{FunctionName}/response-streaming-invocations');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      if (input.Payload !== void 0) {
        body = input.Payload;
      }
      b.m('POST').h(headers).q(query).b(body);
      return b.build();
    }, 'se_InvokeWithResponseStreamCommand');
    var se_ListAliasesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/functions/{FunctionName}/aliases');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_FV]: [, input[_FV]],
        [_M]: [, input[_M]],
        [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListAliasesCommand');
    var se_ListCodeSigningConfigsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2020-04-22/code-signing-configs');
      const query = (0, import_smithy_client.map)({
        [_M]: [, input[_M]],
        [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListCodeSigningConfigsCommand');
    var se_ListEventSourceMappingsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/event-source-mappings');
      const query = (0, import_smithy_client.map)({
        [_ESA]: [, input[_ESA]],
        [_FN]: [, input[_FN]],
        [_M]: [, input[_M]],
        [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListEventSourceMappingsCommand');
    var se_ListFunctionEventInvokeConfigsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2019-09-25/functions/{FunctionName}/event-invoke-config/list');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_M]: [, input[_M]],
        [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListFunctionEventInvokeConfigsCommand');
    var se_ListFunctionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/functions');
      const query = (0, import_smithy_client.map)({
        [_MR]: [, input[_MR]],
        [_FV]: [, input[_FV]],
        [_M]: [, input[_M]],
        [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListFunctionsCommand');
    var se_ListFunctionsByCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions');
      b.p('CodeSigningConfigArn', () => input.CodeSigningConfigArn, '{CodeSigningConfigArn}', false);
      const query = (0, import_smithy_client.map)({
        [_M]: [, input[_M]],
        [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListFunctionsByCodeSigningConfigCommand');
    var se_ListFunctionUrlConfigsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2021-10-31/functions/{FunctionName}/urls');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_M]: [, input[_M]],
        [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListFunctionUrlConfigsCommand');
    var se_ListLayersCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2018-10-31/layers');
      const query = (0, import_smithy_client.map)({
        [_CR]: [, input[_CR]],
        [_M]: [, input[_M]],
        [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
        [_CA]: [, input[_CA]],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListLayersCommand');
    var se_ListLayerVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2018-10-31/layers/{LayerName}/versions');
      b.p('LayerName', () => input.LayerName, '{LayerName}', false);
      const query = (0, import_smithy_client.map)({
        [_CR]: [, input[_CR]],
        [_M]: [, input[_M]],
        [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
        [_CA]: [, input[_CA]],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListLayerVersionsCommand');
    var se_ListProvisionedConcurrencyConfigsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2019-09-30/functions/{FunctionName}/provisioned-concurrency');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_L]: [, 'ALL'],
        [_M]: [, input[_M]],
        [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListProvisionedConcurrencyConfigsCommand');
    var se_ListTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2017-03-31/tags/{Resource}');
      b.p('Resource', () => input.Resource, '{Resource}', false);
      let body;
      b.m('GET').h(headers).b(body);
      return b.build();
    }, 'se_ListTagsCommand');
    var se_ListVersionsByFunctionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/functions/{FunctionName}/versions');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_M]: [, input[_M]],
        [_MI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
      });
      let body;
      b.m('GET').h(headers).q(query).b(body);
      return b.build();
    }, 'se_ListVersionsByFunctionCommand');
    var se_PublishLayerVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2018-10-31/layers/{LayerName}/versions');
      b.p('LayerName', () => input.LayerName, '{LayerName}', false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          CompatibleArchitectures: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'CompatibleArchitectures'
          ),
          CompatibleRuntimes: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'CompatibleRuntimes'),
          Content: /* @__PURE__ */ __name((_) => se_LayerVersionContentInput(_, context), 'Content'),
          Description: [],
          LicenseInfo: [],
        })
      );
      b.m('POST').h(headers).b(body);
      return b.build();
    }, 'se_PublishLayerVersionCommand');
    var se_PublishVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2015-03-31/functions/{FunctionName}/versions');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          CodeSha256: [],
          Description: [],
          RevisionId: [],
        })
      );
      b.m('POST').h(headers).b(body);
      return b.build();
    }, 'se_PublishVersionCommand');
    var se_PutFunctionCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2020-06-30/functions/{FunctionName}/code-signing-config');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          CodeSigningConfigArn: [],
        })
      );
      b.m('PUT').h(headers).b(body);
      return b.build();
    }, 'se_PutFunctionCodeSigningConfigCommand');
    var se_PutFunctionConcurrencyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2017-10-31/functions/{FunctionName}/concurrency');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          ReservedConcurrentExecutions: [],
        })
      );
      b.m('PUT').h(headers).b(body);
      return b.build();
    }, 'se_PutFunctionConcurrencyCommand');
    var se_PutFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2019-09-25/functions/{FunctionName}/event-invoke-config');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          DestinationConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'DestinationConfig'),
          MaximumEventAgeInSeconds: [],
          MaximumRetryAttempts: [],
        })
      );
      b.m('PUT').h(headers).q(query).b(body);
      return b.build();
    }, 'se_PutFunctionEventInvokeConfigCommand');
    var se_PutFunctionRecursionConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2024-08-31/functions/{FunctionName}/recursion-config');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          RecursiveLoop: [],
        })
      );
      b.m('PUT').h(headers).b(body);
      return b.build();
    }, 'se_PutFunctionRecursionConfigCommand');
    var se_PutProvisionedConcurrencyConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2019-09-30/functions/{FunctionName}/provisioned-concurrency');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, (0, import_smithy_client.expectNonNull)(input[_Q], `Qualifier`)],
      });
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          ProvisionedConcurrentExecutions: [],
        })
      );
      b.m('PUT').h(headers).q(query).b(body);
      return b.build();
    }, 'se_PutProvisionedConcurrencyConfigCommand');
    var se_PutRuntimeManagementConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2021-07-20/functions/{FunctionName}/runtime-management-config');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          RuntimeVersionArn: [],
          UpdateRuntimeOn: [],
        })
      );
      b.m('PUT').h(headers).q(query).b(body);
      return b.build();
    }, 'se_PutRuntimeManagementConfigCommand');
    var se_RemoveLayerVersionPermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}');
      b.p('LayerName', () => input.LayerName, '{LayerName}', false);
      b.p('VersionNumber', () => input.VersionNumber.toString(), '{VersionNumber}', false);
      b.p('StatementId', () => input.StatementId, '{StatementId}', false);
      const query = (0, import_smithy_client.map)({
        [_RI]: [, input[_RI]],
      });
      let body;
      b.m('DELETE').h(headers).q(query).b(body);
      return b.build();
    }, 'se_RemoveLayerVersionPermissionCommand');
    var se_RemovePermissionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2015-03-31/functions/{FunctionName}/policy/{StatementId}');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      b.p('StatementId', () => input.StatementId, '{StatementId}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
        [_RI]: [, input[_RI]],
      });
      let body;
      b.m('DELETE').h(headers).q(query).b(body);
      return b.build();
    }, 'se_RemovePermissionCommand');
    var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2017-03-31/tags/{Resource}');
      b.p('Resource', () => input.Resource, '{Resource}', false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          Tags: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Tags'),
        })
      );
      b.m('POST').h(headers).b(body);
      return b.build();
    }, 'se_TagResourceCommand');
    var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {};
      b.bp('/2017-03-31/tags/{Resource}');
      b.p('Resource', () => input.Resource, '{Resource}', false);
      const query = (0, import_smithy_client.map)({
        [_tK]: [(0, import_smithy_client.expectNonNull)(input.TagKeys, `TagKeys`) != null, () => input[_TK] || []],
      });
      let body;
      b.m('DELETE').h(headers).q(query).b(body);
      return b.build();
    }, 'se_UntagResourceCommand');
    var se_UpdateAliasCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2015-03-31/functions/{FunctionName}/aliases/{Name}');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      b.p('Name', () => input.Name, '{Name}', false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          Description: [],
          FunctionVersion: [],
          RevisionId: [],
          RoutingConfig: /* @__PURE__ */ __name((_) => se_AliasRoutingConfiguration(_, context), 'RoutingConfig'),
        })
      );
      b.m('PUT').h(headers).b(body);
      return b.build();
    }, 'se_UpdateAliasCommand');
    var se_UpdateCodeSigningConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2020-04-22/code-signing-configs/{CodeSigningConfigArn}');
      b.p('CodeSigningConfigArn', () => input.CodeSigningConfigArn, '{CodeSigningConfigArn}', false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          AllowedPublishers: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'AllowedPublishers'),
          CodeSigningPolicies: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'CodeSigningPolicies'),
          Description: [],
        })
      );
      b.m('PUT').h(headers).b(body);
      return b.build();
    }, 'se_UpdateCodeSigningConfigCommand');
    var se_UpdateEventSourceMappingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2015-03-31/event-source-mappings/{UUID}');
      b.p('UUID', () => input.UUID, '{UUID}', false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          AmazonManagedKafkaEventSourceConfig: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'AmazonManagedKafkaEventSourceConfig'
          ),
          BatchSize: [],
          BisectBatchOnFunctionError: [],
          DestinationConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'DestinationConfig'),
          DocumentDBEventSourceConfig: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'DocumentDBEventSourceConfig'
          ),
          Enabled: [],
          FilterCriteria: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'FilterCriteria'),
          FunctionName: [],
          FunctionResponseTypes: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'FunctionResponseTypes'
          ),
          KMSKeyArn: [],
          MaximumBatchingWindowInSeconds: [],
          MaximumRecordAgeInSeconds: [],
          MaximumRetryAttempts: [],
          MetricsConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'MetricsConfig'),
          ParallelizationFactor: [],
          ProvisionedPollerConfig: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'ProvisionedPollerConfig'
          ),
          ScalingConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'ScalingConfig'),
          SelfManagedKafkaEventSourceConfig: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'SelfManagedKafkaEventSourceConfig'
          ),
          SourceAccessConfigurations: /* @__PURE__ */ __name(
            (_) => (0, import_smithy_client._json)(_),
            'SourceAccessConfigurations'
          ),
          TumblingWindowInSeconds: [],
        })
      );
      b.m('PUT').h(headers).b(body);
      return b.build();
    }, 'se_UpdateEventSourceMappingCommand');
    var se_UpdateFunctionCodeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2015-03-31/functions/{FunctionName}/code');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          Architectures: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Architectures'),
          DryRun: [],
          ImageUri: [],
          Publish: [],
          RevisionId: [],
          S3Bucket: [],
          S3Key: [],
          S3ObjectVersion: [],
          SourceKMSKeyArn: [],
          ZipFile: /* @__PURE__ */ __name((_) => context.base64Encoder(_), 'ZipFile'),
        })
      );
      b.m('PUT').h(headers).b(body);
      return b.build();
    }, 'se_UpdateFunctionCodeCommand');
    var se_UpdateFunctionConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2015-03-31/functions/{FunctionName}/configuration');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          DeadLetterConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'DeadLetterConfig'),
          Description: [],
          Environment: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Environment'),
          EphemeralStorage: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'EphemeralStorage'),
          FileSystemConfigs: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'FileSystemConfigs'),
          Handler: [],
          ImageConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'ImageConfig'),
          KMSKeyArn: [],
          Layers: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Layers'),
          LoggingConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'LoggingConfig'),
          MemorySize: [],
          RevisionId: [],
          Role: [],
          Runtime: [],
          SnapStart: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'SnapStart'),
          Timeout: [],
          TracingConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'TracingConfig'),
          VpcConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'VpcConfig'),
        })
      );
      b.m('PUT').h(headers).b(body);
      return b.build();
    }, 'se_UpdateFunctionConfigurationCommand');
    var se_UpdateFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2019-09-25/functions/{FunctionName}/event-invoke-config');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          DestinationConfig: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'DestinationConfig'),
          MaximumEventAgeInSeconds: [],
          MaximumRetryAttempts: [],
        })
      );
      b.m('POST').h(headers).q(query).b(body);
      return b.build();
    }, 'se_UpdateFunctionEventInvokeConfigCommand');
    var se_UpdateFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core2.requestBuilder)(input, context);
      const headers = {
        'content-type': 'application/json',
      };
      b.bp('/2021-10-31/functions/{FunctionName}/url');
      b.p('FunctionName', () => input.FunctionName, '{FunctionName}', false);
      const query = (0, import_smithy_client.map)({
        [_Q]: [, input[_Q]],
      });
      let body;
      body = JSON.stringify(
        (0, import_smithy_client.take)(input, {
          AuthType: [],
          Cors: /* @__PURE__ */ __name((_) => (0, import_smithy_client._json)(_), 'Cors'),
          InvokeMode: [],
        })
      );
      b.m('PUT').h(headers).q(query).b(body);
      return b.build();
    }, 'se_UpdateFunctionUrlConfigCommand');
    var de_AddLayerVersionPermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        RevisionId: import_smithy_client.expectString,
        Statement: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_AddLayerVersionPermissionCommand');
    var de_AddPermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Statement: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_AddPermissionCommand');
    var de_CreateAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AliasArn: import_smithy_client.expectString,
        Description: import_smithy_client.expectString,
        FunctionVersion: import_smithy_client.expectString,
        Name: import_smithy_client.expectString,
        RevisionId: import_smithy_client.expectString,
        RoutingConfig: /* @__PURE__ */ __name((_) => de_AliasRoutingConfiguration(_, context), 'RoutingConfig'),
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_CreateAliasCommand');
    var de_CreateCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        CodeSigningConfig: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_CreateCodeSigningConfigCommand');
    var de_CreateEventSourceMappingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AmazonManagedKafkaEventSourceConfig: import_smithy_client._json,
        BatchSize: import_smithy_client.expectInt32,
        BisectBatchOnFunctionError: import_smithy_client.expectBoolean,
        DestinationConfig: import_smithy_client._json,
        DocumentDBEventSourceConfig: import_smithy_client._json,
        EventSourceArn: import_smithy_client.expectString,
        EventSourceMappingArn: import_smithy_client.expectString,
        FilterCriteria: import_smithy_client._json,
        FilterCriteriaError: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        FunctionResponseTypes: import_smithy_client._json,
        KMSKeyArn: import_smithy_client.expectString,
        LastModified: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'LastModified'
        ),
        LastProcessingResult: import_smithy_client.expectString,
        MaximumBatchingWindowInSeconds: import_smithy_client.expectInt32,
        MaximumRecordAgeInSeconds: import_smithy_client.expectInt32,
        MaximumRetryAttempts: import_smithy_client.expectInt32,
        MetricsConfig: import_smithy_client._json,
        ParallelizationFactor: import_smithy_client.expectInt32,
        ProvisionedPollerConfig: import_smithy_client._json,
        Queues: import_smithy_client._json,
        ScalingConfig: import_smithy_client._json,
        SelfManagedEventSource: import_smithy_client._json,
        SelfManagedKafkaEventSourceConfig: import_smithy_client._json,
        SourceAccessConfigurations: import_smithy_client._json,
        StartingPosition: import_smithy_client.expectString,
        StartingPositionTimestamp: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'StartingPositionTimestamp'
        ),
        State: import_smithy_client.expectString,
        StateTransitionReason: import_smithy_client.expectString,
        Topics: import_smithy_client._json,
        TumblingWindowInSeconds: import_smithy_client.expectInt32,
        UUID: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_CreateEventSourceMappingCommand');
    var de_CreateFunctionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Architectures: import_smithy_client._json,
        CodeSha256: import_smithy_client.expectString,
        CodeSize: import_smithy_client.expectLong,
        DeadLetterConfig: import_smithy_client._json,
        Description: import_smithy_client.expectString,
        Environment: import_smithy_client._json,
        EphemeralStorage: import_smithy_client._json,
        FileSystemConfigs: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        FunctionName: import_smithy_client.expectString,
        Handler: import_smithy_client.expectString,
        ImageConfigResponse: import_smithy_client._json,
        KMSKeyArn: import_smithy_client.expectString,
        LastModified: import_smithy_client.expectString,
        LastUpdateStatus: import_smithy_client.expectString,
        LastUpdateStatusReason: import_smithy_client.expectString,
        LastUpdateStatusReasonCode: import_smithy_client.expectString,
        Layers: import_smithy_client._json,
        LoggingConfig: import_smithy_client._json,
        MasterArn: import_smithy_client.expectString,
        MemorySize: import_smithy_client.expectInt32,
        PackageType: import_smithy_client.expectString,
        RevisionId: import_smithy_client.expectString,
        Role: import_smithy_client.expectString,
        Runtime: import_smithy_client.expectString,
        RuntimeVersionConfig: import_smithy_client._json,
        SigningJobArn: import_smithy_client.expectString,
        SigningProfileVersionArn: import_smithy_client.expectString,
        SnapStart: import_smithy_client._json,
        State: import_smithy_client.expectString,
        StateReason: import_smithy_client.expectString,
        StateReasonCode: import_smithy_client.expectString,
        Timeout: import_smithy_client.expectInt32,
        TracingConfig: import_smithy_client._json,
        Version: import_smithy_client.expectString,
        VpcConfig: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_CreateFunctionCommand');
    var de_CreateFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AuthType: import_smithy_client.expectString,
        Cors: import_smithy_client._json,
        CreationTime: import_smithy_client.expectString,
        FunctionArn: import_smithy_client.expectString,
        FunctionUrl: import_smithy_client.expectString,
        InvokeMode: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_CreateFunctionUrlConfigCommand');
    var de_DeleteAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_DeleteAliasCommand');
    var de_DeleteCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_DeleteCodeSigningConfigCommand');
    var de_DeleteEventSourceMappingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AmazonManagedKafkaEventSourceConfig: import_smithy_client._json,
        BatchSize: import_smithy_client.expectInt32,
        BisectBatchOnFunctionError: import_smithy_client.expectBoolean,
        DestinationConfig: import_smithy_client._json,
        DocumentDBEventSourceConfig: import_smithy_client._json,
        EventSourceArn: import_smithy_client.expectString,
        EventSourceMappingArn: import_smithy_client.expectString,
        FilterCriteria: import_smithy_client._json,
        FilterCriteriaError: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        FunctionResponseTypes: import_smithy_client._json,
        KMSKeyArn: import_smithy_client.expectString,
        LastModified: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'LastModified'
        ),
        LastProcessingResult: import_smithy_client.expectString,
        MaximumBatchingWindowInSeconds: import_smithy_client.expectInt32,
        MaximumRecordAgeInSeconds: import_smithy_client.expectInt32,
        MaximumRetryAttempts: import_smithy_client.expectInt32,
        MetricsConfig: import_smithy_client._json,
        ParallelizationFactor: import_smithy_client.expectInt32,
        ProvisionedPollerConfig: import_smithy_client._json,
        Queues: import_smithy_client._json,
        ScalingConfig: import_smithy_client._json,
        SelfManagedEventSource: import_smithy_client._json,
        SelfManagedKafkaEventSourceConfig: import_smithy_client._json,
        SourceAccessConfigurations: import_smithy_client._json,
        StartingPosition: import_smithy_client.expectString,
        StartingPositionTimestamp: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'StartingPositionTimestamp'
        ),
        State: import_smithy_client.expectString,
        StateTransitionReason: import_smithy_client.expectString,
        Topics: import_smithy_client._json,
        TumblingWindowInSeconds: import_smithy_client.expectInt32,
        UUID: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_DeleteEventSourceMappingCommand');
    var de_DeleteFunctionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_DeleteFunctionCommand');
    var de_DeleteFunctionCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_DeleteFunctionCodeSigningConfigCommand');
    var de_DeleteFunctionConcurrencyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_DeleteFunctionConcurrencyCommand');
    var de_DeleteFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_DeleteFunctionEventInvokeConfigCommand');
    var de_DeleteFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_DeleteFunctionUrlConfigCommand');
    var de_DeleteLayerVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_DeleteLayerVersionCommand');
    var de_DeleteProvisionedConcurrencyConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_DeleteProvisionedConcurrencyConfigCommand');
    var de_GetAccountSettingsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AccountLimit: import_smithy_client._json,
        AccountUsage: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetAccountSettingsCommand');
    var de_GetAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AliasArn: import_smithy_client.expectString,
        Description: import_smithy_client.expectString,
        FunctionVersion: import_smithy_client.expectString,
        Name: import_smithy_client.expectString,
        RevisionId: import_smithy_client.expectString,
        RoutingConfig: /* @__PURE__ */ __name((_) => de_AliasRoutingConfiguration(_, context), 'RoutingConfig'),
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetAliasCommand');
    var de_GetCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        CodeSigningConfig: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetCodeSigningConfigCommand');
    var de_GetEventSourceMappingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AmazonManagedKafkaEventSourceConfig: import_smithy_client._json,
        BatchSize: import_smithy_client.expectInt32,
        BisectBatchOnFunctionError: import_smithy_client.expectBoolean,
        DestinationConfig: import_smithy_client._json,
        DocumentDBEventSourceConfig: import_smithy_client._json,
        EventSourceArn: import_smithy_client.expectString,
        EventSourceMappingArn: import_smithy_client.expectString,
        FilterCriteria: import_smithy_client._json,
        FilterCriteriaError: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        FunctionResponseTypes: import_smithy_client._json,
        KMSKeyArn: import_smithy_client.expectString,
        LastModified: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'LastModified'
        ),
        LastProcessingResult: import_smithy_client.expectString,
        MaximumBatchingWindowInSeconds: import_smithy_client.expectInt32,
        MaximumRecordAgeInSeconds: import_smithy_client.expectInt32,
        MaximumRetryAttempts: import_smithy_client.expectInt32,
        MetricsConfig: import_smithy_client._json,
        ParallelizationFactor: import_smithy_client.expectInt32,
        ProvisionedPollerConfig: import_smithy_client._json,
        Queues: import_smithy_client._json,
        ScalingConfig: import_smithy_client._json,
        SelfManagedEventSource: import_smithy_client._json,
        SelfManagedKafkaEventSourceConfig: import_smithy_client._json,
        SourceAccessConfigurations: import_smithy_client._json,
        StartingPosition: import_smithy_client.expectString,
        StartingPositionTimestamp: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'StartingPositionTimestamp'
        ),
        State: import_smithy_client.expectString,
        StateTransitionReason: import_smithy_client.expectString,
        Topics: import_smithy_client._json,
        TumblingWindowInSeconds: import_smithy_client.expectInt32,
        UUID: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetEventSourceMappingCommand');
    var de_GetFunctionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Code: import_smithy_client._json,
        Concurrency: import_smithy_client._json,
        Configuration: import_smithy_client._json,
        Tags: import_smithy_client._json,
        TagsError: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetFunctionCommand');
    var de_GetFunctionCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        CodeSigningConfigArn: import_smithy_client.expectString,
        FunctionName: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetFunctionCodeSigningConfigCommand');
    var de_GetFunctionConcurrencyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        ReservedConcurrentExecutions: import_smithy_client.expectInt32,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetFunctionConcurrencyCommand');
    var de_GetFunctionConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Architectures: import_smithy_client._json,
        CodeSha256: import_smithy_client.expectString,
        CodeSize: import_smithy_client.expectLong,
        DeadLetterConfig: import_smithy_client._json,
        Description: import_smithy_client.expectString,
        Environment: import_smithy_client._json,
        EphemeralStorage: import_smithy_client._json,
        FileSystemConfigs: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        FunctionName: import_smithy_client.expectString,
        Handler: import_smithy_client.expectString,
        ImageConfigResponse: import_smithy_client._json,
        KMSKeyArn: import_smithy_client.expectString,
        LastModified: import_smithy_client.expectString,
        LastUpdateStatus: import_smithy_client.expectString,
        LastUpdateStatusReason: import_smithy_client.expectString,
        LastUpdateStatusReasonCode: import_smithy_client.expectString,
        Layers: import_smithy_client._json,
        LoggingConfig: import_smithy_client._json,
        MasterArn: import_smithy_client.expectString,
        MemorySize: import_smithy_client.expectInt32,
        PackageType: import_smithy_client.expectString,
        RevisionId: import_smithy_client.expectString,
        Role: import_smithy_client.expectString,
        Runtime: import_smithy_client.expectString,
        RuntimeVersionConfig: import_smithy_client._json,
        SigningJobArn: import_smithy_client.expectString,
        SigningProfileVersionArn: import_smithy_client.expectString,
        SnapStart: import_smithy_client._json,
        State: import_smithy_client.expectString,
        StateReason: import_smithy_client.expectString,
        StateReasonCode: import_smithy_client.expectString,
        Timeout: import_smithy_client.expectInt32,
        TracingConfig: import_smithy_client._json,
        Version: import_smithy_client.expectString,
        VpcConfig: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetFunctionConfigurationCommand');
    var de_GetFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        DestinationConfig: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        LastModified: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'LastModified'
        ),
        MaximumEventAgeInSeconds: import_smithy_client.expectInt32,
        MaximumRetryAttempts: import_smithy_client.expectInt32,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetFunctionEventInvokeConfigCommand');
    var de_GetFunctionRecursionConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        RecursiveLoop: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetFunctionRecursionConfigCommand');
    var de_GetFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AuthType: import_smithy_client.expectString,
        Cors: import_smithy_client._json,
        CreationTime: import_smithy_client.expectString,
        FunctionArn: import_smithy_client.expectString,
        FunctionUrl: import_smithy_client.expectString,
        InvokeMode: import_smithy_client.expectString,
        LastModifiedTime: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetFunctionUrlConfigCommand');
    var de_GetLayerVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        CompatibleArchitectures: import_smithy_client._json,
        CompatibleRuntimes: import_smithy_client._json,
        Content: import_smithy_client._json,
        CreatedDate: import_smithy_client.expectString,
        Description: import_smithy_client.expectString,
        LayerArn: import_smithy_client.expectString,
        LayerVersionArn: import_smithy_client.expectString,
        LicenseInfo: import_smithy_client.expectString,
        Version: import_smithy_client.expectLong,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetLayerVersionCommand');
    var de_GetLayerVersionByArnCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        CompatibleArchitectures: import_smithy_client._json,
        CompatibleRuntimes: import_smithy_client._json,
        Content: import_smithy_client._json,
        CreatedDate: import_smithy_client.expectString,
        Description: import_smithy_client.expectString,
        LayerArn: import_smithy_client.expectString,
        LayerVersionArn: import_smithy_client.expectString,
        LicenseInfo: import_smithy_client.expectString,
        Version: import_smithy_client.expectLong,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetLayerVersionByArnCommand');
    var de_GetLayerVersionPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Policy: import_smithy_client.expectString,
        RevisionId: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetLayerVersionPolicyCommand');
    var de_GetPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Policy: import_smithy_client.expectString,
        RevisionId: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetPolicyCommand');
    var de_GetProvisionedConcurrencyConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AllocatedProvisionedConcurrentExecutions: import_smithy_client.expectInt32,
        AvailableProvisionedConcurrentExecutions: import_smithy_client.expectInt32,
        LastModified: import_smithy_client.expectString,
        RequestedProvisionedConcurrentExecutions: import_smithy_client.expectInt32,
        Status: import_smithy_client.expectString,
        StatusReason: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetProvisionedConcurrencyConfigCommand');
    var de_GetRuntimeManagementConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        FunctionArn: import_smithy_client.expectString,
        RuntimeVersionArn: import_smithy_client.expectString,
        UpdateRuntimeOn: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_GetRuntimeManagementConfigCommand');
    var de_InvokeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
        [_FE]: [, output.headers[_xafe]],
        [_LR]: [, output.headers[_xalr]],
        [_EV]: [, output.headers[_xaev]],
      });
      const data = await (0, import_smithy_client.collectBody)(output.body, context);
      contents.Payload = data;
      (0, import_smithy_client.map)(contents, {
        StatusCode: [, output.statusCode],
      });
      return contents;
    }, 'de_InvokeCommand');
    var de_InvokeAsyncCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      (0, import_smithy_client.map)(contents, {
        Status: [, output.statusCode],
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_InvokeAsyncCommand');
    var de_InvokeWithResponseStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
        [_EV]: [, output.headers[_xaev]],
        [_RSCT]: [, output.headers[_ct]],
      });
      const data = output.body;
      contents.EventStream = de_InvokeWithResponseStreamResponseEvent(data, context);
      (0, import_smithy_client.map)(contents, {
        StatusCode: [, output.statusCode],
      });
      return contents;
    }, 'de_InvokeWithResponseStreamCommand');
    var de_ListAliasesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Aliases: /* @__PURE__ */ __name((_) => de_AliasList(_, context), 'Aliases'),
        NextMarker: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListAliasesCommand');
    var de_ListCodeSigningConfigsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        CodeSigningConfigs: import_smithy_client._json,
        NextMarker: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListCodeSigningConfigsCommand');
    var de_ListEventSourceMappingsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        EventSourceMappings: /* @__PURE__ */ __name(
          (_) => de_EventSourceMappingsList(_, context),
          'EventSourceMappings'
        ),
        NextMarker: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListEventSourceMappingsCommand');
    var de_ListFunctionEventInvokeConfigsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        FunctionEventInvokeConfigs: /* @__PURE__ */ __name(
          (_) => de_FunctionEventInvokeConfigList(_, context),
          'FunctionEventInvokeConfigs'
        ),
        NextMarker: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListFunctionEventInvokeConfigsCommand');
    var de_ListFunctionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Functions: import_smithy_client._json,
        NextMarker: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListFunctionsCommand');
    var de_ListFunctionsByCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        FunctionArns: import_smithy_client._json,
        NextMarker: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListFunctionsByCodeSigningConfigCommand');
    var de_ListFunctionUrlConfigsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        FunctionUrlConfigs: import_smithy_client._json,
        NextMarker: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListFunctionUrlConfigsCommand');
    var de_ListLayersCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Layers: import_smithy_client._json,
        NextMarker: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListLayersCommand');
    var de_ListLayerVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        LayerVersions: import_smithy_client._json,
        NextMarker: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListLayerVersionsCommand');
    var de_ListProvisionedConcurrencyConfigsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        NextMarker: import_smithy_client.expectString,
        ProvisionedConcurrencyConfigs: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListProvisionedConcurrencyConfigsCommand');
    var de_ListTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Tags: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListTagsCommand');
    var de_ListVersionsByFunctionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        NextMarker: import_smithy_client.expectString,
        Versions: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_ListVersionsByFunctionCommand');
    var de_PublishLayerVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        CompatibleArchitectures: import_smithy_client._json,
        CompatibleRuntimes: import_smithy_client._json,
        Content: import_smithy_client._json,
        CreatedDate: import_smithy_client.expectString,
        Description: import_smithy_client.expectString,
        LayerArn: import_smithy_client.expectString,
        LayerVersionArn: import_smithy_client.expectString,
        LicenseInfo: import_smithy_client.expectString,
        Version: import_smithy_client.expectLong,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_PublishLayerVersionCommand');
    var de_PublishVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Architectures: import_smithy_client._json,
        CodeSha256: import_smithy_client.expectString,
        CodeSize: import_smithy_client.expectLong,
        DeadLetterConfig: import_smithy_client._json,
        Description: import_smithy_client.expectString,
        Environment: import_smithy_client._json,
        EphemeralStorage: import_smithy_client._json,
        FileSystemConfigs: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        FunctionName: import_smithy_client.expectString,
        Handler: import_smithy_client.expectString,
        ImageConfigResponse: import_smithy_client._json,
        KMSKeyArn: import_smithy_client.expectString,
        LastModified: import_smithy_client.expectString,
        LastUpdateStatus: import_smithy_client.expectString,
        LastUpdateStatusReason: import_smithy_client.expectString,
        LastUpdateStatusReasonCode: import_smithy_client.expectString,
        Layers: import_smithy_client._json,
        LoggingConfig: import_smithy_client._json,
        MasterArn: import_smithy_client.expectString,
        MemorySize: import_smithy_client.expectInt32,
        PackageType: import_smithy_client.expectString,
        RevisionId: import_smithy_client.expectString,
        Role: import_smithy_client.expectString,
        Runtime: import_smithy_client.expectString,
        RuntimeVersionConfig: import_smithy_client._json,
        SigningJobArn: import_smithy_client.expectString,
        SigningProfileVersionArn: import_smithy_client.expectString,
        SnapStart: import_smithy_client._json,
        State: import_smithy_client.expectString,
        StateReason: import_smithy_client.expectString,
        StateReasonCode: import_smithy_client.expectString,
        Timeout: import_smithy_client.expectInt32,
        TracingConfig: import_smithy_client._json,
        Version: import_smithy_client.expectString,
        VpcConfig: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_PublishVersionCommand');
    var de_PutFunctionCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        CodeSigningConfigArn: import_smithy_client.expectString,
        FunctionName: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_PutFunctionCodeSigningConfigCommand');
    var de_PutFunctionConcurrencyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        ReservedConcurrentExecutions: import_smithy_client.expectInt32,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_PutFunctionConcurrencyCommand');
    var de_PutFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        DestinationConfig: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        LastModified: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'LastModified'
        ),
        MaximumEventAgeInSeconds: import_smithy_client.expectInt32,
        MaximumRetryAttempts: import_smithy_client.expectInt32,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_PutFunctionEventInvokeConfigCommand');
    var de_PutFunctionRecursionConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        RecursiveLoop: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_PutFunctionRecursionConfigCommand');
    var de_PutProvisionedConcurrencyConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AllocatedProvisionedConcurrentExecutions: import_smithy_client.expectInt32,
        AvailableProvisionedConcurrentExecutions: import_smithy_client.expectInt32,
        LastModified: import_smithy_client.expectString,
        RequestedProvisionedConcurrentExecutions: import_smithy_client.expectInt32,
        Status: import_smithy_client.expectString,
        StatusReason: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_PutProvisionedConcurrencyConfigCommand');
    var de_PutRuntimeManagementConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        FunctionArn: import_smithy_client.expectString,
        RuntimeVersionArn: import_smithy_client.expectString,
        UpdateRuntimeOn: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_PutRuntimeManagementConfigCommand');
    var de_RemoveLayerVersionPermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_RemoveLayerVersionPermissionCommand');
    var de_RemovePermissionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_RemovePermissionCommand');
    var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_TagResourceCommand');
    var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      await (0, import_smithy_client.collectBody)(output.body, context);
      return contents;
    }, 'de_UntagResourceCommand');
    var de_UpdateAliasCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AliasArn: import_smithy_client.expectString,
        Description: import_smithy_client.expectString,
        FunctionVersion: import_smithy_client.expectString,
        Name: import_smithy_client.expectString,
        RevisionId: import_smithy_client.expectString,
        RoutingConfig: /* @__PURE__ */ __name((_) => de_AliasRoutingConfiguration(_, context), 'RoutingConfig'),
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_UpdateAliasCommand');
    var de_UpdateCodeSigningConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        CodeSigningConfig: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_UpdateCodeSigningConfigCommand');
    var de_UpdateEventSourceMappingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AmazonManagedKafkaEventSourceConfig: import_smithy_client._json,
        BatchSize: import_smithy_client.expectInt32,
        BisectBatchOnFunctionError: import_smithy_client.expectBoolean,
        DestinationConfig: import_smithy_client._json,
        DocumentDBEventSourceConfig: import_smithy_client._json,
        EventSourceArn: import_smithy_client.expectString,
        EventSourceMappingArn: import_smithy_client.expectString,
        FilterCriteria: import_smithy_client._json,
        FilterCriteriaError: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        FunctionResponseTypes: import_smithy_client._json,
        KMSKeyArn: import_smithy_client.expectString,
        LastModified: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'LastModified'
        ),
        LastProcessingResult: import_smithy_client.expectString,
        MaximumBatchingWindowInSeconds: import_smithy_client.expectInt32,
        MaximumRecordAgeInSeconds: import_smithy_client.expectInt32,
        MaximumRetryAttempts: import_smithy_client.expectInt32,
        MetricsConfig: import_smithy_client._json,
        ParallelizationFactor: import_smithy_client.expectInt32,
        ProvisionedPollerConfig: import_smithy_client._json,
        Queues: import_smithy_client._json,
        ScalingConfig: import_smithy_client._json,
        SelfManagedEventSource: import_smithy_client._json,
        SelfManagedKafkaEventSourceConfig: import_smithy_client._json,
        SourceAccessConfigurations: import_smithy_client._json,
        StartingPosition: import_smithy_client.expectString,
        StartingPositionTimestamp: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'StartingPositionTimestamp'
        ),
        State: import_smithy_client.expectString,
        StateTransitionReason: import_smithy_client.expectString,
        Topics: import_smithy_client._json,
        TumblingWindowInSeconds: import_smithy_client.expectInt32,
        UUID: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_UpdateEventSourceMappingCommand');
    var de_UpdateFunctionCodeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Architectures: import_smithy_client._json,
        CodeSha256: import_smithy_client.expectString,
        CodeSize: import_smithy_client.expectLong,
        DeadLetterConfig: import_smithy_client._json,
        Description: import_smithy_client.expectString,
        Environment: import_smithy_client._json,
        EphemeralStorage: import_smithy_client._json,
        FileSystemConfigs: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        FunctionName: import_smithy_client.expectString,
        Handler: import_smithy_client.expectString,
        ImageConfigResponse: import_smithy_client._json,
        KMSKeyArn: import_smithy_client.expectString,
        LastModified: import_smithy_client.expectString,
        LastUpdateStatus: import_smithy_client.expectString,
        LastUpdateStatusReason: import_smithy_client.expectString,
        LastUpdateStatusReasonCode: import_smithy_client.expectString,
        Layers: import_smithy_client._json,
        LoggingConfig: import_smithy_client._json,
        MasterArn: import_smithy_client.expectString,
        MemorySize: import_smithy_client.expectInt32,
        PackageType: import_smithy_client.expectString,
        RevisionId: import_smithy_client.expectString,
        Role: import_smithy_client.expectString,
        Runtime: import_smithy_client.expectString,
        RuntimeVersionConfig: import_smithy_client._json,
        SigningJobArn: import_smithy_client.expectString,
        SigningProfileVersionArn: import_smithy_client.expectString,
        SnapStart: import_smithy_client._json,
        State: import_smithy_client.expectString,
        StateReason: import_smithy_client.expectString,
        StateReasonCode: import_smithy_client.expectString,
        Timeout: import_smithy_client.expectInt32,
        TracingConfig: import_smithy_client._json,
        Version: import_smithy_client.expectString,
        VpcConfig: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_UpdateFunctionCodeCommand');
    var de_UpdateFunctionConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        Architectures: import_smithy_client._json,
        CodeSha256: import_smithy_client.expectString,
        CodeSize: import_smithy_client.expectLong,
        DeadLetterConfig: import_smithy_client._json,
        Description: import_smithy_client.expectString,
        Environment: import_smithy_client._json,
        EphemeralStorage: import_smithy_client._json,
        FileSystemConfigs: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        FunctionName: import_smithy_client.expectString,
        Handler: import_smithy_client.expectString,
        ImageConfigResponse: import_smithy_client._json,
        KMSKeyArn: import_smithy_client.expectString,
        LastModified: import_smithy_client.expectString,
        LastUpdateStatus: import_smithy_client.expectString,
        LastUpdateStatusReason: import_smithy_client.expectString,
        LastUpdateStatusReasonCode: import_smithy_client.expectString,
        Layers: import_smithy_client._json,
        LoggingConfig: import_smithy_client._json,
        MasterArn: import_smithy_client.expectString,
        MemorySize: import_smithy_client.expectInt32,
        PackageType: import_smithy_client.expectString,
        RevisionId: import_smithy_client.expectString,
        Role: import_smithy_client.expectString,
        Runtime: import_smithy_client.expectString,
        RuntimeVersionConfig: import_smithy_client._json,
        SigningJobArn: import_smithy_client.expectString,
        SigningProfileVersionArn: import_smithy_client.expectString,
        SnapStart: import_smithy_client._json,
        State: import_smithy_client.expectString,
        StateReason: import_smithy_client.expectString,
        StateReasonCode: import_smithy_client.expectString,
        Timeout: import_smithy_client.expectInt32,
        TracingConfig: import_smithy_client._json,
        Version: import_smithy_client.expectString,
        VpcConfig: import_smithy_client._json,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_UpdateFunctionConfigurationCommand');
    var de_UpdateFunctionEventInvokeConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        DestinationConfig: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        LastModified: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'LastModified'
        ),
        MaximumEventAgeInSeconds: import_smithy_client.expectInt32,
        MaximumRetryAttempts: import_smithy_client.expectInt32,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_UpdateFunctionEventInvokeConfigCommand');
    var de_UpdateFunctionUrlConfigCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, import_smithy_client.expectNonNull)(
        (0, import_smithy_client.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)),
        'body'
      );
      const doc = (0, import_smithy_client.take)(data, {
        AuthType: import_smithy_client.expectString,
        Cors: import_smithy_client._json,
        CreationTime: import_smithy_client.expectString,
        FunctionArn: import_smithy_client.expectString,
        FunctionUrl: import_smithy_client.expectString,
        InvokeMode: import_smithy_client.expectString,
        LastModifiedTime: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    }, 'de_UpdateFunctionUrlConfigCommand');
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context),
      });
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidParameterValueException':
        case 'com.amazonaws.lambda#InvalidParameterValueException':
          throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case 'PolicyLengthExceededException':
        case 'com.amazonaws.lambda#PolicyLengthExceededException':
          throw await de_PolicyLengthExceededExceptionRes(parsedOutput, context);
        case 'PreconditionFailedException':
        case 'com.amazonaws.lambda#PreconditionFailedException':
          throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
        case 'ResourceConflictException':
        case 'com.amazonaws.lambda#ResourceConflictException':
          throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.lambda#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'ServiceException':
        case 'com.amazonaws.lambda#ServiceException':
          throw await de_ServiceExceptionRes(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.lambda#TooManyRequestsException':
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case 'CodeSigningConfigNotFoundException':
        case 'com.amazonaws.lambda#CodeSigningConfigNotFoundException':
          throw await de_CodeSigningConfigNotFoundExceptionRes(parsedOutput, context);
        case 'CodeStorageExceededException':
        case 'com.amazonaws.lambda#CodeStorageExceededException':
          throw await de_CodeStorageExceededExceptionRes(parsedOutput, context);
        case 'CodeVerificationFailedException':
        case 'com.amazonaws.lambda#CodeVerificationFailedException':
          throw await de_CodeVerificationFailedExceptionRes(parsedOutput, context);
        case 'InvalidCodeSignatureException':
        case 'com.amazonaws.lambda#InvalidCodeSignatureException':
          throw await de_InvalidCodeSignatureExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.lambda#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ProvisionedConcurrencyConfigNotFoundException':
        case 'com.amazonaws.lambda#ProvisionedConcurrencyConfigNotFoundException':
          throw await de_ProvisionedConcurrencyConfigNotFoundExceptionRes(parsedOutput, context);
        case 'EC2AccessDeniedException':
        case 'com.amazonaws.lambda#EC2AccessDeniedException':
          throw await de_EC2AccessDeniedExceptionRes(parsedOutput, context);
        case 'EC2ThrottledException':
        case 'com.amazonaws.lambda#EC2ThrottledException':
          throw await de_EC2ThrottledExceptionRes(parsedOutput, context);
        case 'EC2UnexpectedException':
        case 'com.amazonaws.lambda#EC2UnexpectedException':
          throw await de_EC2UnexpectedExceptionRes(parsedOutput, context);
        case 'EFSIOException':
        case 'com.amazonaws.lambda#EFSIOException':
          throw await de_EFSIOExceptionRes(parsedOutput, context);
        case 'EFSMountConnectivityException':
        case 'com.amazonaws.lambda#EFSMountConnectivityException':
          throw await de_EFSMountConnectivityExceptionRes(parsedOutput, context);
        case 'EFSMountFailureException':
        case 'com.amazonaws.lambda#EFSMountFailureException':
          throw await de_EFSMountFailureExceptionRes(parsedOutput, context);
        case 'EFSMountTimeoutException':
        case 'com.amazonaws.lambda#EFSMountTimeoutException':
          throw await de_EFSMountTimeoutExceptionRes(parsedOutput, context);
        case 'ENILimitReachedException':
        case 'com.amazonaws.lambda#ENILimitReachedException':
          throw await de_ENILimitReachedExceptionRes(parsedOutput, context);
        case 'InvalidRequestContentException':
        case 'com.amazonaws.lambda#InvalidRequestContentException':
          throw await de_InvalidRequestContentExceptionRes(parsedOutput, context);
        case 'InvalidRuntimeException':
        case 'com.amazonaws.lambda#InvalidRuntimeException':
          throw await de_InvalidRuntimeExceptionRes(parsedOutput, context);
        case 'InvalidSecurityGroupIDException':
        case 'com.amazonaws.lambda#InvalidSecurityGroupIDException':
          throw await de_InvalidSecurityGroupIDExceptionRes(parsedOutput, context);
        case 'InvalidSubnetIDException':
        case 'com.amazonaws.lambda#InvalidSubnetIDException':
          throw await de_InvalidSubnetIDExceptionRes(parsedOutput, context);
        case 'InvalidZipFileException':
        case 'com.amazonaws.lambda#InvalidZipFileException':
          throw await de_InvalidZipFileExceptionRes(parsedOutput, context);
        case 'KMSAccessDeniedException':
        case 'com.amazonaws.lambda#KMSAccessDeniedException':
          throw await de_KMSAccessDeniedExceptionRes(parsedOutput, context);
        case 'KMSDisabledException':
        case 'com.amazonaws.lambda#KMSDisabledException':
          throw await de_KMSDisabledExceptionRes(parsedOutput, context);
        case 'KMSInvalidStateException':
        case 'com.amazonaws.lambda#KMSInvalidStateException':
          throw await de_KMSInvalidStateExceptionRes(parsedOutput, context);
        case 'KMSNotFoundException':
        case 'com.amazonaws.lambda#KMSNotFoundException':
          throw await de_KMSNotFoundExceptionRes(parsedOutput, context);
        case 'RecursiveInvocationException':
        case 'com.amazonaws.lambda#RecursiveInvocationException':
          throw await de_RecursiveInvocationExceptionRes(parsedOutput, context);
        case 'RequestTooLargeException':
        case 'com.amazonaws.lambda#RequestTooLargeException':
          throw await de_RequestTooLargeExceptionRes(parsedOutput, context);
        case 'ResourceNotReadyException':
        case 'com.amazonaws.lambda#ResourceNotReadyException':
          throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        case 'SnapStartException':
        case 'com.amazonaws.lambda#SnapStartException':
          throw await de_SnapStartExceptionRes(parsedOutput, context);
        case 'SnapStartNotReadyException':
        case 'com.amazonaws.lambda#SnapStartNotReadyException':
          throw await de_SnapStartNotReadyExceptionRes(parsedOutput, context);
        case 'SnapStartTimeoutException':
        case 'com.amazonaws.lambda#SnapStartTimeoutException':
          throw await de_SnapStartTimeoutExceptionRes(parsedOutput, context);
        case 'SubnetIPAddressLimitReachedException':
        case 'com.amazonaws.lambda#SubnetIPAddressLimitReachedException':
          throw await de_SubnetIPAddressLimitReachedExceptionRes(parsedOutput, context);
        case 'UnsupportedMediaTypeException':
        case 'com.amazonaws.lambda#UnsupportedMediaTypeException':
          throw await de_UnsupportedMediaTypeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    }, 'de_CommandError');
    var throwDefaultError = (0, import_smithy_client.withBaseException)(LambdaServiceException);
    var de_CodeSigningConfigNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new CodeSigningConfigNotFoundException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_CodeSigningConfigNotFoundExceptionRes');
    var de_CodeStorageExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Type: import_smithy_client.expectString,
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new CodeStorageExceededException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_CodeStorageExceededExceptionRes');
    var de_CodeVerificationFailedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new CodeVerificationFailedException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_CodeVerificationFailedExceptionRes');
    var de_EC2AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new EC2AccessDeniedException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_EC2AccessDeniedExceptionRes');
    var de_EC2ThrottledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new EC2ThrottledException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_EC2ThrottledExceptionRes');
    var de_EC2UnexpectedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        EC2ErrorCode: import_smithy_client.expectString,
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new EC2UnexpectedException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_EC2UnexpectedExceptionRes');
    var de_EFSIOExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new EFSIOException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_EFSIOExceptionRes');
    var de_EFSMountConnectivityExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new EFSMountConnectivityException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_EFSMountConnectivityExceptionRes');
    var de_EFSMountFailureExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new EFSMountFailureException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_EFSMountFailureExceptionRes');
    var de_EFSMountTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new EFSMountTimeoutException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_EFSMountTimeoutExceptionRes');
    var de_ENILimitReachedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new ENILimitReachedException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_ENILimitReachedExceptionRes');
    var de_InvalidCodeSignatureExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InvalidCodeSignatureException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InvalidCodeSignatureExceptionRes');
    var de_InvalidParameterValueExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Type: import_smithy_client.expectString,
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InvalidParameterValueException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InvalidParameterValueExceptionRes');
    var de_InvalidRequestContentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Type: import_smithy_client.expectString,
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestContentException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InvalidRequestContentExceptionRes');
    var de_InvalidRuntimeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InvalidRuntimeException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InvalidRuntimeExceptionRes');
    var de_InvalidSecurityGroupIDExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InvalidSecurityGroupIDException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InvalidSecurityGroupIDExceptionRes');
    var de_InvalidSubnetIDExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InvalidSubnetIDException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InvalidSubnetIDExceptionRes');
    var de_InvalidZipFileExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new InvalidZipFileException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_InvalidZipFileExceptionRes');
    var de_KMSAccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new KMSAccessDeniedException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_KMSAccessDeniedExceptionRes');
    var de_KMSDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new KMSDisabledException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_KMSDisabledExceptionRes');
    var de_KMSInvalidStateExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new KMSInvalidStateException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_KMSInvalidStateExceptionRes');
    var de_KMSNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new KMSNotFoundException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_KMSNotFoundExceptionRes');
    var de_PolicyLengthExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Type: import_smithy_client.expectString,
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new PolicyLengthExceededException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_PolicyLengthExceededExceptionRes');
    var de_PreconditionFailedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Type: import_smithy_client.expectString,
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new PreconditionFailedException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_PreconditionFailedExceptionRes');
    var de_ProvisionedConcurrencyConfigNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Type: import_smithy_client.expectString,
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new ProvisionedConcurrencyConfigNotFoundException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_ProvisionedConcurrencyConfigNotFoundExceptionRes');
    var de_RecursiveInvocationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new RecursiveInvocationException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_RecursiveInvocationExceptionRes');
    var de_RequestTooLargeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Type: import_smithy_client.expectString,
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new RequestTooLargeException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_RequestTooLargeExceptionRes');
    var de_ResourceConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Type: import_smithy_client.expectString,
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new ResourceConflictException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_ResourceConflictExceptionRes');
    var de_ResourceInUseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new ResourceInUseException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_ResourceInUseExceptionRes');
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_ResourceNotFoundExceptionRes');
    var de_ResourceNotReadyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Type: import_smithy_client.expectString,
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotReadyException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_ResourceNotReadyExceptionRes');
    var de_ServiceExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new ServiceException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_ServiceExceptionRes');
    var de_SnapStartExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new SnapStartException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_SnapStartExceptionRes');
    var de_SnapStartNotReadyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new SnapStartNotReadyException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_SnapStartNotReadyExceptionRes');
    var de_SnapStartTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new SnapStartTimeoutException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_SnapStartTimeoutExceptionRes');
    var de_SubnetIPAddressLimitReachedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Message: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new SubnetIPAddressLimitReachedException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_SubnetIPAddressLimitReachedExceptionRes');
    var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({
        [_rAS]: [, parsedOutput.headers[_ra]],
      });
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Reason: import_smithy_client.expectString,
        Type: import_smithy_client.expectString,
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new TooManyRequestsException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_TooManyRequestsExceptionRes');
    var de_UnsupportedMediaTypeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client.take)(data, {
        Type: import_smithy_client.expectString,
        message: import_smithy_client.expectString,
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedMediaTypeException(
        __spreadValues(
          {
            $metadata: deserializeMetadata(parsedOutput),
          },
          contents
        )
      );
      return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
    }, 'de_UnsupportedMediaTypeExceptionRes');
    var de_InvokeWithResponseStreamResponseEvent = /* @__PURE__ */ __name((output, context) => {
      return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event['PayloadChunk'] != null) {
          return {
            PayloadChunk: await de_InvokeResponseStreamUpdate_event(event['PayloadChunk'], context),
          };
        }
        if (event['InvokeComplete'] != null) {
          return {
            InvokeComplete: await de_InvokeWithResponseStreamCompleteEvent_event(event['InvokeComplete'], context),
          };
        }
        return { $unknown: event };
      });
    }, 'de_InvokeWithResponseStreamResponseEvent');
    var de_InvokeResponseStreamUpdate_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      contents.Payload = output.body;
      return contents;
    }, 'de_InvokeResponseStreamUpdate_event');
    var de_InvokeWithResponseStreamCompleteEvent_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      const data = await (0, import_core22.parseJsonBody)(output.body, context);
      Object.assign(contents, (0, import_smithy_client._json)(data));
      return contents;
    }, 'de_InvokeWithResponseStreamCompleteEvent_event');
    var se_AdditionalVersionWeights = /* @__PURE__ */ __name((input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, import_smithy_client.serializeFloat)(value);
        return acc;
      }, {});
    }, 'se_AdditionalVersionWeights');
    var se_AliasRoutingConfiguration = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client.take)(input, {
        AdditionalVersionWeights: /* @__PURE__ */ __name(
          (_) => se_AdditionalVersionWeights(_, context),
          'AdditionalVersionWeights'
        ),
      });
    }, 'se_AliasRoutingConfiguration');
    var se_FunctionCode = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client.take)(input, {
        ImageUri: [],
        S3Bucket: [],
        S3Key: [],
        S3ObjectVersion: [],
        SourceKMSKeyArn: [],
        ZipFile: context.base64Encoder,
      });
    }, 'se_FunctionCode');
    var se_LayerVersionContentInput = /* @__PURE__ */ __name((input, context) => {
      return (0, import_smithy_client.take)(input, {
        S3Bucket: [],
        S3Key: [],
        S3ObjectVersion: [],
        ZipFile: context.base64Encoder,
      });
    }, 'se_LayerVersionContentInput');
    var de_AdditionalVersionWeights = /* @__PURE__ */ __name((output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, import_smithy_client.limitedParseDouble)(value);
        return acc;
      }, {});
    }, 'de_AdditionalVersionWeights');
    var de_AliasConfiguration = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client.take)(output, {
        AliasArn: import_smithy_client.expectString,
        Description: import_smithy_client.expectString,
        FunctionVersion: import_smithy_client.expectString,
        Name: import_smithy_client.expectString,
        RevisionId: import_smithy_client.expectString,
        RoutingConfig: /* @__PURE__ */ __name((_) => de_AliasRoutingConfiguration(_, context), 'RoutingConfig'),
      });
    }, 'de_AliasConfiguration');
    var de_AliasList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_AliasConfiguration(entry, context);
        });
      return retVal;
    }, 'de_AliasList');
    var de_AliasRoutingConfiguration = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client.take)(output, {
        AdditionalVersionWeights: /* @__PURE__ */ __name(
          (_) => de_AdditionalVersionWeights(_, context),
          'AdditionalVersionWeights'
        ),
      });
    }, 'de_AliasRoutingConfiguration');
    var de_EventSourceMappingConfiguration = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client.take)(output, {
        AmazonManagedKafkaEventSourceConfig: import_smithy_client._json,
        BatchSize: import_smithy_client.expectInt32,
        BisectBatchOnFunctionError: import_smithy_client.expectBoolean,
        DestinationConfig: import_smithy_client._json,
        DocumentDBEventSourceConfig: import_smithy_client._json,
        EventSourceArn: import_smithy_client.expectString,
        EventSourceMappingArn: import_smithy_client.expectString,
        FilterCriteria: import_smithy_client._json,
        FilterCriteriaError: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        FunctionResponseTypes: import_smithy_client._json,
        KMSKeyArn: import_smithy_client.expectString,
        LastModified: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'LastModified'
        ),
        LastProcessingResult: import_smithy_client.expectString,
        MaximumBatchingWindowInSeconds: import_smithy_client.expectInt32,
        MaximumRecordAgeInSeconds: import_smithy_client.expectInt32,
        MaximumRetryAttempts: import_smithy_client.expectInt32,
        MetricsConfig: import_smithy_client._json,
        ParallelizationFactor: import_smithy_client.expectInt32,
        ProvisionedPollerConfig: import_smithy_client._json,
        Queues: import_smithy_client._json,
        ScalingConfig: import_smithy_client._json,
        SelfManagedEventSource: import_smithy_client._json,
        SelfManagedKafkaEventSourceConfig: import_smithy_client._json,
        SourceAccessConfigurations: import_smithy_client._json,
        StartingPosition: import_smithy_client.expectString,
        StartingPositionTimestamp: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'StartingPositionTimestamp'
        ),
        State: import_smithy_client.expectString,
        StateTransitionReason: import_smithy_client.expectString,
        Topics: import_smithy_client._json,
        TumblingWindowInSeconds: import_smithy_client.expectInt32,
        UUID: import_smithy_client.expectString,
      });
    }, 'de_EventSourceMappingConfiguration');
    var de_EventSourceMappingsList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_EventSourceMappingConfiguration(entry, context);
        });
      return retVal;
    }, 'de_EventSourceMappingsList');
    var de_FunctionEventInvokeConfig = /* @__PURE__ */ __name((output, context) => {
      return (0, import_smithy_client.take)(output, {
        DestinationConfig: import_smithy_client._json,
        FunctionArn: import_smithy_client.expectString,
        LastModified: /* @__PURE__ */ __name(
          (_) =>
            (0, import_smithy_client.expectNonNull)(
              (0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))
            ),
          'LastModified'
        ),
        MaximumEventAgeInSeconds: import_smithy_client.expectInt32,
        MaximumRetryAttempts: import_smithy_client.expectInt32,
      });
    }, 'de_FunctionEventInvokeConfig');
    var de_FunctionEventInvokeConfigList = /* @__PURE__ */ __name((output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_FunctionEventInvokeConfig(entry, context);
        });
      return retVal;
    }, 'de_FunctionEventInvokeConfigList');
    var deserializeMetadata = /* @__PURE__ */ __name((output) => {
      var _a110, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId:
          (_b = (_a110 = output.headers['x-amzn-requestid']) != null ? _a110 : output.headers['x-amzn-request-id']) !=
          null
            ? _b
            : output.headers['x-amz-request-id'],
        extendedRequestId: output.headers['x-amz-id-2'],
        cfId: output.headers['x-amz-cf-id'],
      };
    }, 'deserializeMetadata');
    var _A = 'Arn';
    var _CA = 'CompatibleArchitecture';
    var _CC = 'ClientContext';
    var _CR = 'CompatibleRuntime';
    var _ESA = 'EventSourceArn';
    var _EV = 'ExecutedVersion';
    var _FE = 'FunctionError';
    var _FN = 'FunctionName';
    var _FV = 'FunctionVersion';
    var _IT = 'InvocationType';
    var _L = 'List';
    var _LR = 'LogResult';
    var _LT = 'LogType';
    var _M = 'Marker';
    var _MI = 'MaxItems';
    var _MR = 'MasterRegion';
    var _Q = 'Qualifier';
    var _RI = 'RevisionId';
    var _RSCT = 'ResponseStreamContentType';
    var _TK = 'TagKeys';
    var _ct = 'content-type';
    var _f = 'find';
    var _rAS = 'retryAfterSeconds';
    var _ra = 'retry-after';
    var _tK = 'tagKeys';
    var _xacc = 'x-amz-client-context';
    var _xaev = 'x-amz-executed-version';
    var _xafe = 'x-amz-function-error';
    var _xait = 'x-amz-invocation-type';
    var _xalr = 'x-amz-log-result';
    var _xalt = 'x-amz-log-type';
    var _a41;
    var AddLayerVersionPermissionCommand =
      ((_a41 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'AddLayerVersionPermission', {})
          .n('LambdaClient', 'AddLayerVersionPermissionCommand')
          .f(void 0, void 0)
          .ser(se_AddLayerVersionPermissionCommand)
          .de(de_AddLayerVersionPermissionCommand)
          .build()
      ) {}),
      (() => {
        __name(_a41, 'AddLayerVersionPermissionCommand');
      })(),
      _a41);
    var _a42;
    var AddPermissionCommand =
      ((_a42 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'AddPermission', {})
          .n('LambdaClient', 'AddPermissionCommand')
          .f(void 0, void 0)
          .ser(se_AddPermissionCommand)
          .de(de_AddPermissionCommand)
          .build()
      ) {}),
      (() => {
        __name(_a42, 'AddPermissionCommand');
      })(),
      _a42);
    var _a43;
    var CreateAliasCommand =
      ((_a43 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'CreateAlias', {})
          .n('LambdaClient', 'CreateAliasCommand')
          .f(void 0, void 0)
          .ser(se_CreateAliasCommand)
          .de(de_CreateAliasCommand)
          .build()
      ) {}),
      (() => {
        __name(_a43, 'CreateAliasCommand');
      })(),
      _a43);
    var _a44;
    var CreateCodeSigningConfigCommand =
      ((_a44 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'CreateCodeSigningConfig', {})
          .n('LambdaClient', 'CreateCodeSigningConfigCommand')
          .f(void 0, void 0)
          .ser(se_CreateCodeSigningConfigCommand)
          .de(de_CreateCodeSigningConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a44, 'CreateCodeSigningConfigCommand');
      })(),
      _a44);
    var _a45;
    var CreateEventSourceMappingCommand =
      ((_a45 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'CreateEventSourceMapping', {})
          .n('LambdaClient', 'CreateEventSourceMappingCommand')
          .f(void 0, void 0)
          .ser(se_CreateEventSourceMappingCommand)
          .de(de_CreateEventSourceMappingCommand)
          .build()
      ) {}),
      (() => {
        __name(_a45, 'CreateEventSourceMappingCommand');
      })(),
      _a45);
    var _a46;
    var CreateFunctionCommand =
      ((_a46 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'CreateFunction', {})
          .n('LambdaClient', 'CreateFunctionCommand')
          .f(CreateFunctionRequestFilterSensitiveLog, FunctionConfigurationFilterSensitiveLog)
          .ser(se_CreateFunctionCommand)
          .de(de_CreateFunctionCommand)
          .build()
      ) {}),
      (() => {
        __name(_a46, 'CreateFunctionCommand');
      })(),
      _a46);
    var _a47;
    var CreateFunctionUrlConfigCommand =
      ((_a47 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'CreateFunctionUrlConfig', {})
          .n('LambdaClient', 'CreateFunctionUrlConfigCommand')
          .f(void 0, void 0)
          .ser(se_CreateFunctionUrlConfigCommand)
          .de(de_CreateFunctionUrlConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a47, 'CreateFunctionUrlConfigCommand');
      })(),
      _a47);
    var _a48;
    var DeleteAliasCommand =
      ((_a48 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'DeleteAlias', {})
          .n('LambdaClient', 'DeleteAliasCommand')
          .f(void 0, void 0)
          .ser(se_DeleteAliasCommand)
          .de(de_DeleteAliasCommand)
          .build()
      ) {}),
      (() => {
        __name(_a48, 'DeleteAliasCommand');
      })(),
      _a48);
    var _a49;
    var DeleteCodeSigningConfigCommand =
      ((_a49 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'DeleteCodeSigningConfig', {})
          .n('LambdaClient', 'DeleteCodeSigningConfigCommand')
          .f(void 0, void 0)
          .ser(se_DeleteCodeSigningConfigCommand)
          .de(de_DeleteCodeSigningConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a49, 'DeleteCodeSigningConfigCommand');
      })(),
      _a49);
    var _a50;
    var DeleteEventSourceMappingCommand =
      ((_a50 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'DeleteEventSourceMapping', {})
          .n('LambdaClient', 'DeleteEventSourceMappingCommand')
          .f(void 0, void 0)
          .ser(se_DeleteEventSourceMappingCommand)
          .de(de_DeleteEventSourceMappingCommand)
          .build()
      ) {}),
      (() => {
        __name(_a50, 'DeleteEventSourceMappingCommand');
      })(),
      _a50);
    var _a51;
    var DeleteFunctionCodeSigningConfigCommand =
      ((_a51 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'DeleteFunctionCodeSigningConfig', {})
          .n('LambdaClient', 'DeleteFunctionCodeSigningConfigCommand')
          .f(void 0, void 0)
          .ser(se_DeleteFunctionCodeSigningConfigCommand)
          .de(de_DeleteFunctionCodeSigningConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a51, 'DeleteFunctionCodeSigningConfigCommand');
      })(),
      _a51);
    var _a52;
    var DeleteFunctionCommand =
      ((_a52 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'DeleteFunction', {})
          .n('LambdaClient', 'DeleteFunctionCommand')
          .f(void 0, void 0)
          .ser(se_DeleteFunctionCommand)
          .de(de_DeleteFunctionCommand)
          .build()
      ) {}),
      (() => {
        __name(_a52, 'DeleteFunctionCommand');
      })(),
      _a52);
    var _a53;
    var DeleteFunctionConcurrencyCommand =
      ((_a53 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'DeleteFunctionConcurrency', {})
          .n('LambdaClient', 'DeleteFunctionConcurrencyCommand')
          .f(void 0, void 0)
          .ser(se_DeleteFunctionConcurrencyCommand)
          .de(de_DeleteFunctionConcurrencyCommand)
          .build()
      ) {}),
      (() => {
        __name(_a53, 'DeleteFunctionConcurrencyCommand');
      })(),
      _a53);
    var _a54;
    var DeleteFunctionEventInvokeConfigCommand =
      ((_a54 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'DeleteFunctionEventInvokeConfig', {})
          .n('LambdaClient', 'DeleteFunctionEventInvokeConfigCommand')
          .f(void 0, void 0)
          .ser(se_DeleteFunctionEventInvokeConfigCommand)
          .de(de_DeleteFunctionEventInvokeConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a54, 'DeleteFunctionEventInvokeConfigCommand');
      })(),
      _a54);
    var _a55;
    var DeleteFunctionUrlConfigCommand =
      ((_a55 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'DeleteFunctionUrlConfig', {})
          .n('LambdaClient', 'DeleteFunctionUrlConfigCommand')
          .f(void 0, void 0)
          .ser(se_DeleteFunctionUrlConfigCommand)
          .de(de_DeleteFunctionUrlConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a55, 'DeleteFunctionUrlConfigCommand');
      })(),
      _a55);
    var _a56;
    var DeleteLayerVersionCommand =
      ((_a56 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'DeleteLayerVersion', {})
          .n('LambdaClient', 'DeleteLayerVersionCommand')
          .f(void 0, void 0)
          .ser(se_DeleteLayerVersionCommand)
          .de(de_DeleteLayerVersionCommand)
          .build()
      ) {}),
      (() => {
        __name(_a56, 'DeleteLayerVersionCommand');
      })(),
      _a56);
    var _a57;
    var DeleteProvisionedConcurrencyConfigCommand =
      ((_a57 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'DeleteProvisionedConcurrencyConfig', {})
          .n('LambdaClient', 'DeleteProvisionedConcurrencyConfigCommand')
          .f(void 0, void 0)
          .ser(se_DeleteProvisionedConcurrencyConfigCommand)
          .de(de_DeleteProvisionedConcurrencyConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a57, 'DeleteProvisionedConcurrencyConfigCommand');
      })(),
      _a57);
    var _a58;
    var GetAccountSettingsCommand =
      ((_a58 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetAccountSettings', {})
          .n('LambdaClient', 'GetAccountSettingsCommand')
          .f(void 0, void 0)
          .ser(se_GetAccountSettingsCommand)
          .de(de_GetAccountSettingsCommand)
          .build()
      ) {}),
      (() => {
        __name(_a58, 'GetAccountSettingsCommand');
      })(),
      _a58);
    var _a59;
    var GetAliasCommand =
      ((_a59 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetAlias', {})
          .n('LambdaClient', 'GetAliasCommand')
          .f(void 0, void 0)
          .ser(se_GetAliasCommand)
          .de(de_GetAliasCommand)
          .build()
      ) {}),
      (() => {
        __name(_a59, 'GetAliasCommand');
      })(),
      _a59);
    var _a60;
    var GetCodeSigningConfigCommand =
      ((_a60 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetCodeSigningConfig', {})
          .n('LambdaClient', 'GetCodeSigningConfigCommand')
          .f(void 0, void 0)
          .ser(se_GetCodeSigningConfigCommand)
          .de(de_GetCodeSigningConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a60, 'GetCodeSigningConfigCommand');
      })(),
      _a60);
    var _a61;
    var GetEventSourceMappingCommand =
      ((_a61 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetEventSourceMapping', {})
          .n('LambdaClient', 'GetEventSourceMappingCommand')
          .f(void 0, void 0)
          .ser(se_GetEventSourceMappingCommand)
          .de(de_GetEventSourceMappingCommand)
          .build()
      ) {}),
      (() => {
        __name(_a61, 'GetEventSourceMappingCommand');
      })(),
      _a61);
    var _a62;
    var GetFunctionCodeSigningConfigCommand =
      ((_a62 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetFunctionCodeSigningConfig', {})
          .n('LambdaClient', 'GetFunctionCodeSigningConfigCommand')
          .f(void 0, void 0)
          .ser(se_GetFunctionCodeSigningConfigCommand)
          .de(de_GetFunctionCodeSigningConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a62, 'GetFunctionCodeSigningConfigCommand');
      })(),
      _a62);
    var _a63;
    var GetFunctionCommand =
      ((_a63 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetFunction', {})
          .n('LambdaClient', 'GetFunctionCommand')
          .f(void 0, GetFunctionResponseFilterSensitiveLog)
          .ser(se_GetFunctionCommand)
          .de(de_GetFunctionCommand)
          .build()
      ) {}),
      (() => {
        __name(_a63, 'GetFunctionCommand');
      })(),
      _a63);
    var _a64;
    var GetFunctionConcurrencyCommand =
      ((_a64 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetFunctionConcurrency', {})
          .n('LambdaClient', 'GetFunctionConcurrencyCommand')
          .f(void 0, void 0)
          .ser(se_GetFunctionConcurrencyCommand)
          .de(de_GetFunctionConcurrencyCommand)
          .build()
      ) {}),
      (() => {
        __name(_a64, 'GetFunctionConcurrencyCommand');
      })(),
      _a64);
    var _a65;
    var GetFunctionConfigurationCommand =
      ((_a65 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetFunctionConfiguration', {})
          .n('LambdaClient', 'GetFunctionConfigurationCommand')
          .f(void 0, FunctionConfigurationFilterSensitiveLog)
          .ser(se_GetFunctionConfigurationCommand)
          .de(de_GetFunctionConfigurationCommand)
          .build()
      ) {}),
      (() => {
        __name(_a65, 'GetFunctionConfigurationCommand');
      })(),
      _a65);
    var _a66;
    var GetFunctionEventInvokeConfigCommand =
      ((_a66 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetFunctionEventInvokeConfig', {})
          .n('LambdaClient', 'GetFunctionEventInvokeConfigCommand')
          .f(void 0, void 0)
          .ser(se_GetFunctionEventInvokeConfigCommand)
          .de(de_GetFunctionEventInvokeConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a66, 'GetFunctionEventInvokeConfigCommand');
      })(),
      _a66);
    var _a67;
    var GetFunctionRecursionConfigCommand =
      ((_a67 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetFunctionRecursionConfig', {})
          .n('LambdaClient', 'GetFunctionRecursionConfigCommand')
          .f(void 0, void 0)
          .ser(se_GetFunctionRecursionConfigCommand)
          .de(de_GetFunctionRecursionConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a67, 'GetFunctionRecursionConfigCommand');
      })(),
      _a67);
    var _a68;
    var GetFunctionUrlConfigCommand =
      ((_a68 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetFunctionUrlConfig', {})
          .n('LambdaClient', 'GetFunctionUrlConfigCommand')
          .f(void 0, void 0)
          .ser(se_GetFunctionUrlConfigCommand)
          .de(de_GetFunctionUrlConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a68, 'GetFunctionUrlConfigCommand');
      })(),
      _a68);
    var _a69;
    var GetLayerVersionByArnCommand =
      ((_a69 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetLayerVersionByArn', {})
          .n('LambdaClient', 'GetLayerVersionByArnCommand')
          .f(void 0, void 0)
          .ser(se_GetLayerVersionByArnCommand)
          .de(de_GetLayerVersionByArnCommand)
          .build()
      ) {}),
      (() => {
        __name(_a69, 'GetLayerVersionByArnCommand');
      })(),
      _a69);
    var _a70;
    var GetLayerVersionCommand =
      ((_a70 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetLayerVersion', {})
          .n('LambdaClient', 'GetLayerVersionCommand')
          .f(void 0, void 0)
          .ser(se_GetLayerVersionCommand)
          .de(de_GetLayerVersionCommand)
          .build()
      ) {}),
      (() => {
        __name(_a70, 'GetLayerVersionCommand');
      })(),
      _a70);
    var _a71;
    var GetLayerVersionPolicyCommand =
      ((_a71 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetLayerVersionPolicy', {})
          .n('LambdaClient', 'GetLayerVersionPolicyCommand')
          .f(void 0, void 0)
          .ser(se_GetLayerVersionPolicyCommand)
          .de(de_GetLayerVersionPolicyCommand)
          .build()
      ) {}),
      (() => {
        __name(_a71, 'GetLayerVersionPolicyCommand');
      })(),
      _a71);
    var _a72;
    var GetPolicyCommand =
      ((_a72 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetPolicy', {})
          .n('LambdaClient', 'GetPolicyCommand')
          .f(void 0, void 0)
          .ser(se_GetPolicyCommand)
          .de(de_GetPolicyCommand)
          .build()
      ) {}),
      (() => {
        __name(_a72, 'GetPolicyCommand');
      })(),
      _a72);
    var _a73;
    var GetProvisionedConcurrencyConfigCommand =
      ((_a73 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetProvisionedConcurrencyConfig', {})
          .n('LambdaClient', 'GetProvisionedConcurrencyConfigCommand')
          .f(void 0, void 0)
          .ser(se_GetProvisionedConcurrencyConfigCommand)
          .de(de_GetProvisionedConcurrencyConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a73, 'GetProvisionedConcurrencyConfigCommand');
      })(),
      _a73);
    var _a74;
    var GetRuntimeManagementConfigCommand =
      ((_a74 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'GetRuntimeManagementConfig', {})
          .n('LambdaClient', 'GetRuntimeManagementConfigCommand')
          .f(void 0, void 0)
          .ser(se_GetRuntimeManagementConfigCommand)
          .de(de_GetRuntimeManagementConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a74, 'GetRuntimeManagementConfigCommand');
      })(),
      _a74);
    var _a75;
    var InvokeAsyncCommand =
      ((_a75 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'InvokeAsync', {})
          .n('LambdaClient', 'InvokeAsyncCommand')
          .f(InvokeAsyncRequestFilterSensitiveLog, void 0)
          .ser(se_InvokeAsyncCommand)
          .de(de_InvokeAsyncCommand)
          .build()
      ) {}),
      (() => {
        __name(_a75, 'InvokeAsyncCommand');
      })(),
      _a75);
    var _a76;
    var InvokeCommand2 =
      ((_a76 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'Invoke', {})
          .n('LambdaClient', 'InvokeCommand')
          .f(InvocationRequestFilterSensitiveLog, InvocationResponseFilterSensitiveLog)
          .ser(se_InvokeCommand)
          .de(de_InvokeCommand)
          .build()
      ) {}),
      (() => {
        __name(_a76, 'InvokeCommand');
      })(),
      _a76);
    var _a77;
    var InvokeWithResponseStreamCommand =
      ((_a77 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'InvokeWithResponseStream', {
            eventStream: {
              output: true,
            },
          })
          .n('LambdaClient', 'InvokeWithResponseStreamCommand')
          .f(InvokeWithResponseStreamRequestFilterSensitiveLog, InvokeWithResponseStreamResponseFilterSensitiveLog)
          .ser(se_InvokeWithResponseStreamCommand)
          .de(de_InvokeWithResponseStreamCommand)
          .build()
      ) {}),
      (() => {
        __name(_a77, 'InvokeWithResponseStreamCommand');
      })(),
      _a77);
    var _a78;
    var ListAliasesCommand =
      ((_a78 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'ListAliases', {})
          .n('LambdaClient', 'ListAliasesCommand')
          .f(void 0, void 0)
          .ser(se_ListAliasesCommand)
          .de(de_ListAliasesCommand)
          .build()
      ) {}),
      (() => {
        __name(_a78, 'ListAliasesCommand');
      })(),
      _a78);
    var _a79;
    var ListCodeSigningConfigsCommand =
      ((_a79 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'ListCodeSigningConfigs', {})
          .n('LambdaClient', 'ListCodeSigningConfigsCommand')
          .f(void 0, void 0)
          .ser(se_ListCodeSigningConfigsCommand)
          .de(de_ListCodeSigningConfigsCommand)
          .build()
      ) {}),
      (() => {
        __name(_a79, 'ListCodeSigningConfigsCommand');
      })(),
      _a79);
    var _a80;
    var ListEventSourceMappingsCommand =
      ((_a80 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'ListEventSourceMappings', {})
          .n('LambdaClient', 'ListEventSourceMappingsCommand')
          .f(void 0, void 0)
          .ser(se_ListEventSourceMappingsCommand)
          .de(de_ListEventSourceMappingsCommand)
          .build()
      ) {}),
      (() => {
        __name(_a80, 'ListEventSourceMappingsCommand');
      })(),
      _a80);
    var _a81;
    var ListFunctionEventInvokeConfigsCommand =
      ((_a81 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'ListFunctionEventInvokeConfigs', {})
          .n('LambdaClient', 'ListFunctionEventInvokeConfigsCommand')
          .f(void 0, void 0)
          .ser(se_ListFunctionEventInvokeConfigsCommand)
          .de(de_ListFunctionEventInvokeConfigsCommand)
          .build()
      ) {}),
      (() => {
        __name(_a81, 'ListFunctionEventInvokeConfigsCommand');
      })(),
      _a81);
    var _a82;
    var ListFunctionsByCodeSigningConfigCommand =
      ((_a82 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'ListFunctionsByCodeSigningConfig', {})
          .n('LambdaClient', 'ListFunctionsByCodeSigningConfigCommand')
          .f(void 0, void 0)
          .ser(se_ListFunctionsByCodeSigningConfigCommand)
          .de(de_ListFunctionsByCodeSigningConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a82, 'ListFunctionsByCodeSigningConfigCommand');
      })(),
      _a82);
    var _a83;
    var ListFunctionsCommand =
      ((_a83 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'ListFunctions', {})
          .n('LambdaClient', 'ListFunctionsCommand')
          .f(void 0, ListFunctionsResponseFilterSensitiveLog)
          .ser(se_ListFunctionsCommand)
          .de(de_ListFunctionsCommand)
          .build()
      ) {}),
      (() => {
        __name(_a83, 'ListFunctionsCommand');
      })(),
      _a83);
    var _a84;
    var ListFunctionUrlConfigsCommand =
      ((_a84 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'ListFunctionUrlConfigs', {})
          .n('LambdaClient', 'ListFunctionUrlConfigsCommand')
          .f(void 0, void 0)
          .ser(se_ListFunctionUrlConfigsCommand)
          .de(de_ListFunctionUrlConfigsCommand)
          .build()
      ) {}),
      (() => {
        __name(_a84, 'ListFunctionUrlConfigsCommand');
      })(),
      _a84);
    var _a85;
    var ListLayersCommand =
      ((_a85 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'ListLayers', {})
          .n('LambdaClient', 'ListLayersCommand')
          .f(void 0, void 0)
          .ser(se_ListLayersCommand)
          .de(de_ListLayersCommand)
          .build()
      ) {}),
      (() => {
        __name(_a85, 'ListLayersCommand');
      })(),
      _a85);
    var _a86;
    var ListLayerVersionsCommand =
      ((_a86 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'ListLayerVersions', {})
          .n('LambdaClient', 'ListLayerVersionsCommand')
          .f(void 0, void 0)
          .ser(se_ListLayerVersionsCommand)
          .de(de_ListLayerVersionsCommand)
          .build()
      ) {}),
      (() => {
        __name(_a86, 'ListLayerVersionsCommand');
      })(),
      _a86);
    var _a87;
    var ListProvisionedConcurrencyConfigsCommand =
      ((_a87 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'ListProvisionedConcurrencyConfigs', {})
          .n('LambdaClient', 'ListProvisionedConcurrencyConfigsCommand')
          .f(void 0, void 0)
          .ser(se_ListProvisionedConcurrencyConfigsCommand)
          .de(de_ListProvisionedConcurrencyConfigsCommand)
          .build()
      ) {}),
      (() => {
        __name(_a87, 'ListProvisionedConcurrencyConfigsCommand');
      })(),
      _a87);
    var _a88;
    var ListTagsCommand =
      ((_a88 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'ListTags', {})
          .n('LambdaClient', 'ListTagsCommand')
          .f(void 0, void 0)
          .ser(se_ListTagsCommand)
          .de(de_ListTagsCommand)
          .build()
      ) {}),
      (() => {
        __name(_a88, 'ListTagsCommand');
      })(),
      _a88);
    var _a89;
    var ListVersionsByFunctionCommand =
      ((_a89 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'ListVersionsByFunction', {})
          .n('LambdaClient', 'ListVersionsByFunctionCommand')
          .f(void 0, ListVersionsByFunctionResponseFilterSensitiveLog)
          .ser(se_ListVersionsByFunctionCommand)
          .de(de_ListVersionsByFunctionCommand)
          .build()
      ) {}),
      (() => {
        __name(_a89, 'ListVersionsByFunctionCommand');
      })(),
      _a89);
    var _a90;
    var PublishLayerVersionCommand =
      ((_a90 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'PublishLayerVersion', {})
          .n('LambdaClient', 'PublishLayerVersionCommand')
          .f(PublishLayerVersionRequestFilterSensitiveLog, void 0)
          .ser(se_PublishLayerVersionCommand)
          .de(de_PublishLayerVersionCommand)
          .build()
      ) {}),
      (() => {
        __name(_a90, 'PublishLayerVersionCommand');
      })(),
      _a90);
    var _a91;
    var PublishVersionCommand =
      ((_a91 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'PublishVersion', {})
          .n('LambdaClient', 'PublishVersionCommand')
          .f(void 0, FunctionConfigurationFilterSensitiveLog)
          .ser(se_PublishVersionCommand)
          .de(de_PublishVersionCommand)
          .build()
      ) {}),
      (() => {
        __name(_a91, 'PublishVersionCommand');
      })(),
      _a91);
    var _a92;
    var PutFunctionCodeSigningConfigCommand =
      ((_a92 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'PutFunctionCodeSigningConfig', {})
          .n('LambdaClient', 'PutFunctionCodeSigningConfigCommand')
          .f(void 0, void 0)
          .ser(se_PutFunctionCodeSigningConfigCommand)
          .de(de_PutFunctionCodeSigningConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a92, 'PutFunctionCodeSigningConfigCommand');
      })(),
      _a92);
    var _a93;
    var PutFunctionConcurrencyCommand =
      ((_a93 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'PutFunctionConcurrency', {})
          .n('LambdaClient', 'PutFunctionConcurrencyCommand')
          .f(void 0, void 0)
          .ser(se_PutFunctionConcurrencyCommand)
          .de(de_PutFunctionConcurrencyCommand)
          .build()
      ) {}),
      (() => {
        __name(_a93, 'PutFunctionConcurrencyCommand');
      })(),
      _a93);
    var _a94;
    var PutFunctionEventInvokeConfigCommand =
      ((_a94 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'PutFunctionEventInvokeConfig', {})
          .n('LambdaClient', 'PutFunctionEventInvokeConfigCommand')
          .f(void 0, void 0)
          .ser(se_PutFunctionEventInvokeConfigCommand)
          .de(de_PutFunctionEventInvokeConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a94, 'PutFunctionEventInvokeConfigCommand');
      })(),
      _a94);
    var _a95;
    var PutFunctionRecursionConfigCommand =
      ((_a95 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'PutFunctionRecursionConfig', {})
          .n('LambdaClient', 'PutFunctionRecursionConfigCommand')
          .f(void 0, void 0)
          .ser(se_PutFunctionRecursionConfigCommand)
          .de(de_PutFunctionRecursionConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a95, 'PutFunctionRecursionConfigCommand');
      })(),
      _a95);
    var _a96;
    var PutProvisionedConcurrencyConfigCommand =
      ((_a96 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'PutProvisionedConcurrencyConfig', {})
          .n('LambdaClient', 'PutProvisionedConcurrencyConfigCommand')
          .f(void 0, void 0)
          .ser(se_PutProvisionedConcurrencyConfigCommand)
          .de(de_PutProvisionedConcurrencyConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a96, 'PutProvisionedConcurrencyConfigCommand');
      })(),
      _a96);
    var _a97;
    var PutRuntimeManagementConfigCommand =
      ((_a97 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'PutRuntimeManagementConfig', {})
          .n('LambdaClient', 'PutRuntimeManagementConfigCommand')
          .f(void 0, void 0)
          .ser(se_PutRuntimeManagementConfigCommand)
          .de(de_PutRuntimeManagementConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a97, 'PutRuntimeManagementConfigCommand');
      })(),
      _a97);
    var _a98;
    var RemoveLayerVersionPermissionCommand =
      ((_a98 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'RemoveLayerVersionPermission', {})
          .n('LambdaClient', 'RemoveLayerVersionPermissionCommand')
          .f(void 0, void 0)
          .ser(se_RemoveLayerVersionPermissionCommand)
          .de(de_RemoveLayerVersionPermissionCommand)
          .build()
      ) {}),
      (() => {
        __name(_a98, 'RemoveLayerVersionPermissionCommand');
      })(),
      _a98);
    var _a99;
    var RemovePermissionCommand =
      ((_a99 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'RemovePermission', {})
          .n('LambdaClient', 'RemovePermissionCommand')
          .f(void 0, void 0)
          .ser(se_RemovePermissionCommand)
          .de(de_RemovePermissionCommand)
          .build()
      ) {}),
      (() => {
        __name(_a99, 'RemovePermissionCommand');
      })(),
      _a99);
    var _a100;
    var TagResourceCommand =
      ((_a100 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'TagResource', {})
          .n('LambdaClient', 'TagResourceCommand')
          .f(void 0, void 0)
          .ser(se_TagResourceCommand)
          .de(de_TagResourceCommand)
          .build()
      ) {}),
      (() => {
        __name(_a100, 'TagResourceCommand');
      })(),
      _a100);
    var _a101;
    var UntagResourceCommand =
      ((_a101 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'UntagResource', {})
          .n('LambdaClient', 'UntagResourceCommand')
          .f(void 0, void 0)
          .ser(se_UntagResourceCommand)
          .de(de_UntagResourceCommand)
          .build()
      ) {}),
      (() => {
        __name(_a101, 'UntagResourceCommand');
      })(),
      _a101);
    var _a102;
    var UpdateAliasCommand =
      ((_a102 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'UpdateAlias', {})
          .n('LambdaClient', 'UpdateAliasCommand')
          .f(void 0, void 0)
          .ser(se_UpdateAliasCommand)
          .de(de_UpdateAliasCommand)
          .build()
      ) {}),
      (() => {
        __name(_a102, 'UpdateAliasCommand');
      })(),
      _a102);
    var _a103;
    var UpdateCodeSigningConfigCommand =
      ((_a103 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'UpdateCodeSigningConfig', {})
          .n('LambdaClient', 'UpdateCodeSigningConfigCommand')
          .f(void 0, void 0)
          .ser(se_UpdateCodeSigningConfigCommand)
          .de(de_UpdateCodeSigningConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a103, 'UpdateCodeSigningConfigCommand');
      })(),
      _a103);
    var _a104;
    var UpdateEventSourceMappingCommand =
      ((_a104 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'UpdateEventSourceMapping', {})
          .n('LambdaClient', 'UpdateEventSourceMappingCommand')
          .f(void 0, void 0)
          .ser(se_UpdateEventSourceMappingCommand)
          .de(de_UpdateEventSourceMappingCommand)
          .build()
      ) {}),
      (() => {
        __name(_a104, 'UpdateEventSourceMappingCommand');
      })(),
      _a104);
    var _a105;
    var UpdateFunctionCodeCommand =
      ((_a105 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'UpdateFunctionCode', {})
          .n('LambdaClient', 'UpdateFunctionCodeCommand')
          .f(UpdateFunctionCodeRequestFilterSensitiveLog, FunctionConfigurationFilterSensitiveLog)
          .ser(se_UpdateFunctionCodeCommand)
          .de(de_UpdateFunctionCodeCommand)
          .build()
      ) {}),
      (() => {
        __name(_a105, 'UpdateFunctionCodeCommand');
      })(),
      _a105);
    var _a106;
    var UpdateFunctionConfigurationCommand =
      ((_a106 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'UpdateFunctionConfiguration', {})
          .n('LambdaClient', 'UpdateFunctionConfigurationCommand')
          .f(UpdateFunctionConfigurationRequestFilterSensitiveLog, FunctionConfigurationFilterSensitiveLog)
          .ser(se_UpdateFunctionConfigurationCommand)
          .de(de_UpdateFunctionConfigurationCommand)
          .build()
      ) {}),
      (() => {
        __name(_a106, 'UpdateFunctionConfigurationCommand');
      })(),
      _a106);
    var _a107;
    var UpdateFunctionEventInvokeConfigCommand =
      ((_a107 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'UpdateFunctionEventInvokeConfig', {})
          .n('LambdaClient', 'UpdateFunctionEventInvokeConfigCommand')
          .f(void 0, void 0)
          .ser(se_UpdateFunctionEventInvokeConfigCommand)
          .de(de_UpdateFunctionEventInvokeConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a107, 'UpdateFunctionEventInvokeConfigCommand');
      })(),
      _a107);
    var _a108;
    var UpdateFunctionUrlConfigCommand =
      ((_a108 = class extends (
        import_smithy_client.Command.classBuilder()
          .ep(commonParams)
          .m(function (Command, cs, config, o) {
            return [
              (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
              (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
            ];
          })
          .s('AWSGirApiService', 'UpdateFunctionUrlConfig', {})
          .n('LambdaClient', 'UpdateFunctionUrlConfigCommand')
          .f(void 0, void 0)
          .ser(se_UpdateFunctionUrlConfigCommand)
          .de(de_UpdateFunctionUrlConfigCommand)
          .build()
      ) {}),
      (() => {
        __name(_a108, 'UpdateFunctionUrlConfigCommand');
      })(),
      _a108);
    var commands = {
      AddLayerVersionPermissionCommand,
      AddPermissionCommand,
      CreateAliasCommand,
      CreateCodeSigningConfigCommand,
      CreateEventSourceMappingCommand,
      CreateFunctionCommand,
      CreateFunctionUrlConfigCommand,
      DeleteAliasCommand,
      DeleteCodeSigningConfigCommand,
      DeleteEventSourceMappingCommand,
      DeleteFunctionCommand,
      DeleteFunctionCodeSigningConfigCommand,
      DeleteFunctionConcurrencyCommand,
      DeleteFunctionEventInvokeConfigCommand,
      DeleteFunctionUrlConfigCommand,
      DeleteLayerVersionCommand,
      DeleteProvisionedConcurrencyConfigCommand,
      GetAccountSettingsCommand,
      GetAliasCommand,
      GetCodeSigningConfigCommand,
      GetEventSourceMappingCommand,
      GetFunctionCommand,
      GetFunctionCodeSigningConfigCommand,
      GetFunctionConcurrencyCommand,
      GetFunctionConfigurationCommand,
      GetFunctionEventInvokeConfigCommand,
      GetFunctionRecursionConfigCommand,
      GetFunctionUrlConfigCommand,
      GetLayerVersionCommand,
      GetLayerVersionByArnCommand,
      GetLayerVersionPolicyCommand,
      GetPolicyCommand,
      GetProvisionedConcurrencyConfigCommand,
      GetRuntimeManagementConfigCommand,
      InvokeCommand: InvokeCommand2,
      InvokeAsyncCommand,
      InvokeWithResponseStreamCommand,
      ListAliasesCommand,
      ListCodeSigningConfigsCommand,
      ListEventSourceMappingsCommand,
      ListFunctionEventInvokeConfigsCommand,
      ListFunctionsCommand,
      ListFunctionsByCodeSigningConfigCommand,
      ListFunctionUrlConfigsCommand,
      ListLayersCommand,
      ListLayerVersionsCommand,
      ListProvisionedConcurrencyConfigsCommand,
      ListTagsCommand,
      ListVersionsByFunctionCommand,
      PublishLayerVersionCommand,
      PublishVersionCommand,
      PutFunctionCodeSigningConfigCommand,
      PutFunctionConcurrencyCommand,
      PutFunctionEventInvokeConfigCommand,
      PutFunctionRecursionConfigCommand,
      PutProvisionedConcurrencyConfigCommand,
      PutRuntimeManagementConfigCommand,
      RemoveLayerVersionPermissionCommand,
      RemovePermissionCommand,
      TagResourceCommand,
      UntagResourceCommand,
      UpdateAliasCommand,
      UpdateCodeSigningConfigCommand,
      UpdateEventSourceMappingCommand,
      UpdateFunctionCodeCommand,
      UpdateFunctionConfigurationCommand,
      UpdateFunctionEventInvokeConfigCommand,
      UpdateFunctionUrlConfigCommand,
    };
    var _a109;
    var Lambda =
      ((_a109 = class extends LambdaClient2 {}),
      (() => {
        __name(_a109, 'Lambda');
      })(),
      _a109);
    (0, import_smithy_client.createAggregatedClient)(commands, Lambda);
    var paginateListAliases = (0, import_core2.createPaginator)(
      LambdaClient2,
      ListAliasesCommand,
      'Marker',
      'NextMarker',
      'MaxItems'
    );
    var paginateListCodeSigningConfigs = (0, import_core2.createPaginator)(
      LambdaClient2,
      ListCodeSigningConfigsCommand,
      'Marker',
      'NextMarker',
      'MaxItems'
    );
    var paginateListEventSourceMappings = (0, import_core2.createPaginator)(
      LambdaClient2,
      ListEventSourceMappingsCommand,
      'Marker',
      'NextMarker',
      'MaxItems'
    );
    var paginateListFunctionEventInvokeConfigs = (0, import_core2.createPaginator)(
      LambdaClient2,
      ListFunctionEventInvokeConfigsCommand,
      'Marker',
      'NextMarker',
      'MaxItems'
    );
    var paginateListFunctionUrlConfigs = (0, import_core2.createPaginator)(
      LambdaClient2,
      ListFunctionUrlConfigsCommand,
      'Marker',
      'NextMarker',
      'MaxItems'
    );
    var paginateListFunctionsByCodeSigningConfig = (0, import_core2.createPaginator)(
      LambdaClient2,
      ListFunctionsByCodeSigningConfigCommand,
      'Marker',
      'NextMarker',
      'MaxItems'
    );
    var paginateListFunctions = (0, import_core2.createPaginator)(
      LambdaClient2,
      ListFunctionsCommand,
      'Marker',
      'NextMarker',
      'MaxItems'
    );
    var paginateListLayerVersions = (0, import_core2.createPaginator)(
      LambdaClient2,
      ListLayerVersionsCommand,
      'Marker',
      'NextMarker',
      'MaxItems'
    );
    var paginateListLayers = (0, import_core2.createPaginator)(
      LambdaClient2,
      ListLayersCommand,
      'Marker',
      'NextMarker',
      'MaxItems'
    );
    var paginateListProvisionedConcurrencyConfigs = (0, import_core2.createPaginator)(
      LambdaClient2,
      ListProvisionedConcurrencyConfigsCommand,
      'Marker',
      'NextMarker',
      'MaxItems'
    );
    var paginateListVersionsByFunction = (0, import_core2.createPaginator)(
      LambdaClient2,
      ListVersionsByFunctionCommand,
      'Marker',
      'NextMarker',
      'MaxItems'
    );
    var import_util_waiter = require_dist_cjs62();
    var checkState = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionConfigurationCommand(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.State;
          }, 'returnComparator');
          if (returnComparator() === 'Active') {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {}
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.State;
          }, 'returnComparator');
          if (returnComparator() === 'Failed') {
            return { state: import_util_waiter.WaiterState.FAILURE, reason };
          }
        } catch (e) {}
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.State;
          }, 'returnComparator');
          if (returnComparator() === 'Pending') {
            return { state: import_util_waiter.WaiterState.RETRY, reason };
          }
        } catch (e) {}
      } catch (exception) {
        reason = exception;
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, 'checkState');
    var waitForFunctionActive = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 300 };
      return (0, import_util_waiter.createWaiter)(
        __spreadValues(__spreadValues({}, serviceDefaults), params),
        input,
        checkState
      );
    }, 'waitForFunctionActive');
    var waitUntilFunctionActive = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 300 };
      const result = await (0, import_util_waiter.createWaiter)(
        __spreadValues(__spreadValues({}, serviceDefaults), params),
        input,
        checkState
      );
      return (0, import_util_waiter.checkExceptions)(result);
    }, 'waitUntilFunctionActive');
    var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionCommand(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Configuration.State;
          }, 'returnComparator');
          if (returnComparator() === 'Active') {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {}
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Configuration.State;
          }, 'returnComparator');
          if (returnComparator() === 'Failed') {
            return { state: import_util_waiter.WaiterState.FAILURE, reason };
          }
        } catch (e) {}
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Configuration.State;
          }, 'returnComparator');
          if (returnComparator() === 'Pending') {
            return { state: import_util_waiter.WaiterState.RETRY, reason };
          }
        } catch (e) {}
      } catch (exception) {
        reason = exception;
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, 'checkState');
    var waitForFunctionActiveV2 = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 300 };
      return (0, import_util_waiter.createWaiter)(
        __spreadValues(__spreadValues({}, serviceDefaults), params),
        input,
        checkState2
      );
    }, 'waitForFunctionActiveV2');
    var waitUntilFunctionActiveV2 = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 300 };
      const result = await (0, import_util_waiter.createWaiter)(
        __spreadValues(__spreadValues({}, serviceDefaults), params),
        input,
        checkState2
      );
      return (0, import_util_waiter.checkExceptions)(result);
    }, 'waitUntilFunctionActiveV2');
    var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionCommand(input));
        reason = result;
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == 'ResourceNotFoundException') {
          return { state: import_util_waiter.WaiterState.RETRY, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, 'checkState');
    var waitForFunctionExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 20 };
      return (0, import_util_waiter.createWaiter)(
        __spreadValues(__spreadValues({}, serviceDefaults), params),
        input,
        checkState3
      );
    }, 'waitForFunctionExists');
    var waitUntilFunctionExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 20 };
      const result = await (0, import_util_waiter.createWaiter)(
        __spreadValues(__spreadValues({}, serviceDefaults), params),
        input,
        checkState3
      );
      return (0, import_util_waiter.checkExceptions)(result);
    }, 'waitUntilFunctionExists');
    var checkState4 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionConfigurationCommand(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.LastUpdateStatus;
          }, 'returnComparator');
          if (returnComparator() === 'Successful') {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {}
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.LastUpdateStatus;
          }, 'returnComparator');
          if (returnComparator() === 'Failed') {
            return { state: import_util_waiter.WaiterState.FAILURE, reason };
          }
        } catch (e) {}
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.LastUpdateStatus;
          }, 'returnComparator');
          if (returnComparator() === 'InProgress') {
            return { state: import_util_waiter.WaiterState.RETRY, reason };
          }
        } catch (e) {}
      } catch (exception) {
        reason = exception;
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, 'checkState');
    var waitForFunctionUpdated = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 300 };
      return (0, import_util_waiter.createWaiter)(
        __spreadValues(__spreadValues({}, serviceDefaults), params),
        input,
        checkState4
      );
    }, 'waitForFunctionUpdated');
    var waitUntilFunctionUpdated = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 300 };
      const result = await (0, import_util_waiter.createWaiter)(
        __spreadValues(__spreadValues({}, serviceDefaults), params),
        input,
        checkState4
      );
      return (0, import_util_waiter.checkExceptions)(result);
    }, 'waitUntilFunctionUpdated');
    var checkState5 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionCommand(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Configuration.LastUpdateStatus;
          }, 'returnComparator');
          if (returnComparator() === 'Successful') {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {}
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Configuration.LastUpdateStatus;
          }, 'returnComparator');
          if (returnComparator() === 'Failed') {
            return { state: import_util_waiter.WaiterState.FAILURE, reason };
          }
        } catch (e) {}
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Configuration.LastUpdateStatus;
          }, 'returnComparator');
          if (returnComparator() === 'InProgress') {
            return { state: import_util_waiter.WaiterState.RETRY, reason };
          }
        } catch (e) {}
      } catch (exception) {
        reason = exception;
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, 'checkState');
    var waitForFunctionUpdatedV2 = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 300 };
      return (0, import_util_waiter.createWaiter)(
        __spreadValues(__spreadValues({}, serviceDefaults), params),
        input,
        checkState5
      );
    }, 'waitForFunctionUpdatedV2');
    var waitUntilFunctionUpdatedV2 = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 300 };
      const result = await (0, import_util_waiter.createWaiter)(
        __spreadValues(__spreadValues({}, serviceDefaults), params),
        input,
        checkState5
      );
      return (0, import_util_waiter.checkExceptions)(result);
    }, 'waitUntilFunctionUpdatedV2');
    var checkState6 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionConfigurationCommand(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.State;
          }, 'returnComparator');
          if (returnComparator() === 'Active') {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {}
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.State;
          }, 'returnComparator');
          if (returnComparator() === 'Failed') {
            return { state: import_util_waiter.WaiterState.FAILURE, reason };
          }
        } catch (e) {}
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.State;
          }, 'returnComparator');
          if (returnComparator() === 'Pending') {
            return { state: import_util_waiter.WaiterState.RETRY, reason };
          }
        } catch (e) {}
      } catch (exception) {
        reason = exception;
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, 'checkState');
    var waitForPublishedVersionActive = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 1560 };
      return (0, import_util_waiter.createWaiter)(
        __spreadValues(__spreadValues({}, serviceDefaults), params),
        input,
        checkState6
      );
    }, 'waitForPublishedVersionActive');
    var waitUntilPublishedVersionActive = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 1560 };
      const result = await (0, import_util_waiter.createWaiter)(
        __spreadValues(__spreadValues({}, serviceDefaults), params),
        input,
        checkState6
      );
      return (0, import_util_waiter.checkExceptions)(result);
    }, 'waitUntilPublishedVersionActive');
  },
});

// node_modules/@actions/core/lib/utils.js
var require_utils = __commonJS({
  'node_modules/@actions/core/lib/utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toCommandProperties = exports.toCommandValue = void 0;
    function toCommandValue(input) {
      if (input === null || input === void 0) {
        return '';
      } else if (typeof input === 'string' || input instanceof String) {
        return input;
      }
      return JSON.stringify(input);
    }
    exports.toCommandValue = toCommandValue;
    function toCommandProperties(annotationProperties) {
      if (!Object.keys(annotationProperties).length) {
        return {};
      }
      return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn,
      };
    }
    exports.toCommandProperties = toCommandProperties;
  },
});

// node_modules/@actions/core/lib/command.js
var require_command = __commonJS({
  'node_modules/@actions/core/lib/command.js'(exports) {
    'use strict';
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          });
    var __setModuleDefault =
      (exports && exports.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          });
    var __importStar =
      (exports && exports.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.issue = exports.issueCommand = void 0;
    var os = __importStar(require('os'));
    var utils_1 = require_utils();
    function issueCommand(command, properties, message) {
      const cmd = new Command(command, properties, message);
      process.stdout.write(cmd.toString() + os.EOL);
    }
    exports.issueCommand = issueCommand;
    function issue(name, message = '') {
      issueCommand(name, {}, message);
    }
    exports.issue = issue;
    var CMD_STRING = '::';
    var Command = class {
      constructor(command, properties, message) {
        if (!command) {
          command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
      }
      toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
          cmdStr += ' ';
          let first = true;
          for (const key in this.properties) {
            if (this.properties.hasOwnProperty(key)) {
              const val = this.properties[key];
              if (val) {
                if (first) {
                  first = false;
                } else {
                  cmdStr += ',';
                }
                cmdStr += `${key}=${escapeProperty(val)}`;
              }
            }
          }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
      }
    };
    function escapeData(s) {
      return (0, utils_1.toCommandValue)(s).replace(/%/g, '%25').replace(/\r/g, '%0D').replace(/\n/g, '%0A');
    }
    function escapeProperty(s) {
      return (0, utils_1.toCommandValue)(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
    }
  },
});

// node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({
  'node_modules/@actions/core/lib/file-command.js'(exports) {
    'use strict';
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          });
    var __setModuleDefault =
      (exports && exports.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          });
    var __importStar =
      (exports && exports.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
    var crypto = __importStar(require('crypto'));
    var fs = __importStar(require('fs'));
    var os = __importStar(require('os'));
    var utils_1 = require_utils();
    function issueFileCommand(command, message) {
      const filePath = process.env[`GITHUB_${command}`];
      if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
      }
      if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
      }
      fs.appendFileSync(filePath, `${(0, utils_1.toCommandValue)(message)}${os.EOL}`, {
        encoding: 'utf8',
      });
    }
    exports.issueFileCommand = issueFileCommand;
    function prepareKeyValueMessage(key, value) {
      const delimiter = `ghadelimiter_${crypto.randomUUID()}`;
      const convertedValue = (0, utils_1.toCommandValue)(value);
      if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
      }
      if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
      }
      return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
    }
    exports.prepareKeyValueMessage = prepareKeyValueMessage;
  },
});

// node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS({
  'node_modules/@actions/http-client/lib/proxy.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.checkBypass = exports.getProxyUrl = void 0;
    function getProxyUrl(reqUrl) {
      const usingSsl = reqUrl.protocol === 'https:';
      if (checkBypass(reqUrl)) {
        return void 0;
      }
      const proxyVar = (() => {
        if (usingSsl) {
          return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        } else {
          return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
      })();
      if (proxyVar) {
        return new URL(proxyVar);
      } else {
        return void 0;
      }
    }
    exports.getProxyUrl = getProxyUrl;
    function checkBypass(reqUrl) {
      if (!reqUrl.hostname) {
        return false;
      }
      const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
      if (!noProxy) {
        return false;
      }
      let reqPort;
      if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
      } else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
      } else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
      }
      const upperReqHosts = [reqUrl.hostname.toUpperCase()];
      if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
      }
      for (const upperNoProxyItem of noProxy
        .split(',')
        .map((x) => x.trim().toUpperCase())
        .filter((x) => x)) {
        if (upperReqHosts.some((x) => x === upperNoProxyItem)) {
          return true;
        }
      }
      return false;
    }
    exports.checkBypass = checkBypass;
  },
});

// node_modules/tunnel/lib/tunnel.js
var require_tunnel = __commonJS({
  'node_modules/tunnel/lib/tunnel.js'(exports) {
    'use strict';
    var net = require('net');
    var tls = require('tls');
    var http = require('http');
    var https = require('https');
    var events = require('events');
    var assert = require('assert');
    var util = require('util');
    exports.httpOverHttp = httpOverHttp;
    exports.httpsOverHttp = httpsOverHttp;
    exports.httpOverHttps = httpOverHttps;
    exports.httpsOverHttps = httpsOverHttps;
    function httpOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      return agent;
    }
    function httpsOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function httpOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      return agent;
    }
    function httpsOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    function TunnelingAgent(options) {
      var self2 = this;
      self2.options = options || {};
      self2.proxyOptions = self2.options.proxy || {};
      self2.maxSockets = self2.options.maxSockets || http.Agent.defaultMaxSockets;
      self2.requests = [];
      self2.sockets = [];
      self2.on('free', function onFree(socket, host, port, localAddress) {
        var options2 = toOptions(host, port, localAddress);
        for (var i = 0, len = self2.requests.length; i < len; ++i) {
          var pending = self2.requests[i];
          if (pending.host === options2.host && pending.port === options2.port) {
            self2.requests.splice(i, 1);
            pending.request.onSocket(socket);
            return;
          }
        }
        socket.destroy();
        self2.removeSocket(socket);
      });
    }
    util.inherits(TunnelingAgent, events.EventEmitter);
    TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
      var self2 = this;
      var options = mergeOptions({ request: req }, self2.options, toOptions(host, port, localAddress));
      if (self2.sockets.length >= this.maxSockets) {
        self2.requests.push(options);
        return;
      }
      self2.createSocket(options, function (socket) {
        socket.on('free', onFree);
        socket.on('close', onCloseOrRemove);
        socket.on('agentRemove', onCloseOrRemove);
        req.onSocket(socket);
        function onFree() {
          self2.emit('free', socket, options);
        }
        function onCloseOrRemove(err) {
          self2.removeSocket(socket);
          socket.removeListener('free', onFree);
          socket.removeListener('close', onCloseOrRemove);
          socket.removeListener('agentRemove', onCloseOrRemove);
        }
      });
    };
    TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
      var self2 = this;
      var placeholder = {};
      self2.sockets.push(placeholder);
      var connectOptions = mergeOptions({}, self2.proxyOptions, {
        method: 'CONNECT',
        path: options.host + ':' + options.port,
        agent: false,
        headers: {
          host: options.host + ':' + options.port,
        },
      });
      if (options.localAddress) {
        connectOptions.localAddress = options.localAddress;
      }
      if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers['Proxy-Authorization'] =
          'Basic ' + new Buffer(connectOptions.proxyAuth).toString('base64');
      }
      debug('making CONNECT request');
      var connectReq = self2.request(connectOptions);
      connectReq.useChunkedEncodingByDefault = false;
      connectReq.once('response', onResponse);
      connectReq.once('upgrade', onUpgrade);
      connectReq.once('connect', onConnect);
      connectReq.once('error', onError);
      connectReq.end();
      function onResponse(res) {
        res.upgrade = true;
      }
      function onUpgrade(res, socket, head) {
        process.nextTick(function () {
          onConnect(res, socket, head);
        });
      }
      function onConnect(res, socket, head) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode !== 200) {
          debug('tunneling socket could not be established, statusCode=%d', res.statusCode);
          socket.destroy();
          var error = new Error('tunneling socket could not be established, statusCode=' + res.statusCode);
          error.code = 'ECONNRESET';
          options.request.emit('error', error);
          self2.removeSocket(placeholder);
          return;
        }
        if (head.length > 0) {
          debug('got illegal response body from proxy');
          socket.destroy();
          var error = new Error('got illegal response body from proxy');
          error.code = 'ECONNRESET';
          options.request.emit('error', error);
          self2.removeSocket(placeholder);
          return;
        }
        debug('tunneling connection has established');
        self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
        return cb(socket);
      }
      function onError(cause) {
        connectReq.removeAllListeners();
        debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack);
        var error = new Error('tunneling socket could not be established, cause=' + cause.message);
        error.code = 'ECONNRESET';
        options.request.emit('error', error);
        self2.removeSocket(placeholder);
      }
    };
    TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
      var pos = this.sockets.indexOf(socket);
      if (pos === -1) {
        return;
      }
      this.sockets.splice(pos, 1);
      var pending = this.requests.shift();
      if (pending) {
        this.createSocket(pending, function (socket2) {
          pending.request.onSocket(socket2);
        });
      }
    };
    function createSecureSocket(options, cb) {
      var self2 = this;
      TunnelingAgent.prototype.createSocket.call(self2, options, function (socket) {
        var hostHeader = options.request.getHeader('host');
        var tlsOptions = mergeOptions({}, self2.options, {
          socket,
          servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host,
        });
        var secureSocket = tls.connect(0, tlsOptions);
        self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
      });
    }
    function toOptions(host, port, localAddress) {
      if (typeof host === 'string') {
        return {
          host,
          port,
          localAddress,
        };
      }
      return host;
    }
    function mergeOptions(target) {
      for (var i = 1, len = arguments.length; i < len; ++i) {
        var overrides = arguments[i];
        if (typeof overrides === 'object') {
          var keys = Object.keys(overrides);
          for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
            var k = keys[j];
            if (overrides[k] !== void 0) {
              target[k] = overrides[k];
            }
          }
        }
      }
      return target;
    }
    var debug;
    if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
      debug = function () {
        var args = Array.prototype.slice.call(arguments);
        if (typeof args[0] === 'string') {
          args[0] = 'TUNNEL: ' + args[0];
        } else {
          args.unshift('TUNNEL:');
        }
        console.error.apply(console, args);
      };
    } else {
      debug = function () {};
    }
    exports.debug = debug;
  },
});

// node_modules/tunnel/index.js
var require_tunnel2 = __commonJS({
  'node_modules/tunnel/index.js'(exports, module2) {
    module2.exports = require_tunnel();
  },
});

// node_modules/@actions/http-client/lib/index.js
var require_lib = __commonJS({
  'node_modules/@actions/http-client/lib/index.js'(exports) {
    'use strict';
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k];
              },
            });
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          });
    var __setModuleDefault =
      (exports && exports.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          });
    var __importStar =
      (exports && exports.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== 'default' && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpClient =
      exports.isHttps =
      exports.HttpClientResponse =
      exports.HttpClientError =
      exports.getProxyUrl =
      exports.MediaTypes =
      exports.Headers =
      exports.HttpCodes =
        void 0;
    var http = __importStar(require('http'));
    var https = __importStar(require('https'));
    var pm = __importStar(require_proxy());
    var tunnel = __importStar(require_tunnel2());
    var HttpCodes;
    (function (HttpCodes2) {
      HttpCodes2[(HttpCodes2['OK'] = 200)] = 'OK';
      HttpCodes2[(HttpCodes2['MultipleChoices'] = 300)] = 'MultipleChoices';
      HttpCodes2[(HttpCodes2['MovedPermanently'] = 301)] = 'MovedPermanently';
      HttpCodes2[(HttpCodes2['ResourceMoved'] = 302)] = 'ResourceMoved';
      HttpCodes2[(HttpCodes2['SeeOther'] = 303)] = 'SeeOther';
      HttpCodes2[(HttpCodes2['NotModified'] = 304)] = 'NotModified';
      HttpCodes2[(HttpCodes2['UseProxy'] = 305)] = 'UseProxy';
      HttpCodes2[(HttpCodes2['SwitchProxy'] = 306)] = 'SwitchProxy';
      HttpCodes2[(HttpCodes2['TemporaryRedirect'] = 307)] = 'TemporaryRedirect';
      HttpCodes2[(HttpCodes2['PermanentRedirect'] = 308)] = 'PermanentRedirect';
      HttpCodes2[(HttpCodes2['BadRequest'] = 400)] = 'BadRequest';
      HttpCodes2[(HttpCodes2['Unauthorized'] = 401)] = 'Unauthorized';
      HttpCodes2[(HttpCodes2['PaymentRequired'] = 402)] = 'PaymentRequired';
      HttpCodes2[(HttpCodes2['Forbidden'] = 403)] = 'Forbidden';
      HttpCodes2[(HttpCodes2['NotFound'] = 404)] = 'NotFound';
      HttpCodes2[(HttpCodes2['MethodNotAllowed'] = 405)] = 'MethodNotAllowed';
      HttpCodes2[(HttpCodes2['NotAcceptable'] = 406)] = 'NotAcceptable';
      HttpCodes2[(HttpCodes2['ProxyAuthenticationRequired'] = 407)] = 'ProxyAuthenticationRequired';
      HttpCodes2[(HttpCodes2['RequestTimeout'] = 408)] = 'RequestTimeout';
      HttpCodes2[(HttpCodes2['Conflict'] = 409)] = 'Conflict';
      HttpCodes2[(HttpCodes2['Gone'] = 410)] = 'Gone';
      HttpCodes2[(HttpCodes2['TooManyRequests'] = 429)] = 'TooManyRequests';
      HttpCodes2[(HttpCodes2['InternalServerError'] = 500)] = 'InternalServerError';
      HttpCodes2[(HttpCodes2['NotImplemented'] = 501)] = 'NotImplemented';
      HttpCodes2[(HttpCodes2['BadGateway'] = 502)] = 'BadGateway';
      HttpCodes2[(HttpCodes2['ServiceUnavailable'] = 503)] = 'ServiceUnavailable';
      HttpCodes2[(HttpCodes2['GatewayTimeout'] = 504)] = 'GatewayTimeout';
    })((HttpCodes = exports.HttpCodes || (exports.HttpCodes = {})));
    var Headers2;
    (function (Headers3) {
      Headers3['Accept'] = 'accept';
      Headers3['ContentType'] = 'content-type';
    })((Headers2 = exports.Headers || (exports.Headers = {})));
    var MediaTypes;
    (function (MediaTypes2) {
      MediaTypes2['ApplicationJson'] = 'application/json';
    })((MediaTypes = exports.MediaTypes || (exports.MediaTypes = {})));
    function getProxyUrl(serverUrl) {
      const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
      return proxyUrl ? proxyUrl.href : '';
    }
    exports.getProxyUrl = getProxyUrl;
    var HttpRedirectCodes = [
      HttpCodes.MovedPermanently,
      HttpCodes.ResourceMoved,
      HttpCodes.SeeOther,
      HttpCodes.TemporaryRedirect,
      HttpCodes.PermanentRedirect,
    ];
    var HttpResponseRetryCodes = [HttpCodes.BadGateway, HttpCodes.ServiceUnavailable, HttpCodes.GatewayTimeout];
    var RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
    var ExponentialBackoffCeiling = 10;
    var ExponentialBackoffTimeSlice = 5;
    var HttpClientError = class extends Error {
      constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
      }
    };
    exports.HttpClientError = HttpClientError;
    var HttpClientResponse = class {
      constructor(message) {
        this.message = message;
      }
      readBody() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve) =>
            __awaiter(this, void 0, void 0, function* () {
              let output = Buffer.alloc(0);
              this.message.on('data', (chunk) => {
                output = Buffer.concat([output, chunk]);
              });
              this.message.on('end', () => {
                resolve(output.toString());
              });
            })
          );
        });
      }
    };
    exports.HttpClientResponse = HttpClientResponse;
    function isHttps(requestUrl) {
      const parsedUrl = new URL(requestUrl);
      return parsedUrl.protocol === 'https:';
    }
    exports.isHttps = isHttps;
    var HttpClient = class {
      constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
          if (requestOptions.ignoreSslError != null) {
            this._ignoreSslError = requestOptions.ignoreSslError;
          }
          this._socketTimeout = requestOptions.socketTimeout;
          if (requestOptions.allowRedirects != null) {
            this._allowRedirects = requestOptions.allowRedirects;
          }
          if (requestOptions.allowRedirectDowngrade != null) {
            this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
          }
          if (requestOptions.maxRedirects != null) {
            this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
          }
          if (requestOptions.keepAlive != null) {
            this._keepAlive = requestOptions.keepAlive;
          }
          if (requestOptions.allowRetries != null) {
            this._allowRetries = requestOptions.allowRetries;
          }
          if (requestOptions.maxRetries != null) {
            this._maxRetries = requestOptions.maxRetries;
          }
        }
      }
      options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
      }
      get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
      }
      del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
      }
      post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
      }
      patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
      }
      put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
      }
      head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
      }
      sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request(verb, requestUrl, stream, additionalHeaders);
        });
      }
      getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers2.Accept,
            MediaTypes.ApplicationJson
          );
          const res = yield this.get(requestUrl, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers2.Accept,
            MediaTypes.ApplicationJson
          );
          additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers2.ContentType,
            MediaTypes.ApplicationJson
          );
          const res = yield this.post(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers2.Accept,
            MediaTypes.ApplicationJson
          );
          additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers2.ContentType,
            MediaTypes.ApplicationJson
          );
          const res = yield this.put(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers2.Accept] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers2.Accept,
            MediaTypes.ApplicationJson
          );
          additionalHeaders[Headers2.ContentType] = this._getExistingOrDefaultHeader(
            additionalHeaders,
            Headers2.ContentType,
            MediaTypes.ApplicationJson
          );
          const res = yield this.patch(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._disposed) {
            throw new Error('Client has already been disposed.');
          }
          const parsedUrl = new URL(requestUrl);
          let info = this._prepareRequest(verb, parsedUrl, headers);
          const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
          let numTries = 0;
          let response;
          do {
            response = yield this.requestRaw(info, data);
            if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
              let authenticationHandler;
              for (const handler of this.handlers) {
                if (handler.canHandleAuthentication(response)) {
                  authenticationHandler = handler;
                  break;
                }
              }
              if (authenticationHandler) {
                return authenticationHandler.handleAuthentication(this, info, data);
              } else {
                return response;
              }
            }
            let redirectsRemaining = this._maxRedirects;
            while (
              response.message.statusCode &&
              HttpRedirectCodes.includes(response.message.statusCode) &&
              this._allowRedirects &&
              redirectsRemaining > 0
            ) {
              const redirectUrl = response.message.headers['location'];
              if (!redirectUrl) {
                break;
              }
              const parsedRedirectUrl = new URL(redirectUrl);
              if (
                parsedUrl.protocol === 'https:' &&
                parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                !this._allowRedirectDowngrade
              ) {
                throw new Error(
                  'Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.'
                );
              }
              yield response.readBody();
              if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                for (const header in headers) {
                  if (header.toLowerCase() === 'authorization') {
                    delete headers[header];
                  }
                }
              }
              info = this._prepareRequest(verb, parsedRedirectUrl, headers);
              response = yield this.requestRaw(info, data);
              redirectsRemaining--;
            }
            if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) {
              return response;
            }
            numTries += 1;
            if (numTries < maxTries) {
              yield response.readBody();
              yield this._performExponentialBackoff(numTries);
            }
          } while (numTries < maxTries);
          return response;
        });
      }
      dispose() {
        if (this._agent) {
          this._agent.destroy();
        }
        this._disposed = true;
      }
      requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            function callbackForResult(err, res) {
              if (err) {
                reject(err);
              } else if (!res) {
                reject(new Error('Unknown error'));
              } else {
                resolve(res);
              }
            }
            this.requestRawWithCallback(info, data, callbackForResult);
          });
        });
      }
      requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
          if (!info.options.headers) {
            info.options.headers = {};
          }
          info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
          if (!callbackCalled) {
            callbackCalled = true;
            onResult(err, res);
          }
        }
        const req = info.httpModule.request(info.options, (msg) => {
          const res = new HttpClientResponse(msg);
          handleResult(void 0, res);
        });
        let socket;
        req.on('socket', (sock) => {
          socket = sock;
        });
        req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
          if (socket) {
            socket.end();
          }
          handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
          handleResult(err);
        });
        if (data && typeof data === 'string') {
          req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
          data.on('close', function () {
            req.end();
          });
          data.pipe(req);
        } else {
          req.end();
        }
      }
      getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
      }
      _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;
        info.options.path = (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
          info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        if (this.handlers) {
          for (const handler of this.handlers) {
            handler.prepareRequest(info.options);
          }
        }
        return info;
      }
      _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
          return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
      }
      _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
          clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
      }
      _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
          agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
          agent = this._agent;
        }
        if (agent) {
          return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
          maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        if (proxyUrl && proxyUrl.hostname) {
          const agentOptions = {
            maxSockets,
            keepAlive: this._keepAlive,
            proxy: Object.assign(
              Object.assign(
                {},
                (proxyUrl.username || proxyUrl.password) && {
                  proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`,
                }
              ),
              { host: proxyUrl.hostname, port: proxyUrl.port }
            ),
          };
          let tunnelAgent;
          const overHttps = proxyUrl.protocol === 'https:';
          if (usingSsl) {
            tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
          } else {
            tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
          }
          agent = tunnelAgent(agentOptions);
          this._proxyAgent = agent;
        }
        if (this._keepAlive && !agent) {
          const options = { keepAlive: this._keepAlive, maxSockets };
          agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
          this._agent = agent;
        }
        if (!agent) {
          agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
          agent.options = Object.assign(agent.options || {}, {
            rejectUnauthorized: false,
          });
        }
        return agent;
      }
      _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
          retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
          const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
          return new Promise((resolve) => setTimeout(() => resolve(), ms));
        });
      }
      _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) =>
            __awaiter(this, void 0, void 0, function* () {
              const statusCode = res.message.statusCode || 0;
              const response = {
                statusCode,
                result: null,
                headers: {},
              };
              if (statusCode === HttpCodes.NotFound) {
                resolve(response);
              }
              function dateTimeDeserializer(key, value) {
                if (typeof value === 'string') {
                  const a = new Date(value);
                  if (!isNaN(a.valueOf())) {
                    return a;
                  }
                }
                return value;
              }
              let obj;
              let contents;
              try {
                contents = yield res.readBody();
                if (contents && contents.length > 0) {
                  if (options && options.deserializeDates) {
                    obj = JSON.parse(contents, dateTimeDeserializer);
                  } else {
                    obj = JSON.parse(contents);
                  }
                  response.result = obj;
                }
                response.headers = res.message.headers;
              } catch (err) {}
              if (statusCode > 299) {
                let msg;
                if (obj && obj.message) {
                  msg = obj.message;
                } else if (contents && contents.length > 0) {
                  msg = contents;
                } else {
                  msg = `Failed request: (${statusCode})`;
                }
                const err = new HttpClientError(msg, statusCode);
                err.result = response.result;
                reject(err);
              } else {
                resolve(response);
              }
            })
          );
        });
      }
    };
    exports.HttpClient = HttpClient;
    var lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
  },
});

// node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS({
  'node_modules/@actions/http-client/lib/auth.js'(exports) {
    'use strict';
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.PersonalAccessTokenCredentialHandler =
      exports.BearerCredentialHandler =
      exports.BasicCredentialHandler =
        void 0;
    var BasicCredentialHandler = class {
      constructor(username, password) {
        this.username = username;
        this.password = password;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString(
          'base64'
        )}`;
      }
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error('not implemented');
        });
      }
    };
    exports.BasicCredentialHandler = BasicCredentialHandler;
    var BearerCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
      }
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error('not implemented');
        });
      }
    };
    exports.BearerCredentialHandler = BearerCredentialHandler;
    var PersonalAccessTokenCredentialHandler = class {
      constructor(token) {
        this.token = token;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
      }
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error('not implemented');
        });
      }
    };
    exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
  },
});

// node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({
  'node_modules/@actions/core/lib/oidc-utils.js'(exports) {
    'use strict';
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.OidcClient = void 0;
    var http_client_1 = require_lib();
    var auth_1 = require_auth();
    var core_1 = require_core();
    var OidcClient = class {
      static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
          allowRetries: allowRetry,
          maxRetries: maxRetry,
        };
        return new http_client_1.HttpClient(
          'actions/oidc-client',
          [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())],
          requestOptions
        );
      }
      static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
          throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
      }
      static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
          throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
      }
      static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          const httpclient = OidcClient.createHttpClient();
          const res = yield httpclient.getJson(id_token_url).catch((error) => {
            throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error.statusCode}
 
        Error Message: ${error.message}`);
          });
          const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
          if (!id_token) {
            throw new Error('Response json body do not have ID Token field');
          }
          return id_token;
        });
      }
      static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            let id_token_url = OidcClient.getIDTokenUrl();
            if (audience) {
              const encodedAudience = encodeURIComponent(audience);
              id_token_url = `${id_token_url}&audience=${encodedAudience}`;
            }
            (0, core_1.debug)(`ID token url is ${id_token_url}`);
            const id_token = yield OidcClient.getCall(id_token_url);
            (0, core_1.setSecret)(id_token);
            return id_token;
          } catch (error) {
            throw new Error(`Error message: ${error.message}`);
          }
        });
      }
    };
    exports.OidcClient = OidcClient;
  },
});

// node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS({
  'node_modules/@actions/core/lib/summary.js'(exports) {
    'use strict';
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
    var os_1 = require('os');
    var fs_1 = require('fs');
    var { access, appendFile, writeFile } = fs_1.promises;
    exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
    exports.SUMMARY_DOCS_URL =
      'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
    var Summary = class {
      constructor() {
        this._buffer = '';
      }
      filePath() {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._filePath) {
            return this._filePath;
          }
          const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
          if (!pathFromEnv) {
            throw new Error(
              `Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`
            );
          }
          try {
            yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
          } catch (_a) {
            throw new Error(
              `Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`
            );
          }
          this._filePath = pathFromEnv;
          return this._filePath;
        });
      }
      wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
          .map(([key, value]) => ` ${key}="${value}"`)
          .join('');
        if (!content) {
          return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
      }
      write(options) {
        return __awaiter(this, void 0, void 0, function* () {
          const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
          const filePath = yield this.filePath();
          const writeFunc = overwrite ? writeFile : appendFile;
          yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
          return this.emptyBuffer();
        });
      }
      clear() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.emptyBuffer().write({ overwrite: true });
        });
      }
      stringify() {
        return this._buffer;
      }
      isEmptyBuffer() {
        return this._buffer.length === 0;
      }
      emptyBuffer() {
        this._buffer = '';
        return this;
      }
      addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
      }
      addEOL() {
        return this.addRaw(os_1.EOL);
      }
      addCodeBlock(code, lang) {
        const attrs = Object.assign({}, lang && { lang });
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
      }
      addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map((item) => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
      }
      addTable(rows) {
        const tableBody = rows
          .map((row) => {
            const cells = row
              .map((cell) => {
                if (typeof cell === 'string') {
                  return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
                return this.wrap(tag, data, attrs);
              })
              .join('');
            return this.wrap('tr', cells);
          })
          .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
      }
      addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
      }
      addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
      }
      addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag) ? tag : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
      }
      addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
      }
      addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
      }
      addQuote(text, cite) {
        const attrs = Object.assign({}, cite && { cite });
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
      }
      addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
      }
    };
    var _summary = new Summary();
    exports.markdownSummary = _summary;
    exports.summary = _summary;
  },
});

// node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS({
  'node_modules/@actions/core/lib/path-utils.js'(exports) {
    'use strict';
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          });
    var __setModuleDefault =
      (exports && exports.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          });
    var __importStar =
      (exports && exports.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
    var path = __importStar(require('path'));
    function toPosixPath(pth) {
      return pth.replace(/[\\]/g, '/');
    }
    exports.toPosixPath = toPosixPath;
    function toWin32Path(pth) {
      return pth.replace(/[/]/g, '\\');
    }
    exports.toWin32Path = toWin32Path;
    function toPlatformPath(pth) {
      return pth.replace(/[/\\]/g, path.sep);
    }
    exports.toPlatformPath = toPlatformPath;
  },
});

// node_modules/@actions/io/lib/io-util.js
var require_io_util = __commonJS({
  'node_modules/@actions/io/lib/io-util.js'(exports) {
    'use strict';
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k];
              },
            });
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          });
    var __setModuleDefault =
      (exports && exports.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          });
    var __importStar =
      (exports && exports.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== 'default' && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    var _a;
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCmdPath =
      exports.tryGetExecutablePath =
      exports.isRooted =
      exports.isDirectory =
      exports.exists =
      exports.READONLY =
      exports.UV_FS_O_EXLOCK =
      exports.IS_WINDOWS =
      exports.unlink =
      exports.symlink =
      exports.stat =
      exports.rmdir =
      exports.rm =
      exports.rename =
      exports.readlink =
      exports.readdir =
      exports.open =
      exports.mkdir =
      exports.lstat =
      exports.copyFile =
      exports.chmod =
        void 0;
    var fs = __importStar(require('fs'));
    var path = __importStar(require('path'));
    (_a = fs.promises),
      (exports.chmod = _a.chmod),
      (exports.copyFile = _a.copyFile),
      (exports.lstat = _a.lstat),
      (exports.mkdir = _a.mkdir),
      (exports.open = _a.open),
      (exports.readdir = _a.readdir),
      (exports.readlink = _a.readlink),
      (exports.rename = _a.rename),
      (exports.rm = _a.rm),
      (exports.rmdir = _a.rmdir),
      (exports.stat = _a.stat),
      (exports.symlink = _a.symlink),
      (exports.unlink = _a.unlink);
    exports.IS_WINDOWS = process.platform === 'win32';
    exports.UV_FS_O_EXLOCK = 268435456;
    exports.READONLY = fs.constants.O_RDONLY;
    function exists(fsPath) {
      return __awaiter(this, void 0, void 0, function* () {
        try {
          yield exports.stat(fsPath);
        } catch (err) {
          if (err.code === 'ENOENT') {
            return false;
          }
          throw err;
        }
        return true;
      });
    }
    exports.exists = exists;
    function isDirectory(fsPath, useStat = false) {
      return __awaiter(this, void 0, void 0, function* () {
        const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);
        return stats.isDirectory();
      });
    }
    exports.isDirectory = isDirectory;
    function isRooted(p) {
      p = normalizeSeparators(p);
      if (!p) {
        throw new Error('isRooted() parameter "p" cannot be empty');
      }
      if (exports.IS_WINDOWS) {
        return p.startsWith('\\') || /^[A-Z]:/i.test(p);
      }
      return p.startsWith('/');
    }
    exports.isRooted = isRooted;
    function tryGetExecutablePath(filePath, extensions) {
      return __awaiter(this, void 0, void 0, function* () {
        let stats = void 0;
        try {
          stats = yield exports.stat(filePath);
        } catch (err) {
          if (err.code !== 'ENOENT') {
            console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
          }
        }
        if (stats && stats.isFile()) {
          if (exports.IS_WINDOWS) {
            const upperExt = path.extname(filePath).toUpperCase();
            if (extensions.some((validExt) => validExt.toUpperCase() === upperExt)) {
              return filePath;
            }
          } else {
            if (isUnixExecutable(stats)) {
              return filePath;
            }
          }
        }
        const originalFilePath = filePath;
        for (const extension of extensions) {
          filePath = originalFilePath + extension;
          stats = void 0;
          try {
            stats = yield exports.stat(filePath);
          } catch (err) {
            if (err.code !== 'ENOENT') {
              console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
            }
          }
          if (stats && stats.isFile()) {
            if (exports.IS_WINDOWS) {
              try {
                const directory = path.dirname(filePath);
                const upperName = path.basename(filePath).toUpperCase();
                for (const actualName of yield exports.readdir(directory)) {
                  if (upperName === actualName.toUpperCase()) {
                    filePath = path.join(directory, actualName);
                    break;
                  }
                }
              } catch (err) {
                console.log(
                  `Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`
                );
              }
              return filePath;
            } else {
              if (isUnixExecutable(stats)) {
                return filePath;
              }
            }
          }
        }
        return '';
      });
    }
    exports.tryGetExecutablePath = tryGetExecutablePath;
    function normalizeSeparators(p) {
      p = p || '';
      if (exports.IS_WINDOWS) {
        p = p.replace(/\//g, '\\');
        return p.replace(/\\\\+/g, '\\');
      }
      return p.replace(/\/\/+/g, '/');
    }
    function isUnixExecutable(stats) {
      return (
        (stats.mode & 1) > 0 ||
        ((stats.mode & 8) > 0 && stats.gid === process.getgid()) ||
        ((stats.mode & 64) > 0 && stats.uid === process.getuid())
      );
    }
    function getCmdPath() {
      var _a2;
      return (_a2 = process.env['COMSPEC']) !== null && _a2 !== void 0 ? _a2 : `cmd.exe`;
    }
    exports.getCmdPath = getCmdPath;
  },
});

// node_modules/@actions/io/lib/io.js
var require_io = __commonJS({
  'node_modules/@actions/io/lib/io.js'(exports) {
    'use strict';
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k];
              },
            });
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          });
    var __setModuleDefault =
      (exports && exports.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          });
    var __importStar =
      (exports && exports.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== 'default' && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = void 0;
    var assert_1 = require('assert');
    var path = __importStar(require('path'));
    var ioUtil = __importStar(require_io_util());
    function cp(source, dest, options = {}) {
      return __awaiter(this, void 0, void 0, function* () {
        const { force, recursive, copySourceDirectory } = readCopyOptions(options);
        const destStat = (yield ioUtil.exists(dest)) ? yield ioUtil.stat(dest) : null;
        if (destStat && destStat.isFile() && !force) {
          return;
        }
        const newDest =
          destStat && destStat.isDirectory() && copySourceDirectory ? path.join(dest, path.basename(source)) : dest;
        if (!(yield ioUtil.exists(source))) {
          throw new Error(`no such file or directory: ${source}`);
        }
        const sourceStat = yield ioUtil.stat(source);
        if (sourceStat.isDirectory()) {
          if (!recursive) {
            throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
          } else {
            yield cpDirRecursive(source, newDest, 0, force);
          }
        } else {
          if (path.relative(source, newDest) === '') {
            throw new Error(`'${newDest}' and '${source}' are the same file`);
          }
          yield copyFile(source, newDest, force);
        }
      });
    }
    exports.cp = cp;
    function mv(source, dest, options = {}) {
      return __awaiter(this, void 0, void 0, function* () {
        if (yield ioUtil.exists(dest)) {
          let destExists = true;
          if (yield ioUtil.isDirectory(dest)) {
            dest = path.join(dest, path.basename(source));
            destExists = yield ioUtil.exists(dest);
          }
          if (destExists) {
            if (options.force == null || options.force) {
              yield rmRF(dest);
            } else {
              throw new Error('Destination already exists');
            }
          }
        }
        yield mkdirP(path.dirname(dest));
        yield ioUtil.rename(source, dest);
      });
    }
    exports.mv = mv;
    function rmRF(inputPath) {
      return __awaiter(this, void 0, void 0, function* () {
        if (ioUtil.IS_WINDOWS) {
          if (/[*"<>|]/.test(inputPath)) {
            throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');
          }
        }
        try {
          yield ioUtil.rm(inputPath, {
            force: true,
            maxRetries: 3,
            recursive: true,
            retryDelay: 300,
          });
        } catch (err) {
          throw new Error(`File was unable to be removed ${err}`);
        }
      });
    }
    exports.rmRF = rmRF;
    function mkdirP(fsPath) {
      return __awaiter(this, void 0, void 0, function* () {
        assert_1.ok(fsPath, 'a path argument must be provided');
        yield ioUtil.mkdir(fsPath, { recursive: true });
      });
    }
    exports.mkdirP = mkdirP;
    function which(tool, check) {
      return __awaiter(this, void 0, void 0, function* () {
        if (!tool) {
          throw new Error("parameter 'tool' is required");
        }
        if (check) {
          const result = yield which(tool, false);
          if (!result) {
            if (ioUtil.IS_WINDOWS) {
              throw new Error(
                `Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`
              );
            } else {
              throw new Error(
                `Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`
              );
            }
          }
          return result;
        }
        const matches = yield findInPath(tool);
        if (matches && matches.length > 0) {
          return matches[0];
        }
        return '';
      });
    }
    exports.which = which;
    function findInPath(tool) {
      return __awaiter(this, void 0, void 0, function* () {
        if (!tool) {
          throw new Error("parameter 'tool' is required");
        }
        const extensions = [];
        if (ioUtil.IS_WINDOWS && process.env['PATHEXT']) {
          for (const extension of process.env['PATHEXT'].split(path.delimiter)) {
            if (extension) {
              extensions.push(extension);
            }
          }
        }
        if (ioUtil.isRooted(tool)) {
          const filePath = yield ioUtil.tryGetExecutablePath(tool, extensions);
          if (filePath) {
            return [filePath];
          }
          return [];
        }
        if (tool.includes(path.sep)) {
          return [];
        }
        const directories = [];
        if (process.env.PATH) {
          for (const p of process.env.PATH.split(path.delimiter)) {
            if (p) {
              directories.push(p);
            }
          }
        }
        const matches = [];
        for (const directory of directories) {
          const filePath = yield ioUtil.tryGetExecutablePath(path.join(directory, tool), extensions);
          if (filePath) {
            matches.push(filePath);
          }
        }
        return matches;
      });
    }
    exports.findInPath = findInPath;
    function readCopyOptions(options) {
      const force = options.force == null ? true : options.force;
      const recursive = Boolean(options.recursive);
      const copySourceDirectory = options.copySourceDirectory == null ? true : Boolean(options.copySourceDirectory);
      return { force, recursive, copySourceDirectory };
    }
    function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
      return __awaiter(this, void 0, void 0, function* () {
        if (currentDepth >= 255) return;
        currentDepth++;
        yield mkdirP(destDir);
        const files = yield ioUtil.readdir(sourceDir);
        for (const fileName of files) {
          const srcFile = `${sourceDir}/${fileName}`;
          const destFile = `${destDir}/${fileName}`;
          const srcFileStat = yield ioUtil.lstat(srcFile);
          if (srcFileStat.isDirectory()) {
            yield cpDirRecursive(srcFile, destFile, currentDepth, force);
          } else {
            yield copyFile(srcFile, destFile, force);
          }
        }
        yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);
      });
    }
    function copyFile(srcFile, destFile, force) {
      return __awaiter(this, void 0, void 0, function* () {
        if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {
          try {
            yield ioUtil.lstat(destFile);
            yield ioUtil.unlink(destFile);
          } catch (e) {
            if (e.code === 'EPERM') {
              yield ioUtil.chmod(destFile, '0666');
              yield ioUtil.unlink(destFile);
            }
          }
          const symlinkFull = yield ioUtil.readlink(srcFile);
          yield ioUtil.symlink(symlinkFull, destFile, ioUtil.IS_WINDOWS ? 'junction' : null);
        } else if (!(yield ioUtil.exists(destFile)) || force) {
          yield ioUtil.copyFile(srcFile, destFile);
        }
      });
    }
  },
});

// node_modules/@actions/exec/lib/toolrunner.js
var require_toolrunner = __commonJS({
  'node_modules/@actions/exec/lib/toolrunner.js'(exports) {
    'use strict';
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k];
              },
            });
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          });
    var __setModuleDefault =
      (exports && exports.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          });
    var __importStar =
      (exports && exports.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== 'default' && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.argStringToArray = exports.ToolRunner = void 0;
    var os = __importStar(require('os'));
    var events = __importStar(require('events'));
    var child = __importStar(require('child_process'));
    var path = __importStar(require('path'));
    var io = __importStar(require_io());
    var ioUtil = __importStar(require_io_util());
    var timers_1 = require('timers');
    var IS_WINDOWS = process.platform === 'win32';
    var ToolRunner = class extends events.EventEmitter {
      constructor(toolPath, args, options) {
        super();
        if (!toolPath) {
          throw new Error("Parameter 'toolPath' cannot be null or empty.");
        }
        this.toolPath = toolPath;
        this.args = args || [];
        this.options = options || {};
      }
      _debug(message) {
        if (this.options.listeners && this.options.listeners.debug) {
          this.options.listeners.debug(message);
        }
      }
      _getCommandString(options, noPrefix) {
        const toolPath = this._getSpawnFileName();
        const args = this._getSpawnArgs(options);
        let cmd = noPrefix ? '' : '[command]';
        if (IS_WINDOWS) {
          if (this._isCmdFile()) {
            cmd += toolPath;
            for (const a of args) {
              cmd += ` ${a}`;
            }
          } else if (options.windowsVerbatimArguments) {
            cmd += `"${toolPath}"`;
            for (const a of args) {
              cmd += ` ${a}`;
            }
          } else {
            cmd += this._windowsQuoteCmdArg(toolPath);
            for (const a of args) {
              cmd += ` ${this._windowsQuoteCmdArg(a)}`;
            }
          }
        } else {
          cmd += toolPath;
          for (const a of args) {
            cmd += ` ${a}`;
          }
        }
        return cmd;
      }
      _processLineBuffer(data, strBuffer, onLine) {
        try {
          let s = strBuffer + data.toString();
          let n = s.indexOf(os.EOL);
          while (n > -1) {
            const line = s.substring(0, n);
            onLine(line);
            s = s.substring(n + os.EOL.length);
            n = s.indexOf(os.EOL);
          }
          return s;
        } catch (err) {
          this._debug(`error processing line. Failed with error ${err}`);
          return '';
        }
      }
      _getSpawnFileName() {
        if (IS_WINDOWS) {
          if (this._isCmdFile()) {
            return process.env['COMSPEC'] || 'cmd.exe';
          }
        }
        return this.toolPath;
      }
      _getSpawnArgs(options) {
        if (IS_WINDOWS) {
          if (this._isCmdFile()) {
            let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
            for (const a of this.args) {
              argline += ' ';
              argline += options.windowsVerbatimArguments ? a : this._windowsQuoteCmdArg(a);
            }
            argline += '"';
            return [argline];
          }
        }
        return this.args;
      }
      _endsWith(str, end) {
        return str.endsWith(end);
      }
      _isCmdFile() {
        const upperToolPath = this.toolPath.toUpperCase();
        return this._endsWith(upperToolPath, '.CMD') || this._endsWith(upperToolPath, '.BAT');
      }
      _windowsQuoteCmdArg(arg) {
        if (!this._isCmdFile()) {
          return this._uvQuoteCmdArg(arg);
        }
        if (!arg) {
          return '""';
        }
        const cmdSpecialChars = [
          ' ',
          '	',
          '&',
          '(',
          ')',
          '[',
          ']',
          '{',
          '}',
          '^',
          '=',
          ';',
          '!',
          "'",
          '+',
          ',',
          '`',
          '~',
          '|',
          '<',
          '>',
          '"',
        ];
        let needsQuotes = false;
        for (const char of arg) {
          if (cmdSpecialChars.some((x) => x === char)) {
            needsQuotes = true;
            break;
          }
        }
        if (!needsQuotes) {
          return arg;
        }
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
          reverse += arg[i - 1];
          if (quoteHit && arg[i - 1] === '\\') {
            reverse += '\\';
          } else if (arg[i - 1] === '"') {
            quoteHit = true;
            reverse += '"';
          } else {
            quoteHit = false;
          }
        }
        reverse += '"';
        return reverse.split('').reverse().join('');
      }
      _uvQuoteCmdArg(arg) {
        if (!arg) {
          return '""';
        }
        if (!arg.includes(' ') && !arg.includes('	') && !arg.includes('"')) {
          return arg;
        }
        if (!arg.includes('"') && !arg.includes('\\')) {
          return `"${arg}"`;
        }
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
          reverse += arg[i - 1];
          if (quoteHit && arg[i - 1] === '\\') {
            reverse += '\\';
          } else if (arg[i - 1] === '"') {
            quoteHit = true;
            reverse += '\\';
          } else {
            quoteHit = false;
          }
        }
        reverse += '"';
        return reverse.split('').reverse().join('');
      }
      _cloneExecOptions(options) {
        options = options || {};
        const result = {
          cwd: options.cwd || process.cwd(),
          env: options.env || process.env,
          silent: options.silent || false,
          windowsVerbatimArguments: options.windowsVerbatimArguments || false,
          failOnStdErr: options.failOnStdErr || false,
          ignoreReturnCode: options.ignoreReturnCode || false,
          delay: options.delay || 1e4,
        };
        result.outStream = options.outStream || process.stdout;
        result.errStream = options.errStream || process.stderr;
        return result;
      }
      _getSpawnOptions(options, toolPath) {
        options = options || {};
        const result = {};
        result.cwd = options.cwd;
        result.env = options.env;
        result['windowsVerbatimArguments'] = options.windowsVerbatimArguments || this._isCmdFile();
        if (options.windowsVerbatimArguments) {
          result.argv0 = `"${toolPath}"`;
        }
        return result;
      }
      exec() {
        return __awaiter(this, void 0, void 0, function* () {
          if (
            !ioUtil.isRooted(this.toolPath) &&
            (this.toolPath.includes('/') || (IS_WINDOWS && this.toolPath.includes('\\')))
          ) {
            this.toolPath = path.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
          }
          this.toolPath = yield io.which(this.toolPath, true);
          return new Promise((resolve, reject) =>
            __awaiter(this, void 0, void 0, function* () {
              this._debug(`exec tool: ${this.toolPath}`);
              this._debug('arguments:');
              for (const arg of this.args) {
                this._debug(`   ${arg}`);
              }
              const optionsNonNull = this._cloneExecOptions(this.options);
              if (!optionsNonNull.silent && optionsNonNull.outStream) {
                optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os.EOL);
              }
              const state = new ExecState(optionsNonNull, this.toolPath);
              state.on('debug', (message) => {
                this._debug(message);
              });
              if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) {
                return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
              }
              const fileName = this._getSpawnFileName();
              const cp = child.spawn(
                fileName,
                this._getSpawnArgs(optionsNonNull),
                this._getSpawnOptions(this.options, fileName)
              );
              let stdbuffer = '';
              if (cp.stdout) {
                cp.stdout.on('data', (data) => {
                  if (this.options.listeners && this.options.listeners.stdout) {
                    this.options.listeners.stdout(data);
                  }
                  if (!optionsNonNull.silent && optionsNonNull.outStream) {
                    optionsNonNull.outStream.write(data);
                  }
                  stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {
                    if (this.options.listeners && this.options.listeners.stdline) {
                      this.options.listeners.stdline(line);
                    }
                  });
                });
              }
              let errbuffer = '';
              if (cp.stderr) {
                cp.stderr.on('data', (data) => {
                  state.processStderr = true;
                  if (this.options.listeners && this.options.listeners.stderr) {
                    this.options.listeners.stderr(data);
                  }
                  if (!optionsNonNull.silent && optionsNonNull.errStream && optionsNonNull.outStream) {
                    const s = optionsNonNull.failOnStdErr ? optionsNonNull.errStream : optionsNonNull.outStream;
                    s.write(data);
                  }
                  errbuffer = this._processLineBuffer(data, errbuffer, (line) => {
                    if (this.options.listeners && this.options.listeners.errline) {
                      this.options.listeners.errline(line);
                    }
                  });
                });
              }
              cp.on('error', (err) => {
                state.processError = err.message;
                state.processExited = true;
                state.processClosed = true;
                state.CheckComplete();
              });
              cp.on('exit', (code) => {
                state.processExitCode = code;
                state.processExited = true;
                this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);
                state.CheckComplete();
              });
              cp.on('close', (code) => {
                state.processExitCode = code;
                state.processExited = true;
                state.processClosed = true;
                this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
                state.CheckComplete();
              });
              state.on('done', (error, exitCode) => {
                if (stdbuffer.length > 0) {
                  this.emit('stdline', stdbuffer);
                }
                if (errbuffer.length > 0) {
                  this.emit('errline', errbuffer);
                }
                cp.removeAllListeners();
                if (error) {
                  reject(error);
                } else {
                  resolve(exitCode);
                }
              });
              if (this.options.input) {
                if (!cp.stdin) {
                  throw new Error('child process missing stdin');
                }
                cp.stdin.end(this.options.input);
              }
            })
          );
        });
      }
    };
    exports.ToolRunner = ToolRunner;
    function argStringToArray(argString) {
      const args = [];
      let inQuotes = false;
      let escaped = false;
      let arg = '';
      function append(c) {
        if (escaped && c !== '"') {
          arg += '\\';
        }
        arg += c;
        escaped = false;
      }
      for (let i = 0; i < argString.length; i++) {
        const c = argString.charAt(i);
        if (c === '"') {
          if (!escaped) {
            inQuotes = !inQuotes;
          } else {
            append(c);
          }
          continue;
        }
        if (c === '\\' && escaped) {
          append(c);
          continue;
        }
        if (c === '\\' && inQuotes) {
          escaped = true;
          continue;
        }
        if (c === ' ' && !inQuotes) {
          if (arg.length > 0) {
            args.push(arg);
            arg = '';
          }
          continue;
        }
        append(c);
      }
      if (arg.length > 0) {
        args.push(arg.trim());
      }
      return args;
    }
    exports.argStringToArray = argStringToArray;
    var ExecState = class extends events.EventEmitter {
      constructor(options, toolPath) {
        super();
        this.processClosed = false;
        this.processError = '';
        this.processExitCode = 0;
        this.processExited = false;
        this.processStderr = false;
        this.delay = 1e4;
        this.done = false;
        this.timeout = null;
        if (!toolPath) {
          throw new Error('toolPath must not be empty');
        }
        this.options = options;
        this.toolPath = toolPath;
        if (options.delay) {
          this.delay = options.delay;
        }
      }
      CheckComplete() {
        if (this.done) {
          return;
        }
        if (this.processClosed) {
          this._setResult();
        } else if (this.processExited) {
          this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);
        }
      }
      _debug(message) {
        this.emit('debug', message);
      }
      _setResult() {
        let error;
        if (this.processExited) {
          if (this.processError) {
            error = new Error(
              `There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`
            );
          } else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) {
            error = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
          } else if (this.processStderr && this.options.failOnStdErr) {
            error = new Error(
              `The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`
            );
          }
        }
        if (this.timeout) {
          clearTimeout(this.timeout);
          this.timeout = null;
        }
        this.done = true;
        this.emit('done', error, this.processExitCode);
      }
      static HandleTimeout(state) {
        if (state.done) {
          return;
        }
        if (!state.processClosed && state.processExited) {
          const message = `The STDIO streams did not close within ${
            state.delay / 1e3
          } seconds of the exit event from process '${
            state.toolPath
          }'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
          state._debug(message);
        }
        state._setResult();
      }
    };
  },
});

// node_modules/@actions/exec/lib/exec.js
var require_exec = __commonJS({
  'node_modules/@actions/exec/lib/exec.js'(exports) {
    'use strict';
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            Object.defineProperty(o, k2, {
              enumerable: true,
              get: function () {
                return m[k];
              },
            });
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          });
    var __setModuleDefault =
      (exports && exports.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          });
    var __importStar =
      (exports && exports.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== 'default' && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getExecOutput = exports.exec = void 0;
    var string_decoder_1 = require('string_decoder');
    var tr = __importStar(require_toolrunner());
    function exec(commandLine, args, options) {
      return __awaiter(this, void 0, void 0, function* () {
        const commandArgs = tr.argStringToArray(commandLine);
        if (commandArgs.length === 0) {
          throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
        }
        const toolPath = commandArgs[0];
        args = commandArgs.slice(1).concat(args || []);
        const runner = new tr.ToolRunner(toolPath, args, options);
        return runner.exec();
      });
    }
    exports.exec = exec;
    function getExecOutput(commandLine, args, options) {
      var _a, _b;
      return __awaiter(this, void 0, void 0, function* () {
        let stdout = '';
        let stderr = '';
        const stdoutDecoder = new string_decoder_1.StringDecoder('utf8');
        const stderrDecoder = new string_decoder_1.StringDecoder('utf8');
        const originalStdoutListener =
          (_a = options === null || options === void 0 ? void 0 : options.listeners) === null || _a === void 0
            ? void 0
            : _a.stdout;
        const originalStdErrListener =
          (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0
            ? void 0
            : _b.stderr;
        const stdErrListener = (data) => {
          stderr += stderrDecoder.write(data);
          if (originalStdErrListener) {
            originalStdErrListener(data);
          }
        };
        const stdOutListener = (data) => {
          stdout += stdoutDecoder.write(data);
          if (originalStdoutListener) {
            originalStdoutListener(data);
          }
        };
        const listeners = Object.assign(
          Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners),
          { stdout: stdOutListener, stderr: stdErrListener }
        );
        const exitCode = yield exec(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
        stdout += stdoutDecoder.end();
        stderr += stderrDecoder.end();
        return {
          exitCode,
          stdout,
          stderr,
        };
      });
    }
    exports.getExecOutput = getExecOutput;
  },
});

// node_modules/@actions/core/lib/platform.js
var require_platform = __commonJS({
  'node_modules/@actions/core/lib/platform.js'(exports) {
    'use strict';
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          });
    var __setModuleDefault =
      (exports && exports.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          });
    var __importStar =
      (exports && exports.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    var __importDefault =
      (exports && exports.__importDefault) ||
      function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getDetails =
      exports.isLinux =
      exports.isMacOS =
      exports.isWindows =
      exports.arch =
      exports.platform =
        void 0;
    var os_1 = __importDefault(require('os'));
    var exec = __importStar(require_exec());
    var getWindowsInfo = () =>
      __awaiter(void 0, void 0, void 0, function* () {
        const { stdout: version } = yield exec.getExecOutput(
          'powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Version"',
          void 0,
          {
            silent: true,
          }
        );
        const { stdout: name } = yield exec.getExecOutput(
          'powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Caption"',
          void 0,
          {
            silent: true,
          }
        );
        return {
          name: name.trim(),
          version: version.trim(),
        };
      });
    var getMacOsInfo = () =>
      __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        const { stdout } = yield exec.getExecOutput('sw_vers', void 0, {
          silent: true,
        });
        const version =
          (_b = (_a = stdout.match(/ProductVersion:\s*(.+)/)) === null || _a === void 0 ? void 0 : _a[1]) !== null &&
          _b !== void 0
            ? _b
            : '';
        const name =
          (_d = (_c = stdout.match(/ProductName:\s*(.+)/)) === null || _c === void 0 ? void 0 : _c[1]) !== null &&
          _d !== void 0
            ? _d
            : '';
        return {
          name,
          version,
        };
      });
    var getLinuxInfo = () =>
      __awaiter(void 0, void 0, void 0, function* () {
        const { stdout } = yield exec.getExecOutput('lsb_release', ['-i', '-r', '-s'], {
          silent: true,
        });
        const [name, version] = stdout.trim().split('\n');
        return {
          name,
          version,
        };
      });
    exports.platform = os_1.default.platform();
    exports.arch = os_1.default.arch();
    exports.isWindows = exports.platform === 'win32';
    exports.isMacOS = exports.platform === 'darwin';
    exports.isLinux = exports.platform === 'linux';
    function getDetails() {
      return __awaiter(this, void 0, void 0, function* () {
        return Object.assign(
          Object.assign(
            {},
            yield exports.isWindows ? getWindowsInfo() : exports.isMacOS ? getMacOsInfo() : getLinuxInfo()
          ),
          {
            platform: exports.platform,
            arch: exports.arch,
            isWindows: exports.isWindows,
            isMacOS: exports.isMacOS,
            isLinux: exports.isLinux,
          }
        );
      });
    }
    exports.getDetails = getDetails;
  },
});

// node_modules/@actions/core/lib/core.js
var require_core = __commonJS({
  'node_modules/@actions/core/lib/core.js'(exports) {
    'use strict';
    var __createBinding =
      (exports && exports.__createBinding) ||
      (Object.create
        ? function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                },
              };
            }
            Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
          });
    var __setModuleDefault =
      (exports && exports.__setModuleDefault) ||
      (Object.create
        ? function (o, v) {
            Object.defineProperty(o, 'default', { enumerable: true, value: v });
          }
        : function (o, v) {
            o['default'] = v;
          });
    var __importStar =
      (exports && exports.__importStar) ||
      function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    var __awaiter =
      (exports && exports.__awaiter) ||
      function (thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator['throw'](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.platform =
      exports.toPlatformPath =
      exports.toWin32Path =
      exports.toPosixPath =
      exports.markdownSummary =
      exports.summary =
      exports.getIDToken =
      exports.getState =
      exports.saveState =
      exports.group =
      exports.endGroup =
      exports.startGroup =
      exports.info =
      exports.notice =
      exports.warning =
      exports.error =
      exports.debug =
      exports.isDebug =
      exports.setFailed =
      exports.setCommandEcho =
      exports.setOutput =
      exports.getBooleanInput =
      exports.getMultilineInput =
      exports.getInput =
      exports.addPath =
      exports.setSecret =
      exports.exportVariable =
      exports.ExitCode =
        void 0;
    var command_1 = require_command();
    var file_command_1 = require_file_command();
    var utils_1 = require_utils();
    var os = __importStar(require('os'));
    var path = __importStar(require('path'));
    var oidc_utils_1 = require_oidc_utils();
    var ExitCode;
    (function (ExitCode2) {
      ExitCode2[(ExitCode2['Success'] = 0)] = 'Success';
      ExitCode2[(ExitCode2['Failure'] = 1)] = 'Failure';
    })(ExitCode || (exports.ExitCode = ExitCode = {}));
    function exportVariable(name, val) {
      const convertedVal = (0, utils_1.toCommandValue)(val);
      process.env[name] = convertedVal;
      const filePath = process.env['GITHUB_ENV'] || '';
      if (filePath) {
        return (0, file_command_1.issueFileCommand)('ENV', (0, file_command_1.prepareKeyValueMessage)(name, val));
      }
      (0, command_1.issueCommand)('set-env', { name }, convertedVal);
    }
    exports.exportVariable = exportVariable;
    function setSecret2(secret) {
      (0, command_1.issueCommand)('add-mask', {}, secret);
    }
    exports.setSecret = setSecret2;
    function addPath(inputPath) {
      const filePath = process.env['GITHUB_PATH'] || '';
      if (filePath) {
        (0, file_command_1.issueFileCommand)('PATH', inputPath);
      } else {
        (0, command_1.issueCommand)('add-path', {}, inputPath);
      }
      process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
    }
    exports.addPath = addPath;
    function getInput2(name, options) {
      const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
      if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
      }
      if (options && options.trimWhitespace === false) {
        return val;
      }
      return val.trim();
    }
    exports.getInput = getInput2;
    function getMultilineInput(name, options) {
      const inputs = getInput2(name, options)
        .split('\n')
        .filter((x) => x !== '');
      if (options && options.trimWhitespace === false) {
        return inputs;
      }
      return inputs.map((input) => input.trim());
    }
    exports.getMultilineInput = getMultilineInput;
    function getBooleanInput(name, options) {
      const trueValue = ['true', 'True', 'TRUE'];
      const falseValue = ['false', 'False', 'FALSE'];
      const val = getInput2(name, options);
      if (trueValue.includes(val)) return true;
      if (falseValue.includes(val)) return false;
      throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
    }
    exports.getBooleanInput = getBooleanInput;
    function setOutput2(name, value) {
      const filePath = process.env['GITHUB_OUTPUT'] || '';
      if (filePath) {
        return (0, file_command_1.issueFileCommand)('OUTPUT', (0, file_command_1.prepareKeyValueMessage)(name, value));
      }
      process.stdout.write(os.EOL);
      (0, command_1.issueCommand)('set-output', { name }, (0, utils_1.toCommandValue)(value));
    }
    exports.setOutput = setOutput2;
    function setCommandEcho(enabled) {
      (0, command_1.issue)('echo', enabled ? 'on' : 'off');
    }
    exports.setCommandEcho = setCommandEcho;
    function setFailed2(message) {
      process.exitCode = ExitCode.Failure;
      error(message);
    }
    exports.setFailed = setFailed2;
    function isDebug() {
      return process.env['RUNNER_DEBUG'] === '1';
    }
    exports.isDebug = isDebug;
    function debug(message) {
      (0, command_1.issueCommand)('debug', {}, message);
    }
    exports.debug = debug;
    function error(message, properties = {}) {
      (0, command_1.issueCommand)(
        'error',
        (0, utils_1.toCommandProperties)(properties),
        message instanceof Error ? message.toString() : message
      );
    }
    exports.error = error;
    function warning(message, properties = {}) {
      (0, command_1.issueCommand)(
        'warning',
        (0, utils_1.toCommandProperties)(properties),
        message instanceof Error ? message.toString() : message
      );
    }
    exports.warning = warning;
    function notice(message, properties = {}) {
      (0, command_1.issueCommand)(
        'notice',
        (0, utils_1.toCommandProperties)(properties),
        message instanceof Error ? message.toString() : message
      );
    }
    exports.notice = notice;
    function info(message) {
      process.stdout.write(message + os.EOL);
    }
    exports.info = info;
    function startGroup(name) {
      (0, command_1.issue)('group', name);
    }
    exports.startGroup = startGroup;
    function endGroup() {
      (0, command_1.issue)('endgroup');
    }
    exports.endGroup = endGroup;
    function group(name, fn) {
      return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
          result = yield fn();
        } finally {
          endGroup();
        }
        return result;
      });
    }
    exports.group = group;
    function saveState(name, value) {
      const filePath = process.env['GITHUB_STATE'] || '';
      if (filePath) {
        return (0, file_command_1.issueFileCommand)('STATE', (0, file_command_1.prepareKeyValueMessage)(name, value));
      }
      (0, command_1.issueCommand)('save-state', { name }, (0, utils_1.toCommandValue)(value));
    }
    exports.saveState = saveState;
    function getState(name) {
      return process.env[`STATE_${name}`] || '';
    }
    exports.getState = getState;
    function getIDToken(aud) {
      return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
      });
    }
    exports.getIDToken = getIDToken;
    var summary_1 = require_summary();
    Object.defineProperty(exports, 'summary', {
      enumerable: true,
      get: function () {
        return summary_1.summary;
      },
    });
    var summary_2 = require_summary();
    Object.defineProperty(exports, 'markdownSummary', {
      enumerable: true,
      get: function () {
        return summary_2.markdownSummary;
      },
    });
    var path_utils_1 = require_path_utils();
    Object.defineProperty(exports, 'toPosixPath', {
      enumerable: true,
      get: function () {
        return path_utils_1.toPosixPath;
      },
    });
    Object.defineProperty(exports, 'toWin32Path', {
      enumerable: true,
      get: function () {
        return path_utils_1.toWin32Path;
      },
    });
    Object.defineProperty(exports, 'toPlatformPath', {
      enumerable: true,
      get: function () {
        return path_utils_1.toPlatformPath;
      },
    });
    exports.platform = __importStar(require_platform());
  },
});

// src/index.ts
var import_client_lambda = __toESM(require_dist_cjs63());
var import_core = __toESM(require_core());
var Props = /* @__PURE__ */ ((Props2) => {
  Props2['FunctionName'] = 'FunctionName';
  Props2['InvocationType'] = 'InvocationType';
  Props2['LogType'] = 'LogType';
  Props2['ClientContext'] = 'ClientContext';
  Props2['Payload'] = 'Payload';
  Props2['Qualifier'] = 'Qualifier';
  return Props2;
})(Props || {});
var getAWSCredentials = () => {
  const accessKeyId = (0, import_core.getInput)('AWS_ACCESS_KEY_ID' /* AWS_ACCESS_KEY_ID */);
  (0, import_core.setSecret)(accessKeyId);
  const secretAccessKey = (0, import_core.getInput)('AWS_SECRET_ACCESS_KEY' /* AWS_SECRET_ACCESS_KEY */);
  (0, import_core.setSecret)(secretAccessKey);
  const sessionToken = (0, import_core.getInput)('AWS_SESSION_TOKEN' /* AWS_SESSION_TOKEN */);
  if (sessionToken) {
    (0, import_core.setSecret)(sessionToken);
  }
  return {
    accessKeyId,
    secretAccessKey,
    sessionToken,
  };
};
var getParams = () => {
  return Object.keys(Props).reduce((memo, prop) => {
    const value = (0, import_core.getInput)(prop);
    return value ? __spreadProps(__spreadValues({}, memo), { [prop]: value }) : memo;
  }, {});
};
var getAWSConfigOptions = () => {
  const httpTimeout = (0, import_core.getInput)('HTTP_TIMEOUT' /* HTTP_TIMEOUT */);
  const maxRetries = (0, import_core.getInput)('MAX_RETRIES' /* MAX_RETRIES */);
  const config = {};
  if (httpTimeout) {
    config.requestHandler = {
      httpOptions: { timeout: parseInt(httpTimeout, 10) },
    };
  }
  if (maxRetries) {
    config.maxAttempts = parseInt(maxRetries, 10);
  }
  return config;
};
var main = async () => {
  try {
    const credentials = getAWSCredentials();
    const configOptions = getAWSConfigOptions();
    const params = getParams();
    const lambda = new import_client_lambda.LambdaClient(
      __spreadValues(
        {
          region: (0, import_core.getInput)('REGION'),
          credentials,
        },
        configOptions
      )
    );
    const command = new import_client_lambda.InvokeCommand(params);
    const response = await lambda.send(command);
    (0, import_core.setOutput)('response', response);
    const succeedOnFailure =
      (0, import_core.getInput)('SUCCEED_ON_FUNCTION_FAILURE' /* SUCCEED_ON_FUNCTION_FAILURE */).toLowerCase() ===
      'true';
    if ('FunctionError' in response && !succeedOnFailure) {
      throw new Error('Lambda invocation failed! See outputs.response for more information.');
    }
  } catch (error) {
    (0, import_core.setFailed)(error instanceof Error ? error.message : JSON.stringify(error));
  }
};

// index.ts
main();
